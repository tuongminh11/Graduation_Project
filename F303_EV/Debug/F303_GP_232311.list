
F303_GP_232311.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000764c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  080077ec  080077ec  000087ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e14  08007e14  00009080  2**0
                  CONTENTS
  4 .ARM          00000008  08007e14  08007e14  00008e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e1c  08007e1c  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e1c  08007e1c  00008e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e20  08007e20  00008e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007e24  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009080  2**0
                  CONTENTS
 10 .bss          00001e74  20000080  20000080  00009080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001ef4  20001ef4  00009080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0df  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026f3  00000000  00000000  0001718f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  00019888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac6  00000000  00000000  0001a688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021dfc  00000000  00000000  0001b14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000124ca  00000000  00000000  0003cf4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5df4  00000000  00000000  0004f414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00115208  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041ac  00000000  00000000  0011524c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  001193f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080077d4 	.word	0x080077d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080077d4 	.word	0x080077d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <HAL_UARTEx_RxEventCallback>:
static void MX_DMA_Init(void);
static void MX_UART4_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	460b      	mov	r3, r1
 800029a:	807b      	strh	r3, [r7, #2]
  UNUSED(huart);

  size = Size;
 800029c:	887b      	ldrh	r3, [r7, #2]
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	4b51      	ldr	r3, [pc, #324]	@ (80003e8 <HAL_UARTEx_RxEventCallback+0x158>)
 80002a2:	701a      	strb	r2, [r3, #0]
  if(huart->Instance == UART4){
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a50      	ldr	r2, [pc, #320]	@ (80003ec <HAL_UARTEx_RxEventCallback+0x15c>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	f040 8098 	bne.w	80003e0 <HAL_UARTEx_RxEventCallback+0x150>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, buffer, UART_SIZE);
 80002b0:	2204      	movs	r2, #4
 80002b2:	494f      	ldr	r1, [pc, #316]	@ (80003f0 <HAL_UARTEx_RxEventCallback+0x160>)
 80002b4:	484f      	ldr	r0, [pc, #316]	@ (80003f4 <HAL_UARTEx_RxEventCallback+0x164>)
 80002b6:	f004 f966 	bl	8004586 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 80002ba:	4b4f      	ldr	r3, [pc, #316]	@ (80003f8 <HAL_UARTEx_RxEventCallback+0x168>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	4b4d      	ldr	r3, [pc, #308]	@ (80003f8 <HAL_UARTEx_RxEventCallback+0x168>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f022 0204 	bic.w	r2, r2, #4
 80002c8:	601a      	str	r2, [r3, #0]
	  switch (buffer[0]) {
 80002ca:	4b49      	ldr	r3, [pc, #292]	@ (80003f0 <HAL_UARTEx_RxEventCallback+0x160>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	3baa      	subs	r3, #170	@ 0xaa
 80002d0:	2b30      	cmp	r3, #48	@ 0x30
 80002d2:	f200 8081 	bhi.w	80003d8 <HAL_UARTEx_RxEventCallback+0x148>
 80002d6:	a201      	add	r2, pc, #4	@ (adr r2, 80002dc <HAL_UARTEx_RxEventCallback+0x4c>)
 80002d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002dc:	080003a1 	.word	0x080003a1
 80002e0:	080003a9 	.word	0x080003a9
 80002e4:	080003b1 	.word	0x080003b1
 80002e8:	080003b9 	.word	0x080003b9
 80002ec:	080003c1 	.word	0x080003c1
 80002f0:	080003c9 	.word	0x080003c9
 80002f4:	080003d9 	.word	0x080003d9
 80002f8:	080003d9 	.word	0x080003d9
 80002fc:	080003d9 	.word	0x080003d9
 8000300:	080003d9 	.word	0x080003d9
 8000304:	080003d9 	.word	0x080003d9
 8000308:	080003d9 	.word	0x080003d9
 800030c:	080003d9 	.word	0x080003d9
 8000310:	080003d9 	.word	0x080003d9
 8000314:	080003d9 	.word	0x080003d9
 8000318:	080003d9 	.word	0x080003d9
 800031c:	080003d9 	.word	0x080003d9
 8000320:	080003d9 	.word	0x080003d9
 8000324:	080003d9 	.word	0x080003d9
 8000328:	080003d9 	.word	0x080003d9
 800032c:	080003d9 	.word	0x080003d9
 8000330:	080003d9 	.word	0x080003d9
 8000334:	080003d9 	.word	0x080003d9
 8000338:	080003d9 	.word	0x080003d9
 800033c:	080003d9 	.word	0x080003d9
 8000340:	080003d9 	.word	0x080003d9
 8000344:	080003d9 	.word	0x080003d9
 8000348:	080003d9 	.word	0x080003d9
 800034c:	080003d9 	.word	0x080003d9
 8000350:	080003d9 	.word	0x080003d9
 8000354:	080003d9 	.word	0x080003d9
 8000358:	080003d9 	.word	0x080003d9
 800035c:	080003d9 	.word	0x080003d9
 8000360:	080003d9 	.word	0x080003d9
 8000364:	080003d9 	.word	0x080003d9
 8000368:	080003d9 	.word	0x080003d9
 800036c:	080003d9 	.word	0x080003d9
 8000370:	080003d9 	.word	0x080003d9
 8000374:	080003d9 	.word	0x080003d9
 8000378:	080003d9 	.word	0x080003d9
 800037c:	080003d9 	.word	0x080003d9
 8000380:	080003d9 	.word	0x080003d9
 8000384:	080003d9 	.word	0x080003d9
 8000388:	080003d9 	.word	0x080003d9
 800038c:	080003d9 	.word	0x080003d9
 8000390:	080003d9 	.word	0x080003d9
 8000394:	080003d9 	.word	0x080003d9
 8000398:	080003d9 	.word	0x080003d9
 800039c:	080003d1 	.word	0x080003d1
		case 0xAA:
			flag = 1;
 80003a0:	4b16      	ldr	r3, [pc, #88]	@ (80003fc <HAL_UARTEx_RxEventCallback+0x16c>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	701a      	strb	r2, [r3, #0]
			break;
 80003a6:	e01b      	b.n	80003e0 <HAL_UARTEx_RxEventCallback+0x150>
		case 0xAB:
			flag = 2;
 80003a8:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <HAL_UARTEx_RxEventCallback+0x16c>)
 80003aa:	2202      	movs	r2, #2
 80003ac:	701a      	strb	r2, [r3, #0]
			break;
 80003ae:	e017      	b.n	80003e0 <HAL_UARTEx_RxEventCallback+0x150>
		case 0xAC:
			flag = 3;
 80003b0:	4b12      	ldr	r3, [pc, #72]	@ (80003fc <HAL_UARTEx_RxEventCallback+0x16c>)
 80003b2:	2203      	movs	r2, #3
 80003b4:	701a      	strb	r2, [r3, #0]
			break;
 80003b6:	e013      	b.n	80003e0 <HAL_UARTEx_RxEventCallback+0x150>
		case 0xAD:
			flag = 4;
 80003b8:	4b10      	ldr	r3, [pc, #64]	@ (80003fc <HAL_UARTEx_RxEventCallback+0x16c>)
 80003ba:	2204      	movs	r2, #4
 80003bc:	701a      	strb	r2, [r3, #0]
			break;
 80003be:	e00f      	b.n	80003e0 <HAL_UARTEx_RxEventCallback+0x150>
		case 0xAE:
			flag = 5;
 80003c0:	4b0e      	ldr	r3, [pc, #56]	@ (80003fc <HAL_UARTEx_RxEventCallback+0x16c>)
 80003c2:	2205      	movs	r2, #5
 80003c4:	701a      	strb	r2, [r3, #0]
			break;
 80003c6:	e00b      	b.n	80003e0 <HAL_UARTEx_RxEventCallback+0x150>
		case 0xAF:
			flag = 6;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <HAL_UARTEx_RxEventCallback+0x16c>)
 80003ca:	2206      	movs	r2, #6
 80003cc:	701a      	strb	r2, [r3, #0]
			break;
 80003ce:	e007      	b.n	80003e0 <HAL_UARTEx_RxEventCallback+0x150>
		case 0xDA:
			flag = 7;
 80003d0:	4b0a      	ldr	r3, [pc, #40]	@ (80003fc <HAL_UARTEx_RxEventCallback+0x16c>)
 80003d2:	2207      	movs	r2, #7
 80003d4:	701a      	strb	r2, [r3, #0]
			break;
 80003d6:	e003      	b.n	80003e0 <HAL_UARTEx_RxEventCallback+0x150>
		default:
			flag = 0;
 80003d8:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <HAL_UARTEx_RxEventCallback+0x16c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]
			break;
 80003de:	bf00      	nop
	}
  }
}
 80003e0:	bf00      	nop
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	200000a0 	.word	0x200000a0
 80003ec:	40004c00 	.word	0x40004c00
 80003f0:	2000009c 	.word	0x2000009c
 80003f4:	20000108 	.word	0x20000108
 80003f8:	20000190 	.word	0x20000190
 80003fc:	200000a1 	.word	0x200000a1

08000400 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
	if(GPIO_Pin == BUTTON_Pin){
 800040a:	88fb      	ldrh	r3, [r7, #6]
 800040c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000410:	d10a      	bne.n	8000428 <HAL_GPIO_EXTI_Callback+0x28>
		SPI_QCA7000_Reset_Config();
 8000412:	f004 fb59 	bl	8004ac8 <SPI_QCA7000_Reset_Config>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000416:	2120      	movs	r1, #32
 8000418:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800041c:	f001 f910 	bl	8001640 <HAL_GPIO_TogglePin>
		flag = 10;
 8000420:	4b08      	ldr	r3, [pc, #32]	@ (8000444 <HAL_GPIO_EXTI_Callback+0x44>)
 8000422:	220a      	movs	r2, #10
 8000424:	701a      	strb	r2, [r3, #0]
//	       	sprintf(a, " %x ", serial_output_buffer[i]);
//	       	HAL_UART_Transmit(&huart4, a, 3, 10);
//	       }
//	    }
	}
}
 8000426:	e009      	b.n	800043c <HAL_GPIO_EXTI_Callback+0x3c>
	else if(GPIO_Pin == GPIO_PIN_1){
 8000428:	88fb      	ldrh	r3, [r7, #6]
 800042a:	2b02      	cmp	r3, #2
 800042c:	d106      	bne.n	800043c <HAL_GPIO_EXTI_Callback+0x3c>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800042e:	2120      	movs	r1, #32
 8000430:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000434:	f001 f904 	bl	8001640 <HAL_GPIO_TogglePin>
		SPI_QCA7000_Handling_Intr();
 8000438:	f004 fd4c 	bl	8004ed4 <SPI_QCA7000_Handling_Intr>
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	200000a1 	.word	0x200000a1

08000448 <Serial_Print>:

void Serial_Print(void) {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  #define TIMEOUT_100_MS 100
  HAL_UART_Transmit(&huart4, (uint8_t*)serial_output_buffer, strlen(serial_output_buffer), TIMEOUT_100_MS);
 800044c:	4805      	ldr	r0, [pc, #20]	@ (8000464 <Serial_Print+0x1c>)
 800044e:	f7ff fec7 	bl	80001e0 <strlen>
 8000452:	4603      	mov	r3, r0
 8000454:	b29a      	uxth	r2, r3
 8000456:	2364      	movs	r3, #100	@ 0x64
 8000458:	4902      	ldr	r1, [pc, #8]	@ (8000464 <Serial_Print+0x1c>)
 800045a:	4803      	ldr	r0, [pc, #12]	@ (8000468 <Serial_Print+0x20>)
 800045c:	f003 fa4a 	bl	80038f4 <HAL_UART_Transmit>
//  uint8_t END_BYTE = 0xFF;
//  HAL_UART_Transmit(&huart4, &END_BYTE, 1, 10);
//  HAL_UART_Transmit(&huart4, &END_BYTE, 1, 10);
//  HAL_UART_Transmit(&huart4, &END_BYTE, 1, 10);
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	200001dc 	.word	0x200001dc
 8000468:	20000108 	.word	0x20000108

0800046c <SPI_Transmit_Receive>:

void SPI_Transmit_Receive(void) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af02      	add	r7, sp, #8
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000478:	480a      	ldr	r0, [pc, #40]	@ (80004a4 <SPI_Transmit_Receive+0x38>)
 800047a:	f001 f8c9 	bl	8001610 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi2, spi_tx_buffer, spi_rx_buffer, spi_data_size, 200);
 800047e:	4b0a      	ldr	r3, [pc, #40]	@ (80004a8 <SPI_Transmit_Receive+0x3c>)
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	22c8      	movs	r2, #200	@ 0xc8
 8000484:	9200      	str	r2, [sp, #0]
 8000486:	4a09      	ldr	r2, [pc, #36]	@ (80004ac <SPI_Transmit_Receive+0x40>)
 8000488:	4909      	ldr	r1, [pc, #36]	@ (80004b0 <SPI_Transmit_Receive+0x44>)
 800048a:	480a      	ldr	r0, [pc, #40]	@ (80004b4 <SPI_Transmit_Receive+0x48>)
 800048c:	f002 fe5d 	bl	800314a <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000490:	2201      	movs	r2, #1
 8000492:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000496:	4803      	ldr	r0, [pc, #12]	@ (80004a4 <SPI_Transmit_Receive+0x38>)
 8000498:	f001 f8ba 	bl	8001610 <HAL_GPIO_WritePin>
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	48000400 	.word	0x48000400
 80004a8:	20001a78 	.word	0x20001a78
 80004ac:	20001244 	.word	0x20001244
 80004b0:	20000a10 	.word	0x20000a10
 80004b4:	200000a4 	.word	0x200000a4

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fbf3 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f85f 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f93b 	bl	8000740 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ca:	f000 f91b 	bl	8000704 <MX_DMA_Init>
  MX_UART4_Init();
 80004ce:	f000 f8e9 	bl	80006a4 <MX_UART4_Init>
  MX_SPI2_Init();
 80004d2:	f000 f8a9 	bl	8000628 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  SPI_QCA7000_Init_Setup();
 80004d6:	f004 fb6b 	bl	8004bb0 <SPI_QCA7000_Init_Setup>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, buffer, UART_SIZE);
 80004da:	2204      	movs	r2, #4
 80004dc:	4925      	ldr	r1, [pc, #148]	@ (8000574 <main+0xbc>)
 80004de:	4826      	ldr	r0, [pc, #152]	@ (8000578 <main+0xc0>)
 80004e0:	f004 f851 	bl	8004586 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 80004e4:	4b25      	ldr	r3, [pc, #148]	@ (800057c <main+0xc4>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	4b24      	ldr	r3, [pc, #144]	@ (800057c <main+0xc4>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f022 0204 	bic.w	r2, r2, #4
 80004f2:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag == 1){ // AA
 80004f4:	4b22      	ldr	r3, [pc, #136]	@ (8000580 <main+0xc8>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d107      	bne.n	800050c <main+0x54>
		  PEF_Compose_Current_Suppression_Req();
 80004fc:	f005 f9e2 	bl	80058c4 <PEF_Compose_Current_Suppression_Req>
		  SPI_QCA7000_Send_Eth_Frame();
 8000500:	f004 fc38 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
		  flag = 0;
 8000504:	4b1e      	ldr	r3, [pc, #120]	@ (8000580 <main+0xc8>)
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
 800050a:	e7f3      	b.n	80004f4 <main+0x3c>
	  }
	  else if (flag == 2){ //AB
 800050c:	4b1c      	ldr	r3, [pc, #112]	@ (8000580 <main+0xc8>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b02      	cmp	r3, #2
 8000512:	d10d      	bne.n	8000530 <main+0x78>
		  uint16_t a = 0x001E;
 8000514:	231e      	movs	r3, #30
 8000516:	80fb      	strh	r3, [r7, #6]
		  PEF_Compose_Charging_Current_Demand_Req(a, 0xAA, 0xAA);
 8000518:	88fb      	ldrh	r3, [r7, #6]
 800051a:	22aa      	movs	r2, #170	@ 0xaa
 800051c:	21aa      	movs	r1, #170	@ 0xaa
 800051e:	4618      	mov	r0, r3
 8000520:	f005 f86c 	bl	80055fc <PEF_Compose_Charging_Current_Demand_Req>
		  SPI_QCA7000_Send_Eth_Frame();
 8000524:	f004 fc26 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
		  flag = 0;
 8000528:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <main+0xc8>)
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
 800052e:	e7e1      	b.n	80004f4 <main+0x3c>
	  }
	  else if (flag == 3){ //AC
 8000530:	4b13      	ldr	r3, [pc, #76]	@ (8000580 <main+0xc8>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b03      	cmp	r3, #3
 8000536:	d107      	bne.n	8000548 <main+0x90>
		  PEF_Compose_Connector_Lock_Req();
 8000538:	f004 ffa0 	bl	800547c <PEF_Compose_Connector_Lock_Req>
		  SPI_QCA7000_Send_Eth_Frame();
 800053c:	f004 fc1a 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
		  flag = 0;
 8000540:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <main+0xc8>)
 8000542:	2200      	movs	r2, #0
 8000544:	701a      	strb	r2, [r3, #0]
 8000546:	e7d5      	b.n	80004f4 <main+0x3c>
	  }
	  else if (flag == 4){ //AD
 8000548:	4b0d      	ldr	r3, [pc, #52]	@ (8000580 <main+0xc8>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b04      	cmp	r3, #4
 800054e:	d107      	bne.n	8000560 <main+0xa8>
		  PEF_Compose_Initialization_Req();
 8000550:	f004 fd30 	bl	8004fb4 <PEF_Compose_Initialization_Req>
		  SPI_QCA7000_Send_Eth_Frame();
 8000554:	f004 fc0e 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
		  flag =0;
 8000558:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <main+0xc8>)
 800055a:	2200      	movs	r2, #0
 800055c:	701a      	strb	r2, [r3, #0]
 800055e:	e7c9      	b.n	80004f4 <main+0x3c>
//		  PEF_Compose_Charging_Current_Demand_Req(a, 0xAA, 0xAA, 0x50);
//		  SPI_QCA7000_Send_Eth_Frame();
//		  flag = 0;
//	  }

	  else if(flag == 10){
 8000560:	4b07      	ldr	r3, [pc, #28]	@ (8000580 <main+0xc8>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b0a      	cmp	r3, #10
 8000566:	d1c5      	bne.n	80004f4 <main+0x3c>
		  PEF_Evaluate_Exchange_Data();
 8000568:	f005 feb8 	bl	80062dc <PEF_Evaluate_Exchange_Data>
		  flag =0;
 800056c:	4b04      	ldr	r3, [pc, #16]	@ (8000580 <main+0xc8>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
	  if(flag == 1){ // AA
 8000572:	e7bf      	b.n	80004f4 <main+0x3c>
 8000574:	2000009c 	.word	0x2000009c
 8000578:	20000108 	.word	0x20000108
 800057c:	20000190 	.word	0x20000190
 8000580:	200000a1 	.word	0x200000a1

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0a6      	sub	sp, #152	@ 0x98
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800058e:	2228      	movs	r2, #40	@ 0x28
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f006 f8cd 	bl	8006732 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2258      	movs	r2, #88	@ 0x58
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f006 f8bf 	bl	8006732 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2310      	movs	r3, #16
 80005be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 f869 	bl	80016a4 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005d8:	f000 f940 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e0:	2300      	movs	r3, #0
 80005e2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 f8a8 	bl	800274c <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000602:	f000 f92b 	bl	800085c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000606:	2308      	movs	r3, #8
 8000608:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4618      	mov	r0, r3
 8000612:	f002 fad1 	bl	8002bb8 <HAL_RCCEx_PeriphCLKConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800061c:	f000 f91e 	bl	800085c <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3798      	adds	r7, #152	@ 0x98
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800062c:	4b1b      	ldr	r3, [pc, #108]	@ (800069c <MX_SPI2_Init+0x74>)
 800062e:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <MX_SPI2_Init+0x78>)
 8000630:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000632:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <MX_SPI2_Init+0x74>)
 8000634:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000638:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800063a:	4b18      	ldr	r3, [pc, #96]	@ (800069c <MX_SPI2_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000640:	4b16      	ldr	r3, [pc, #88]	@ (800069c <MX_SPI2_Init+0x74>)
 8000642:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000646:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000648:	4b14      	ldr	r3, [pc, #80]	@ (800069c <MX_SPI2_Init+0x74>)
 800064a:	2202      	movs	r2, #2
 800064c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <MX_SPI2_Init+0x74>)
 8000650:	2201      	movs	r2, #1
 8000652:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_SPI2_Init+0x74>)
 8000656:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800065a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <MX_SPI2_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_SPI2_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000668:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <MX_SPI2_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <MX_SPI2_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000674:	4b09      	ldr	r3, [pc, #36]	@ (800069c <MX_SPI2_Init+0x74>)
 8000676:	2207      	movs	r2, #7
 8000678:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800067a:	4b08      	ldr	r3, [pc, #32]	@ (800069c <MX_SPI2_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <MX_SPI2_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	@ (800069c <MX_SPI2_Init+0x74>)
 8000688:	f002 fcb4 	bl	8002ff4 <HAL_SPI_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000692:	f000 f8e3 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200000a4 	.word	0x200000a4
 80006a0:	40003800 	.word	0x40003800

080006a4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80006a8:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MX_UART4_Init+0x58>)
 80006aa:	4a15      	ldr	r2, [pc, #84]	@ (8000700 <MX_UART4_Init+0x5c>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80006ae:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <MX_UART4_Init+0x58>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_UART4_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_UART4_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <MX_UART4_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_UART4_Init+0x58>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <MX_UART4_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_UART4_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006da:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <MX_UART4_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e0:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_UART4_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	@ (80006fc <MX_UART4_Init+0x58>)
 80006e8:	f003 f8b6 	bl	8003858 <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80006f2:	f000 f8b3 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000108 	.word	0x20000108
 8000700:	40004c00 	.word	0x40004c00

08000704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_DMA_Init+0x38>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a0b      	ldr	r2, [pc, #44]	@ (800073c <MX_DMA_Init+0x38>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_DMA_Init+0x38>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	203a      	movs	r0, #58	@ 0x3a
 8000728:	f000 fbff 	bl	8000f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 800072c:	203a      	movs	r0, #58	@ 0x3a
 800072e:	f000 fc18 	bl	8000f62 <HAL_NVIC_EnableIRQ>

}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	4b3e      	ldr	r3, [pc, #248]	@ (8000850 <MX_GPIO_Init+0x110>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a3d      	ldr	r2, [pc, #244]	@ (8000850 <MX_GPIO_Init+0x110>)
 800075c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000760:	6153      	str	r3, [r2, #20]
 8000762:	4b3b      	ldr	r3, [pc, #236]	@ (8000850 <MX_GPIO_Init+0x110>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b38      	ldr	r3, [pc, #224]	@ (8000850 <MX_GPIO_Init+0x110>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	4a37      	ldr	r2, [pc, #220]	@ (8000850 <MX_GPIO_Init+0x110>)
 8000774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000778:	6153      	str	r3, [r2, #20]
 800077a:	4b35      	ldr	r3, [pc, #212]	@ (8000850 <MX_GPIO_Init+0x110>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b32      	ldr	r3, [pc, #200]	@ (8000850 <MX_GPIO_Init+0x110>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a31      	ldr	r2, [pc, #196]	@ (8000850 <MX_GPIO_Init+0x110>)
 800078c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000790:	6153      	str	r3, [r2, #20]
 8000792:	4b2f      	ldr	r3, [pc, #188]	@ (8000850 <MX_GPIO_Init+0x110>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2120      	movs	r1, #32
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a6:	f000 ff33 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007b0:	4828      	ldr	r0, [pc, #160]	@ (8000854 <MX_GPIO_Init+0x114>)
 80007b2:	f000 ff2d 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80007b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007bc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4619      	mov	r1, r3
 80007cc:	4822      	ldr	r0, [pc, #136]	@ (8000858 <MX_GPIO_Init+0x118>)
 80007ce:	f000 fd95 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007d2:	2320      	movs	r3, #32
 80007d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	4619      	mov	r1, r3
 80007e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ec:	f000 fd86 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007f0:	2302      	movs	r3, #2
 80007f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	4619      	mov	r1, r3
 8000804:	4813      	ldr	r0, [pc, #76]	@ (8000854 <MX_GPIO_Init+0x114>)
 8000806:	f000 fd79 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800080a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	480c      	ldr	r0, [pc, #48]	@ (8000854 <MX_GPIO_Init+0x114>)
 8000824:	f000 fd6a 	bl	80012fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	2007      	movs	r0, #7
 800082e:	f000 fb7c 	bl	8000f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000832:	2007      	movs	r0, #7
 8000834:	f000 fb95 	bl	8000f62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	2028      	movs	r0, #40	@ 0x28
 800083e:	f000 fb74 	bl	8000f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000842:	2028      	movs	r0, #40	@ 0x28
 8000844:	f000 fb8d 	bl	8000f62 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000
 8000854:	48000400 	.word	0x48000400
 8000858:	48000800 	.word	0x48000800

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <Error_Handler+0x8>

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <HAL_MspInit+0x44>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	4a0e      	ldr	r2, [pc, #56]	@ (80008ac <HAL_MspInit+0x44>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6193      	str	r3, [r2, #24]
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <HAL_MspInit+0x44>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <HAL_MspInit+0x44>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	4a08      	ldr	r2, [pc, #32]	@ (80008ac <HAL_MspInit+0x44>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000890:	61d3      	str	r3, [r2, #28]
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_MspInit+0x44>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	@ 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a17      	ldr	r2, [pc, #92]	@ (800092c <HAL_SPI_MspInit+0x7c>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d128      	bne.n	8000924 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008d2:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <HAL_SPI_MspInit+0x80>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	4a16      	ldr	r2, [pc, #88]	@ (8000930 <HAL_SPI_MspInit+0x80>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008dc:	61d3      	str	r3, [r2, #28]
 80008de:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <HAL_SPI_MspInit+0x80>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <HAL_SPI_MspInit+0x80>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	4a10      	ldr	r2, [pc, #64]	@ (8000930 <HAL_SPI_MspInit+0x80>)
 80008f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008f4:	6153      	str	r3, [r2, #20]
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <HAL_SPI_MspInit+0x80>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000902:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000914:	2305      	movs	r3, #5
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4805      	ldr	r0, [pc, #20]	@ (8000934 <HAL_SPI_MspInit+0x84>)
 8000920:	f000 fcec 	bl	80012fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	@ 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40003800 	.word	0x40003800
 8000930:	40021000 	.word	0x40021000
 8000934:	48000400 	.word	0x48000400

08000938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a2a      	ldr	r2, [pc, #168]	@ (8000a00 <HAL_UART_MspInit+0xc8>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d14e      	bne.n	80009f8 <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800095a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a04 <HAL_UART_MspInit+0xcc>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	4a29      	ldr	r2, [pc, #164]	@ (8000a04 <HAL_UART_MspInit+0xcc>)
 8000960:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000964:	61d3      	str	r3, [r2, #28]
 8000966:	4b27      	ldr	r3, [pc, #156]	@ (8000a04 <HAL_UART_MspInit+0xcc>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	4b24      	ldr	r3, [pc, #144]	@ (8000a04 <HAL_UART_MspInit+0xcc>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	4a23      	ldr	r2, [pc, #140]	@ (8000a04 <HAL_UART_MspInit+0xcc>)
 8000978:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800097c:	6153      	str	r3, [r2, #20]
 800097e:	4b21      	ldr	r3, [pc, #132]	@ (8000a04 <HAL_UART_MspInit+0xcc>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800098a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800098e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800099c:	2305      	movs	r3, #5
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4818      	ldr	r0, [pc, #96]	@ (8000a08 <HAL_UART_MspInit+0xd0>)
 80009a8:	f000 fca8 	bl	80012fc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <HAL_UART_MspInit+0xd4>)
 80009ae:	4a18      	ldr	r2, [pc, #96]	@ (8000a10 <HAL_UART_MspInit+0xd8>)
 80009b0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009b2:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <HAL_UART_MspInit+0xd4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <HAL_UART_MspInit+0xd4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <HAL_UART_MspInit+0xd4>)
 80009c0:	2280      	movs	r2, #128	@ 0x80
 80009c2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <HAL_UART_MspInit+0xd4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <HAL_UART_MspInit+0xd4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <HAL_UART_MspInit+0xd4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <HAL_UART_MspInit+0xd4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80009dc:	480b      	ldr	r0, [pc, #44]	@ (8000a0c <HAL_UART_MspInit+0xd4>)
 80009de:	f000 fada 	bl	8000f96 <HAL_DMA_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80009e8:	f7ff ff38 	bl	800085c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a07      	ldr	r2, [pc, #28]	@ (8000a0c <HAL_UART_MspInit+0xd4>)
 80009f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80009f2:	4a06      	ldr	r2, [pc, #24]	@ (8000a0c <HAL_UART_MspInit+0xd4>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	@ 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40004c00 	.word	0x40004c00
 8000a04:	40021000 	.word	0x40021000
 8000a08:	48000800 	.word	0x48000800
 8000a0c:	20000190 	.word	0x20000190
 8000a10:	40020430 	.word	0x40020430

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <NMI_Handler+0x4>

08000a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6a:	f000 f963 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000a76:	2002      	movs	r0, #2
 8000a78:	f000 fdfc 	bl	8001674 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000a84:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a88:	f000 fdf4 	bl	8001674 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <DMA2_Channel3_IRQHandler+0x10>)
 8000a96:	f000 fb24 	bl	80010e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000190 	.word	0x20000190

08000aa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return 1;
 8000aa8:	2301      	movs	r3, #1
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <_kill>:

int _kill(int pid, int sig)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000abe:	f005 fe87 	bl	80067d0 <__errno>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2216      	movs	r2, #22
 8000ac6:	601a      	str	r2, [r3, #0]
  return -1;
 8000ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <_exit>:

void _exit (int status)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000adc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ffe7 	bl	8000ab4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ae6:	bf00      	nop
 8000ae8:	e7fd      	b.n	8000ae6 <_exit+0x12>

08000aea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	60f8      	str	r0, [r7, #12]
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	e00a      	b.n	8000b12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000afc:	f3af 8000 	nop.w
 8000b00:	4601      	mov	r1, r0
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1c5a      	adds	r2, r3, #1
 8000b06:	60ba      	str	r2, [r7, #8]
 8000b08:	b2ca      	uxtb	r2, r1
 8000b0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	dbf0      	blt.n	8000afc <_read+0x12>
  }

  return len;
 8000b1a:	687b      	ldr	r3, [r7, #4]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	e009      	b.n	8000b4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	1c5a      	adds	r2, r3, #1
 8000b3a:	60ba      	str	r2, [r7, #8]
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	3301      	adds	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	697a      	ldr	r2, [r7, #20]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	dbf1      	blt.n	8000b36 <_write+0x12>
  }
  return len;
 8000b52:	687b      	ldr	r3, [r7, #4]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <_close>:

int _close(int file)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b84:	605a      	str	r2, [r3, #4]
  return 0;
 8000b86:	2300      	movs	r3, #0
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <_isatty>:

int _isatty(int file)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b9c:	2301      	movs	r3, #1
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b085      	sub	sp, #20
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	60f8      	str	r0, [r7, #12]
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	@ (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	@ (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f005 fdec 	bl	80067d0 <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	@ (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20010000 	.word	0x20010000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	200001d4 	.word	0x200001d4
 8000c2c:	20001ef8 	.word	0x20001ef8

08000c30 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	@ (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c8c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c58:	f7ff ffea 	bl	8000c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	@ (8000c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <LoopForever+0xe>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca0 <LoopForever+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c82:	f005 fdab 	bl	80067dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c86:	f7ff fc17 	bl	80004b8 <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000c98:	08007e24 	.word	0x08007e24
  ldr r2, =_sbss
 8000c9c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000ca0:	20001ef4 	.word	0x20001ef4

08000ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_2_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <HAL_Init+0x28>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a07      	ldr	r2, [pc, #28]	@ (8000cd0 <HAL_Init+0x28>)
 8000cb2:	f043 0310 	orr.w	r3, r3, #16
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 f92b 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cbe:	200f      	movs	r0, #15
 8000cc0:	f000 f808 	bl	8000cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc4:	f7ff fdd0 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40022000 	.word	0x40022000

08000cd4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <HAL_InitTick+0x54>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <HAL_InitTick+0x58>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f943 	bl	8000f7e <HAL_SYSTICK_Config>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00e      	b.n	8000d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d80a      	bhi.n	8000d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f000 f90b 	bl	8000f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d14:	4a06      	ldr	r2, [pc, #24]	@ (8000d30 <HAL_InitTick+0x5c>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_IncTick+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_IncTick+0x24>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a04      	ldr	r2, [pc, #16]	@ (8000d58 <HAL_IncTick+0x24>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008
 8000d58:	200001d8 	.word	0x200001d8

08000d5c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d60:	4b03      	ldr	r3, [pc, #12]	@ (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	200001d8 	.word	0x200001d8

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4907      	ldr	r1, [pc, #28]	@ (8000e10 <__NVIC_EnableIRQ+0x38>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	@ (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	@ (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	@ 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	@ 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee0:	d301      	bcc.n	8000ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00f      	b.n	8000f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <SysTick_Config+0x40>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eee:	210f      	movs	r1, #15
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f7ff ff8e 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <SysTick_Config+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <SysTick_Config+0x40>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff29 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3c:	f7ff ff3e 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	6978      	ldr	r0, [r7, #20]
 8000f48:	f7ff ff8e 	bl	8000e68 <NVIC_EncodePriority>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff5d 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff31 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffa2 	bl	8000ed0 <SysTick_Config>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e037      	b.n	800101c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000fc2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000fc6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f940 	bl	8001284 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}  
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d101      	bne.n	8001044 <HAL_DMA_Start_IT+0x20>
 8001040:	2302      	movs	r3, #2
 8001042:	e04a      	b.n	80010da <HAL_DMA_Start_IT+0xb6>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2201      	movs	r2, #1
 8001048:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001052:	2b01      	cmp	r3, #1
 8001054:	d13a      	bne.n	80010cc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2202      	movs	r2, #2
 800105a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2200      	movs	r2, #0
 8001062:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 0201 	bic.w	r2, r2, #1
 8001072:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f000 f8d4 	bl	8001228 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d008      	beq.n	800109a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 020e 	orr.w	r2, r2, #14
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	e00f      	b.n	80010ba <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f042 020a 	orr.w	r2, r2, #10
 80010a8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0204 	bic.w	r2, r2, #4
 80010b8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f042 0201 	orr.w	r2, r2, #1
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	e005      	b.n	80010d8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80010d4:	2302      	movs	r3, #2
 80010d6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b084      	sub	sp, #16
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	2204      	movs	r2, #4
 8001100:	409a      	lsls	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4013      	ands	r3, r2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d024      	beq.n	8001154 <HAL_DMA_IRQHandler+0x72>
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	2b00      	cmp	r3, #0
 8001112:	d01f      	beq.n	8001154 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0320 	and.w	r3, r3, #32
 800111e:	2b00      	cmp	r3, #0
 8001120:	d107      	bne.n	8001132 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0204 	bic.w	r2, r2, #4
 8001130:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800113a:	2104      	movs	r1, #4
 800113c:	fa01 f202 	lsl.w	r2, r1, r2
 8001140:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001146:	2b00      	cmp	r3, #0
 8001148:	d06a      	beq.n	8001220 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001152:	e065      	b.n	8001220 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	2202      	movs	r2, #2
 800115a:	409a      	lsls	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4013      	ands	r3, r2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d02c      	beq.n	80011be <HAL_DMA_IRQHandler+0xdc>
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d027      	beq.n	80011be <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10b      	bne.n	8001194 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 020a 	bic.w	r2, r2, #10
 800118a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800119c:	2102      	movs	r1, #2
 800119e:	fa01 f202 	lsl.w	r2, r1, r2
 80011a2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d035      	beq.n	8001220 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80011bc:	e030      	b.n	8001220 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	2208      	movs	r2, #8
 80011c4:	409a      	lsls	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d028      	beq.n	8001220 <HAL_DMA_IRQHandler+0x13e>
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d023      	beq.n	8001220 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 020e 	bic.w	r2, r2, #14
 80011e6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011f0:	2101      	movs	r1, #1
 80011f2:	fa01 f202 	lsl.w	r2, r1, r2
 80011f6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	2b00      	cmp	r3, #0
 8001214:	d004      	beq.n	8001220 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	4798      	blx	r3
    }
  }
}  
 800121e:	e7ff      	b.n	8001220 <HAL_DMA_IRQHandler+0x13e>
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800123e:	2101      	movs	r1, #1
 8001240:	fa01 f202 	lsl.w	r2, r1, r2
 8001244:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b10      	cmp	r3, #16
 8001254:	d108      	bne.n	8001268 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001266:	e007      	b.n	8001278 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	60da      	str	r2, [r3, #12]
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <DMA_CalcBaseAndBitshift+0x60>)
 8001294:	429a      	cmp	r2, r3
 8001296:	d80f      	bhi.n	80012b8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <DMA_CalcBaseAndBitshift+0x64>)
 80012a0:	4413      	add	r3, r2
 80012a2:	4a12      	ldr	r2, [pc, #72]	@ (80012ec <DMA_CalcBaseAndBitshift+0x68>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	009a      	lsls	r2, r3, #2
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a0f      	ldr	r2, [pc, #60]	@ (80012f0 <DMA_CalcBaseAndBitshift+0x6c>)
 80012b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80012b6:	e00e      	b.n	80012d6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <DMA_CalcBaseAndBitshift+0x70>)
 80012c0:	4413      	add	r3, r2
 80012c2:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <DMA_CalcBaseAndBitshift+0x68>)
 80012c4:	fba2 2303 	umull	r2, r3, r2, r3
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	009a      	lsls	r2, r3, #2
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a09      	ldr	r2, [pc, #36]	@ (80012f8 <DMA_CalcBaseAndBitshift+0x74>)
 80012d4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40020407 	.word	0x40020407
 80012e8:	bffdfff8 	.word	0xbffdfff8
 80012ec:	cccccccd 	.word	0xcccccccd
 80012f0:	40020000 	.word	0x40020000
 80012f4:	bffdfbf8 	.word	0xbffdfbf8
 80012f8:	40020400 	.word	0x40020400

080012fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130a:	e160      	b.n	80015ce <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2101      	movs	r1, #1
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	4013      	ands	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8152 	beq.w	80015c8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b01      	cmp	r3, #1
 800132e:	d005      	beq.n	800133c <HAL_GPIO_Init+0x40>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d130      	bne.n	800139e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001372:	2201      	movs	r2, #1
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	f003 0201 	and.w	r2, r3, #1
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d017      	beq.n	80013da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	2203      	movs	r2, #3
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d123      	bne.n	800142e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	08da      	lsrs	r2, r3, #3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3208      	adds	r2, #8
 80013ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	220f      	movs	r2, #15
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	691a      	ldr	r2, [r3, #16]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	08da      	lsrs	r2, r3, #3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3208      	adds	r2, #8
 8001428:	6939      	ldr	r1, [r7, #16]
 800142a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	2203      	movs	r2, #3
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0203 	and.w	r2, r3, #3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 80ac 	beq.w	80015c8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001470:	4b5e      	ldr	r3, [pc, #376]	@ (80015ec <HAL_GPIO_Init+0x2f0>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a5d      	ldr	r2, [pc, #372]	@ (80015ec <HAL_GPIO_Init+0x2f0>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b5b      	ldr	r3, [pc, #364]	@ (80015ec <HAL_GPIO_Init+0x2f0>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001488:	4a59      	ldr	r2, [pc, #356]	@ (80015f0 <HAL_GPIO_Init+0x2f4>)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	089b      	lsrs	r3, r3, #2
 800148e:	3302      	adds	r3, #2
 8001490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	220f      	movs	r2, #15
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014b2:	d025      	beq.n	8001500 <HAL_GPIO_Init+0x204>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a4f      	ldr	r2, [pc, #316]	@ (80015f4 <HAL_GPIO_Init+0x2f8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d01f      	beq.n	80014fc <HAL_GPIO_Init+0x200>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a4e      	ldr	r2, [pc, #312]	@ (80015f8 <HAL_GPIO_Init+0x2fc>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d019      	beq.n	80014f8 <HAL_GPIO_Init+0x1fc>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a4d      	ldr	r2, [pc, #308]	@ (80015fc <HAL_GPIO_Init+0x300>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d013      	beq.n	80014f4 <HAL_GPIO_Init+0x1f8>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a4c      	ldr	r2, [pc, #304]	@ (8001600 <HAL_GPIO_Init+0x304>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d00d      	beq.n	80014f0 <HAL_GPIO_Init+0x1f4>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a4b      	ldr	r2, [pc, #300]	@ (8001604 <HAL_GPIO_Init+0x308>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d007      	beq.n	80014ec <HAL_GPIO_Init+0x1f0>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a4a      	ldr	r2, [pc, #296]	@ (8001608 <HAL_GPIO_Init+0x30c>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d101      	bne.n	80014e8 <HAL_GPIO_Init+0x1ec>
 80014e4:	2306      	movs	r3, #6
 80014e6:	e00c      	b.n	8001502 <HAL_GPIO_Init+0x206>
 80014e8:	2307      	movs	r3, #7
 80014ea:	e00a      	b.n	8001502 <HAL_GPIO_Init+0x206>
 80014ec:	2305      	movs	r3, #5
 80014ee:	e008      	b.n	8001502 <HAL_GPIO_Init+0x206>
 80014f0:	2304      	movs	r3, #4
 80014f2:	e006      	b.n	8001502 <HAL_GPIO_Init+0x206>
 80014f4:	2303      	movs	r3, #3
 80014f6:	e004      	b.n	8001502 <HAL_GPIO_Init+0x206>
 80014f8:	2302      	movs	r3, #2
 80014fa:	e002      	b.n	8001502 <HAL_GPIO_Init+0x206>
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <HAL_GPIO_Init+0x206>
 8001500:	2300      	movs	r3, #0
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	f002 0203 	and.w	r2, r2, #3
 8001508:	0092      	lsls	r2, r2, #2
 800150a:	4093      	lsls	r3, r2
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001512:	4937      	ldr	r1, [pc, #220]	@ (80015f0 <HAL_GPIO_Init+0x2f4>)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	3302      	adds	r3, #2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001520:	4b3a      	ldr	r3, [pc, #232]	@ (800160c <HAL_GPIO_Init+0x310>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	43db      	mvns	r3, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001544:	4a31      	ldr	r2, [pc, #196]	@ (800160c <HAL_GPIO_Init+0x310>)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800154a:	4b30      	ldr	r3, [pc, #192]	@ (800160c <HAL_GPIO_Init+0x310>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800156e:	4a27      	ldr	r2, [pc, #156]	@ (800160c <HAL_GPIO_Init+0x310>)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001574:	4b25      	ldr	r3, [pc, #148]	@ (800160c <HAL_GPIO_Init+0x310>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001598:	4a1c      	ldr	r2, [pc, #112]	@ (800160c <HAL_GPIO_Init+0x310>)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800159e:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <HAL_GPIO_Init+0x310>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015c2:	4a12      	ldr	r2, [pc, #72]	@ (800160c <HAL_GPIO_Init+0x310>)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	3301      	adds	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	fa22 f303 	lsr.w	r3, r2, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f47f ae97 	bne.w	800130c <HAL_GPIO_Init+0x10>
  }
}
 80015de:	bf00      	nop
 80015e0:	bf00      	nop
 80015e2:	371c      	adds	r7, #28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010000 	.word	0x40010000
 80015f4:	48000400 	.word	0x48000400
 80015f8:	48000800 	.word	0x48000800
 80015fc:	48000c00 	.word	0x48000c00
 8001600:	48001000 	.word	0x48001000
 8001604:	48001400 	.word	0x48001400
 8001608:	48001800 	.word	0x48001800
 800160c:	40010400 	.word	0x40010400

08001610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
 800161c:	4613      	mov	r3, r2
 800161e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001620:	787b      	ldrb	r3, [r7, #1]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800162c:	e002      	b.n	8001634 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4013      	ands	r3, r2
 8001658:	041a      	lsls	r2, r3, #16
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	43d9      	mvns	r1, r3
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	400b      	ands	r3, r1
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	4013      	ands	r3, r2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d006      	beq.n	8001698 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800168a:	4a05      	ldr	r2, [pc, #20]	@ (80016a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe feb4 	bl	8000400 <HAL_GPIO_EXTI_Callback>
  }
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40010400 	.word	0x40010400

080016a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016b4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	f001 b83a 	b.w	800273e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 816f 	beq.w	80019be <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016e0:	4bb5      	ldr	r3, [pc, #724]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d00c      	beq.n	8001706 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016ec:	4bb2      	ldr	r3, [pc, #712]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d15c      	bne.n	80017b2 <HAL_RCC_OscConfig+0x10e>
 80016f8:	4baf      	ldr	r3, [pc, #700]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001704:	d155      	bne.n	80017b2 <HAL_RCC_OscConfig+0x10e>
 8001706:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800170a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001712:	fa93 f3a3 	rbit	r3, r3
 8001716:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800171a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171e:	fab3 f383 	clz	r3, r3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	095b      	lsrs	r3, r3, #5
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b01      	cmp	r3, #1
 8001730:	d102      	bne.n	8001738 <HAL_RCC_OscConfig+0x94>
 8001732:	4ba1      	ldr	r3, [pc, #644]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	e015      	b.n	8001764 <HAL_RCC_OscConfig+0xc0>
 8001738:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800173c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001744:	fa93 f3a3 	rbit	r3, r3
 8001748:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800174c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001750:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001754:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001758:	fa93 f3a3 	rbit	r3, r3
 800175c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001760:	4b95      	ldr	r3, [pc, #596]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 8001762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001764:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001768:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800176c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001770:	fa92 f2a2 	rbit	r2, r2
 8001774:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001778:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800177c:	fab2 f282 	clz	r2, r2
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	f042 0220 	orr.w	r2, r2, #32
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	f002 021f 	and.w	r2, r2, #31
 800178c:	2101      	movs	r1, #1
 800178e:	fa01 f202 	lsl.w	r2, r1, r2
 8001792:	4013      	ands	r3, r2
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 8111 	beq.w	80019bc <HAL_RCC_OscConfig+0x318>
 800179a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800179e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f040 8108 	bne.w	80019bc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	f000 bfc6 	b.w	800273e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017c2:	d106      	bne.n	80017d2 <HAL_RCC_OscConfig+0x12e>
 80017c4:	4b7c      	ldr	r3, [pc, #496]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a7b      	ldr	r2, [pc, #492]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 80017ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	e036      	b.n	8001840 <HAL_RCC_OscConfig+0x19c>
 80017d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x158>
 80017e2:	4b75      	ldr	r3, [pc, #468]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a74      	ldr	r2, [pc, #464]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 80017e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b72      	ldr	r3, [pc, #456]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a71      	ldr	r2, [pc, #452]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 80017f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e021      	b.n	8001840 <HAL_RCC_OscConfig+0x19c>
 80017fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001800:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x184>
 800180e:	4b6a      	ldr	r3, [pc, #424]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a69      	ldr	r2, [pc, #420]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 8001814:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b67      	ldr	r3, [pc, #412]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a66      	ldr	r2, [pc, #408]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e00b      	b.n	8001840 <HAL_RCC_OscConfig+0x19c>
 8001828:	4b63      	ldr	r3, [pc, #396]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a62      	ldr	r2, [pc, #392]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 800182e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b60      	ldr	r3, [pc, #384]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a5f      	ldr	r2, [pc, #380]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 800183a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800183e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001840:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001844:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d059      	beq.n	8001904 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fa84 	bl	8000d5c <HAL_GetTick>
 8001854:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800185a:	f7ff fa7f 	bl	8000d5c <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	@ 0x64
 8001868:	d902      	bls.n	8001870 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	f000 bf67 	b.w	800273e <HAL_RCC_OscConfig+0x109a>
 8001870:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001874:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800187c:	fa93 f3a3 	rbit	r3, r3
 8001880:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001884:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001888:	fab3 f383 	clz	r3, r3
 800188c:	b2db      	uxtb	r3, r3
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b01      	cmp	r3, #1
 800189a:	d102      	bne.n	80018a2 <HAL_RCC_OscConfig+0x1fe>
 800189c:	4b46      	ldr	r3, [pc, #280]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	e015      	b.n	80018ce <HAL_RCC_OscConfig+0x22a>
 80018a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018a6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80018ae:	fa93 f3a3 	rbit	r3, r3
 80018b2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80018b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018ba:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80018be:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80018c2:	fa93 f3a3 	rbit	r3, r3
 80018c6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80018ca:	4b3b      	ldr	r3, [pc, #236]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 80018cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018d2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80018d6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80018da:	fa92 f2a2 	rbit	r2, r2
 80018de:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80018e2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80018e6:	fab2 f282 	clz	r2, r2
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	f042 0220 	orr.w	r2, r2, #32
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	f002 021f 	and.w	r2, r2, #31
 80018f6:	2101      	movs	r1, #1
 80018f8:	fa01 f202 	lsl.w	r2, r1, r2
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0ab      	beq.n	800185a <HAL_RCC_OscConfig+0x1b6>
 8001902:	e05c      	b.n	80019be <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fa2a 	bl	8000d5c <HAL_GetTick>
 8001908:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800190e:	f7ff fa25 	bl	8000d5c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	@ 0x64
 800191c:	d902      	bls.n	8001924 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	f000 bf0d 	b.w	800273e <HAL_RCC_OscConfig+0x109a>
 8001924:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001928:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001930:	fa93 f3a3 	rbit	r3, r3
 8001934:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001938:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b01      	cmp	r3, #1
 800194e:	d102      	bne.n	8001956 <HAL_RCC_OscConfig+0x2b2>
 8001950:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	e015      	b.n	8001982 <HAL_RCC_OscConfig+0x2de>
 8001956:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800195a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800196a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800196e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001972:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800197e:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <HAL_RCC_OscConfig+0x314>)
 8001980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001982:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001986:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800198a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800198e:	fa92 f2a2 	rbit	r2, r2
 8001992:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001996:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800199a:	fab2 f282 	clz	r2, r2
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	f042 0220 	orr.w	r2, r2, #32
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	f002 021f 	and.w	r2, r2, #31
 80019aa:	2101      	movs	r1, #1
 80019ac:	fa01 f202 	lsl.w	r2, r1, r2
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1ab      	bne.n	800190e <HAL_RCC_OscConfig+0x26a>
 80019b6:	e002      	b.n	80019be <HAL_RCC_OscConfig+0x31a>
 80019b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 817f 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019d4:	4ba7      	ldr	r3, [pc, #668]	@ (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 030c 	and.w	r3, r3, #12
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00c      	beq.n	80019fa <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019e0:	4ba4      	ldr	r3, [pc, #656]	@ (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d173      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x430>
 80019ec:	4ba1      	ldr	r3, [pc, #644]	@ (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80019f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019f8:	d16c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x430>
 80019fa:	2302      	movs	r3, #2
 80019fc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001a0c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d102      	bne.n	8001a2a <HAL_RCC_OscConfig+0x386>
 8001a24:	4b93      	ldr	r3, [pc, #588]	@ (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	e013      	b.n	8001a52 <HAL_RCC_OscConfig+0x3ae>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001a34:	fa93 f3a3 	rbit	r3, r3
 8001a38:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001a42:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001a46:	fa93 f3a3 	rbit	r3, r3
 8001a4a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001a4e:	4b89      	ldr	r3, [pc, #548]	@ (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 8001a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a52:	2202      	movs	r2, #2
 8001a54:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001a58:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001a5c:	fa92 f2a2 	rbit	r2, r2
 8001a60:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001a64:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001a68:	fab2 f282 	clz	r2, r2
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f042 0220 	orr.w	r2, r2, #32
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	f002 021f 	and.w	r2, r2, #31
 8001a78:	2101      	movs	r1, #1
 8001a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00a      	beq.n	8001a9a <HAL_RCC_OscConfig+0x3f6>
 8001a84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d002      	beq.n	8001a9a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	f000 be52 	b.w	800273e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9a:	4b76      	ldr	r3, [pc, #472]	@ (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aa2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	21f8      	movs	r1, #248	@ 0xf8
 8001ab0:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001ab8:	fa91 f1a1 	rbit	r1, r1
 8001abc:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001ac0:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001ac4:	fab1 f181 	clz	r1, r1
 8001ac8:	b2c9      	uxtb	r1, r1
 8001aca:	408b      	lsls	r3, r1
 8001acc:	4969      	ldr	r1, [pc, #420]	@ (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad2:	e0fe      	b.n	8001cd2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 8088 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x552>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001af8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b06:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	2301      	movs	r3, #1
 8001b10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff f923 	bl	8000d5c <HAL_GetTick>
 8001b16:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b1c:	f7ff f91e 	bl	8000d5c <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d902      	bls.n	8001b32 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	f000 be06 	b.w	800273e <HAL_RCC_OscConfig+0x109a>
 8001b32:	2302      	movs	r3, #2
 8001b34:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001b44:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d102      	bne.n	8001b62 <HAL_RCC_OscConfig+0x4be>
 8001b5c:	4b45      	ldr	r3, [pc, #276]	@ (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	e013      	b.n	8001b8a <HAL_RCC_OscConfig+0x4e6>
 8001b62:	2302      	movs	r3, #2
 8001b64:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001b6c:	fa93 f3a3 	rbit	r3, r3
 8001b70:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001b74:	2302      	movs	r3, #2
 8001b76:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001b7a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001b86:	4b3b      	ldr	r3, [pc, #236]	@ (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 8001b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001b90:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001b94:	fa92 f2a2 	rbit	r2, r2
 8001b98:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001b9c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001ba0:	fab2 f282 	clz	r2, r2
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	f042 0220 	orr.w	r2, r2, #32
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	f002 021f 	and.w	r2, r2, #31
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0af      	beq.n	8001b1c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	21f8      	movs	r1, #248	@ 0xf8
 8001bd2:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001bda:	fa91 f1a1 	rbit	r1, r1
 8001bde:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001be2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001be6:	fab1 f181 	clz	r1, r1
 8001bea:	b2c9      	uxtb	r1, r1
 8001bec:	408b      	lsls	r3, r1
 8001bee:	4921      	ldr	r1, [pc, #132]	@ (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
 8001bf4:	e06d      	b.n	8001cd2 <HAL_RCC_OscConfig+0x62e>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001c08:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c16:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2300      	movs	r3, #0
 8001c20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff f89b 	bl	8000d5c <HAL_GetTick>
 8001c26:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2c:	f7ff f896 	bl	8000d5c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d902      	bls.n	8001c42 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	f000 bd7e 	b.w	800273e <HAL_RCC_OscConfig+0x109a>
 8001c42:	2302      	movs	r3, #2
 8001c44:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001c4c:	fa93 f3a3 	rbit	r3, r3
 8001c50:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001c54:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d105      	bne.n	8001c78 <HAL_RCC_OscConfig+0x5d4>
 8001c6c:	4b01      	ldr	r3, [pc, #4]	@ (8001c74 <HAL_RCC_OscConfig+0x5d0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	e016      	b.n	8001ca0 <HAL_RCC_OscConfig+0x5fc>
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	2302      	movs	r3, #2
 8001c7a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001c90:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001c9c:	4bbf      	ldr	r3, [pc, #764]	@ (8001f9c <HAL_RCC_OscConfig+0x8f8>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001ca6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001caa:	fa92 f2a2 	rbit	r2, r2
 8001cae:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001cb2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001cb6:	fab2 f282 	clz	r2, r2
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f042 0220 	orr.w	r2, r2, #32
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	f002 021f 	and.w	r2, r2, #31
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1ac      	bne.n	8001c2c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8113 	beq.w	8001f0e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d07c      	beq.n	8001df2 <HAL_RCC_OscConfig+0x74e>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001d0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	461a      	mov	r2, r3
 8001d16:	4ba2      	ldr	r3, [pc, #648]	@ (8001fa0 <HAL_RCC_OscConfig+0x8fc>)
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	2301      	movs	r3, #1
 8001d20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d22:	f7ff f81b 	bl	8000d5c <HAL_GetTick>
 8001d26:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	e00a      	b.n	8001d42 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2c:	f7ff f816 	bl	8000d5c <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d902      	bls.n	8001d42 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	f000 bcfe 	b.w	800273e <HAL_RCC_OscConfig+0x109a>
 8001d42:	2302      	movs	r3, #2
 8001d44:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001d4c:	fa93 f2a3 	rbit	r2, r3
 8001d50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d54:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d62:	2202      	movs	r2, #2
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fa93 f2a3 	rbit	r2, r3
 8001d74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d86:	2202      	movs	r2, #2
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	fa93 f2a3 	rbit	r2, r3
 8001d98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d9c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001da0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da2:	4b7e      	ldr	r3, [pc, #504]	@ (8001f9c <HAL_RCC_OscConfig+0x8f8>)
 8001da4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001da6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001daa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001dae:	2102      	movs	r1, #2
 8001db0:	6019      	str	r1, [r3, #0]
 8001db2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	fa93 f1a3 	rbit	r1, r3
 8001dc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001dc8:	6019      	str	r1, [r3, #0]
  return result;
 8001dca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dce:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	fab3 f383 	clz	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d09d      	beq.n	8001d2c <HAL_RCC_OscConfig+0x688>
 8001df0:	e08d      	b.n	8001f0e <HAL_RCC_OscConfig+0x86a>
 8001df2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e02:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	fa93 f2a3 	rbit	r2, r3
 8001e0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e10:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e14:	601a      	str	r2, [r3, #0]
  return result;
 8001e16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e1e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b5d      	ldr	r3, [pc, #372]	@ (8001fa0 <HAL_RCC_OscConfig+0x8fc>)
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2300      	movs	r3, #0
 8001e32:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e34:	f7fe ff92 	bl	8000d5c <HAL_GetTick>
 8001e38:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3e:	f7fe ff8d 	bl	8000d5c <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d902      	bls.n	8001e54 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	f000 bc75 	b.w	800273e <HAL_RCC_OscConfig+0x109a>
 8001e54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e58:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e64:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f2a3 	rbit	r2, r3
 8001e6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e72:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e80:	2202      	movs	r2, #2
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	fa93 f2a3 	rbit	r2, r3
 8001e92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e96:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	fa93 f2a3 	rbit	r2, r3
 8001eb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001ebe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec0:	4b36      	ldr	r3, [pc, #216]	@ (8001f9c <HAL_RCC_OscConfig+0x8f8>)
 8001ec2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ec4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ecc:	2102      	movs	r1, #2
 8001ece:	6019      	str	r1, [r3, #0]
 8001ed0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	fa93 f1a3 	rbit	r1, r3
 8001ede:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ee6:	6019      	str	r1, [r3, #0]
  return result;
 8001ee8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	2101      	movs	r1, #1
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d197      	bne.n	8001e3e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 81a5 	beq.w	800226e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <HAL_RCC_OscConfig+0x8f8>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d116      	bne.n	8001f64 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	4b19      	ldr	r3, [pc, #100]	@ (8001f9c <HAL_RCC_OscConfig+0x8f8>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a18      	ldr	r2, [pc, #96]	@ (8001f9c <HAL_RCC_OscConfig+0x8f8>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f40:	61d3      	str	r3, [r2, #28]
 8001f42:	4b16      	ldr	r3, [pc, #88]	@ (8001f9c <HAL_RCC_OscConfig+0x8f8>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001f4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f5c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa4 <HAL_RCC_OscConfig+0x900>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d121      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f70:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <HAL_RCC_OscConfig+0x900>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa4 <HAL_RCC_OscConfig+0x900>)
 8001f76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f7a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7c:	f7fe feee 	bl	8000d5c <HAL_GetTick>
 8001f80:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	e010      	b.n	8001fa8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f86:	f7fe fee9 	bl	8000d5c <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	@ 0x64
 8001f94:	d908      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e3d1      	b.n	800273e <HAL_RCC_OscConfig+0x109a>
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	10908120 	.word	0x10908120
 8001fa4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	4b8d      	ldr	r3, [pc, #564]	@ (80021e0 <HAL_RCC_OscConfig+0xb3c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0e8      	beq.n	8001f86 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x92e>
 8001fc4:	4b87      	ldr	r3, [pc, #540]	@ (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4a86      	ldr	r2, [pc, #536]	@ (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6213      	str	r3, [r2, #32]
 8001fd0:	e035      	b.n	800203e <HAL_RCC_OscConfig+0x99a>
 8001fd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x958>
 8001fe2:	4b80      	ldr	r3, [pc, #512]	@ (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4a7f      	ldr	r2, [pc, #508]	@ (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	6213      	str	r3, [r2, #32]
 8001fee:	4b7d      	ldr	r3, [pc, #500]	@ (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a7c      	ldr	r2, [pc, #496]	@ (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8001ff4:	f023 0304 	bic.w	r3, r3, #4
 8001ff8:	6213      	str	r3, [r2, #32]
 8001ffa:	e020      	b.n	800203e <HAL_RCC_OscConfig+0x99a>
 8001ffc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002000:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b05      	cmp	r3, #5
 800200a:	d10c      	bne.n	8002026 <HAL_RCC_OscConfig+0x982>
 800200c:	4b75      	ldr	r3, [pc, #468]	@ (80021e4 <HAL_RCC_OscConfig+0xb40>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4a74      	ldr	r2, [pc, #464]	@ (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	6213      	str	r3, [r2, #32]
 8002018:	4b72      	ldr	r3, [pc, #456]	@ (80021e4 <HAL_RCC_OscConfig+0xb40>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4a71      	ldr	r2, [pc, #452]	@ (80021e4 <HAL_RCC_OscConfig+0xb40>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6213      	str	r3, [r2, #32]
 8002024:	e00b      	b.n	800203e <HAL_RCC_OscConfig+0x99a>
 8002026:	4b6f      	ldr	r3, [pc, #444]	@ (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4a6e      	ldr	r2, [pc, #440]	@ (80021e4 <HAL_RCC_OscConfig+0xb40>)
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	6213      	str	r3, [r2, #32]
 8002032:	4b6c      	ldr	r3, [pc, #432]	@ (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4a6b      	ldr	r2, [pc, #428]	@ (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8002038:	f023 0304 	bic.w	r3, r3, #4
 800203c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800203e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002042:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8081 	beq.w	8002152 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7fe fe84 	bl	8000d5c <HAL_GetTick>
 8002054:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002058:	e00b      	b.n	8002072 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe fe7f 	bl	8000d5c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e365      	b.n	800273e <HAL_RCC_OscConfig+0x109a>
 8002072:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002076:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800207a:	2202      	movs	r2, #2
 800207c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002082:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	fa93 f2a3 	rbit	r2, r3
 800208c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002090:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800209a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800209e:	2202      	movs	r2, #2
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020a6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	fa93 f2a3 	rbit	r2, r3
 80020b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80020b8:	601a      	str	r2, [r3, #0]
  return result;
 80020ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020be:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80020c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f043 0302 	orr.w	r3, r3, #2
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d102      	bne.n	80020de <HAL_RCC_OscConfig+0xa3a>
 80020d8:	4b42      	ldr	r3, [pc, #264]	@ (80021e4 <HAL_RCC_OscConfig+0xb40>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	e013      	b.n	8002106 <HAL_RCC_OscConfig+0xa62>
 80020de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80020e6:	2202      	movs	r2, #2
 80020e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ee:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	fa93 f2a3 	rbit	r2, r3
 80020f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020fc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	4b38      	ldr	r3, [pc, #224]	@ (80021e4 <HAL_RCC_OscConfig+0xb40>)
 8002104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002106:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800210a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800210e:	2102      	movs	r1, #2
 8002110:	6011      	str	r1, [r2, #0]
 8002112:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002116:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	fa92 f1a2 	rbit	r1, r2
 8002120:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002124:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002128:	6011      	str	r1, [r2, #0]
  return result;
 800212a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800212e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	fab2 f282 	clz	r2, r2
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	f002 021f 	and.w	r2, r2, #31
 8002144:	2101      	movs	r1, #1
 8002146:	fa01 f202 	lsl.w	r2, r1, r2
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d084      	beq.n	800205a <HAL_RCC_OscConfig+0x9b6>
 8002150:	e083      	b.n	800225a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002152:	f7fe fe03 	bl	8000d5c <HAL_GetTick>
 8002156:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f7fe fdfe 	bl	8000d5c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	@ 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e2e4      	b.n	800273e <HAL_RCC_OscConfig+0x109a>
 8002174:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002178:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800217c:	2202      	movs	r2, #2
 800217e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002184:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	fa93 f2a3 	rbit	r2, r3
 800218e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002192:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800219c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80021a0:	2202      	movs	r2, #2
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021a8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	fa93 f2a3 	rbit	r2, r3
 80021b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80021ba:	601a      	str	r2, [r3, #0]
  return result;
 80021bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80021c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	095b      	lsrs	r3, r3, #5
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d106      	bne.n	80021e8 <HAL_RCC_OscConfig+0xb44>
 80021da:	4b02      	ldr	r3, [pc, #8]	@ (80021e4 <HAL_RCC_OscConfig+0xb40>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	e017      	b.n	8002210 <HAL_RCC_OscConfig+0xb6c>
 80021e0:	40007000 	.word	0x40007000
 80021e4:	40021000 	.word	0x40021000
 80021e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ec:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80021f0:	2202      	movs	r2, #2
 80021f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	fa93 f2a3 	rbit	r2, r3
 8002202:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002206:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	4bb3      	ldr	r3, [pc, #716]	@ (80024dc <HAL_RCC_OscConfig+0xe38>)
 800220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002210:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002214:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002218:	2102      	movs	r1, #2
 800221a:	6011      	str	r1, [r2, #0]
 800221c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002220:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	fa92 f1a2 	rbit	r1, r2
 800222a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800222e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002232:	6011      	str	r1, [r2, #0]
  return result;
 8002234:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002238:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	fab2 f282 	clz	r2, r2
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	f002 021f 	and.w	r2, r2, #31
 800224e:	2101      	movs	r1, #1
 8002250:	fa01 f202 	lsl.w	r2, r1, r2
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d180      	bne.n	800215c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800225a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800225e:	2b01      	cmp	r3, #1
 8002260:	d105      	bne.n	800226e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002262:	4b9e      	ldr	r3, [pc, #632]	@ (80024dc <HAL_RCC_OscConfig+0xe38>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	4a9d      	ldr	r2, [pc, #628]	@ (80024dc <HAL_RCC_OscConfig+0xe38>)
 8002268:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800226c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800226e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002272:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 825e 	beq.w	800273c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002280:	4b96      	ldr	r3, [pc, #600]	@ (80024dc <HAL_RCC_OscConfig+0xe38>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b08      	cmp	r3, #8
 800228a:	f000 821f 	beq.w	80026cc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800228e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002292:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b02      	cmp	r3, #2
 800229c:	f040 8170 	bne.w	8002580 <HAL_RCC_OscConfig+0xedc>
 80022a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022a4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80022a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	fa93 f2a3 	rbit	r2, r3
 80022bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80022c4:	601a      	str	r2, [r3, #0]
  return result;
 80022c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ca:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80022ce:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022da:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	461a      	mov	r2, r3
 80022e2:	2300      	movs	r3, #0
 80022e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7fe fd39 	bl	8000d5c <HAL_GetTick>
 80022ea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ee:	e009      	b.n	8002304 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe fd34 	bl	8000d5c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e21c      	b.n	800273e <HAL_RCC_OscConfig+0x109a>
 8002304:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002308:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800230c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002316:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fa93 f2a3 	rbit	r2, r3
 8002320:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002324:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002328:	601a      	str	r2, [r3, #0]
  return result;
 800232a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800232e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002332:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d102      	bne.n	800234e <HAL_RCC_OscConfig+0xcaa>
 8002348:	4b64      	ldr	r3, [pc, #400]	@ (80024dc <HAL_RCC_OscConfig+0xe38>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	e027      	b.n	800239e <HAL_RCC_OscConfig+0xcfa>
 800234e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002352:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002356:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800235a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002360:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fa93 f2a3 	rbit	r2, r3
 800236a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800236e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002378:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800237c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002386:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	fa93 f2a3 	rbit	r2, r3
 8002390:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002394:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	4b50      	ldr	r3, [pc, #320]	@ (80024dc <HAL_RCC_OscConfig+0xe38>)
 800239c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023a2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80023a6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80023aa:	6011      	str	r1, [r2, #0]
 80023ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023b0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	fa92 f1a2 	rbit	r1, r2
 80023ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023be:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80023c2:	6011      	str	r1, [r2, #0]
  return result;
 80023c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023c8:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	fab2 f282 	clz	r2, r2
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	f042 0220 	orr.w	r2, r2, #32
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f002 021f 	and.w	r2, r2, #31
 80023de:	2101      	movs	r1, #1
 80023e0:	fa01 f202 	lsl.w	r2, r1, r2
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d182      	bne.n	80022f0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ea:	4b3c      	ldr	r3, [pc, #240]	@ (80024dc <HAL_RCC_OscConfig+0xe38>)
 80023ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ee:	f023 020f 	bic.w	r2, r3, #15
 80023f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	4937      	ldr	r1, [pc, #220]	@ (80024dc <HAL_RCC_OscConfig+0xe38>)
 8002400:	4313      	orrs	r3, r2
 8002402:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002404:	4b35      	ldr	r3, [pc, #212]	@ (80024dc <HAL_RCC_OscConfig+0xe38>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800240c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002410:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6a19      	ldr	r1, [r3, #32]
 8002418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800241c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	430b      	orrs	r3, r1
 8002426:	492d      	ldr	r1, [pc, #180]	@ (80024dc <HAL_RCC_OscConfig+0xe38>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
 800242c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002430:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002434:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800243e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	fa93 f2a3 	rbit	r2, r3
 8002448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800244c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002450:	601a      	str	r2, [r3, #0]
  return result;
 8002452:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002456:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800245a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002466:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	461a      	mov	r2, r3
 800246e:	2301      	movs	r3, #1
 8002470:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7fe fc73 	bl	8000d5c <HAL_GetTick>
 8002476:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800247a:	e009      	b.n	8002490 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe fc6e 	bl	8000d5c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e156      	b.n	800273e <HAL_RCC_OscConfig+0x109a>
 8002490:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002494:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002498:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800249c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	fa93 f2a3 	rbit	r2, r3
 80024ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80024b4:	601a      	str	r2, [r3, #0]
  return result;
 80024b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ba:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80024be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d105      	bne.n	80024e0 <HAL_RCC_OscConfig+0xe3c>
 80024d4:	4b01      	ldr	r3, [pc, #4]	@ (80024dc <HAL_RCC_OscConfig+0xe38>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	e02a      	b.n	8002530 <HAL_RCC_OscConfig+0xe8c>
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000
 80024e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	fa93 f2a3 	rbit	r2, r3
 80024fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002500:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800250a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800250e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002518:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	fa93 f2a3 	rbit	r2, r3
 8002522:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002526:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	4b86      	ldr	r3, [pc, #536]	@ (8002748 <HAL_RCC_OscConfig+0x10a4>)
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002534:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002538:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800253c:	6011      	str	r1, [r2, #0]
 800253e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002542:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	fa92 f1a2 	rbit	r1, r2
 800254c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002550:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002554:	6011      	str	r1, [r2, #0]
  return result;
 8002556:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800255a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	fab2 f282 	clz	r2, r2
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	f042 0220 	orr.w	r2, r2, #32
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	f002 021f 	and.w	r2, r2, #31
 8002570:	2101      	movs	r1, #1
 8002572:	fa01 f202 	lsl.w	r2, r1, r2
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	f43f af7f 	beq.w	800247c <HAL_RCC_OscConfig+0xdd8>
 800257e:	e0dd      	b.n	800273c <HAL_RCC_OscConfig+0x1098>
 8002580:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002584:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002588:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800258c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002592:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	fa93 f2a3 	rbit	r2, r3
 800259c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025a0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80025a4:	601a      	str	r2, [r3, #0]
  return result;
 80025a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025aa:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80025ae:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b0:	fab3 f383 	clz	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025ba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	461a      	mov	r2, r3
 80025c2:	2300      	movs	r3, #0
 80025c4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c6:	f7fe fbc9 	bl	8000d5c <HAL_GetTick>
 80025ca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ce:	e009      	b.n	80025e4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d0:	f7fe fbc4 	bl	8000d5c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e0ac      	b.n	800273e <HAL_RCC_OscConfig+0x109a>
 80025e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80025ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	fa93 f2a3 	rbit	r2, r3
 8002600:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002604:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002608:	601a      	str	r2, [r3, #0]
  return result;
 800260a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800260e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002612:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	fab3 f383 	clz	r3, r3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d102      	bne.n	800262e <HAL_RCC_OscConfig+0xf8a>
 8002628:	4b47      	ldr	r3, [pc, #284]	@ (8002748 <HAL_RCC_OscConfig+0x10a4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	e027      	b.n	800267e <HAL_RCC_OscConfig+0xfda>
 800262e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002632:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002636:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800263a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002640:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	fa93 f2a3 	rbit	r2, r3
 800264a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800264e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002658:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800265c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002666:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	fa93 f2a3 	rbit	r2, r3
 8002670:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002674:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	4b33      	ldr	r3, [pc, #204]	@ (8002748 <HAL_RCC_OscConfig+0x10a4>)
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002682:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002686:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800268a:	6011      	str	r1, [r2, #0]
 800268c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002690:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	fa92 f1a2 	rbit	r1, r2
 800269a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800269e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80026a2:	6011      	str	r1, [r2, #0]
  return result;
 80026a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026a8:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	fab2 f282 	clz	r2, r2
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	f042 0220 	orr.w	r2, r2, #32
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	f002 021f 	and.w	r2, r2, #31
 80026be:	2101      	movs	r1, #1
 80026c0:	fa01 f202 	lsl.w	r2, r1, r2
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d182      	bne.n	80025d0 <HAL_RCC_OscConfig+0xf2c>
 80026ca:	e037      	b.n	800273c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e02e      	b.n	800273e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026e0:	4b19      	ldr	r3, [pc, #100]	@ (8002748 <HAL_RCC_OscConfig+0x10a4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80026e8:	4b17      	ldr	r3, [pc, #92]	@ (8002748 <HAL_RCC_OscConfig+0x10a4>)
 80026ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ec:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80026f4:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80026f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	429a      	cmp	r2, r3
 8002706:	d117      	bne.n	8002738 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002708:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800270c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002710:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002714:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800271c:	429a      	cmp	r2, r3
 800271e:	d10b      	bne.n	8002738 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002720:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002724:	f003 020f 	and.w	r2, r3, #15
 8002728:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800272c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000

0800274c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b09e      	sub	sp, #120	@ 0x78
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e162      	b.n	8002a2a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002764:	4b90      	ldr	r3, [pc, #576]	@ (80029a8 <HAL_RCC_ClockConfig+0x25c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d910      	bls.n	8002794 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b8d      	ldr	r3, [pc, #564]	@ (80029a8 <HAL_RCC_ClockConfig+0x25c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 0207 	bic.w	r2, r3, #7
 800277a:	498b      	ldr	r1, [pc, #556]	@ (80029a8 <HAL_RCC_ClockConfig+0x25c>)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b89      	ldr	r3, [pc, #548]	@ (80029a8 <HAL_RCC_ClockConfig+0x25c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e14a      	b.n	8002a2a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a0:	4b82      	ldr	r3, [pc, #520]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	497f      	ldr	r1, [pc, #508]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80dc 	beq.w	8002978 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d13c      	bne.n	8002842 <HAL_RCC_ClockConfig+0xf6>
 80027c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027cc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80027d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d102      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xa6>
 80027ec:	4b6f      	ldr	r3, [pc, #444]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	e00f      	b.n	8002812 <HAL_RCC_ClockConfig+0xc6>
 80027f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8002800:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002804:	663b      	str	r3, [r7, #96]	@ 0x60
 8002806:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800280e:	4b67      	ldr	r3, [pc, #412]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002816:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002818:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800281a:	fa92 f2a2 	rbit	r2, r2
 800281e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002820:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002822:	fab2 f282 	clz	r2, r2
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	f042 0220 	orr.w	r2, r2, #32
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	f002 021f 	and.w	r2, r2, #31
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d17b      	bne.n	8002936 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0f3      	b.n	8002a2a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d13c      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x178>
 800284a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800284e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	095b      	lsrs	r3, r3, #5
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d102      	bne.n	8002874 <HAL_RCC_ClockConfig+0x128>
 800286e:	4b4f      	ldr	r3, [pc, #316]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	e00f      	b.n	8002894 <HAL_RCC_ClockConfig+0x148>
 8002874:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002878:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800287c:	fa93 f3a3 	rbit	r3, r3
 8002880:	647b      	str	r3, [r7, #68]	@ 0x44
 8002882:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002886:	643b      	str	r3, [r7, #64]	@ 0x40
 8002888:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002890:	4b46      	ldr	r3, [pc, #280]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002898:	63ba      	str	r2, [r7, #56]	@ 0x38
 800289a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800289c:	fa92 f2a2 	rbit	r2, r2
 80028a0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80028a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028a4:	fab2 f282 	clz	r2, r2
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	f042 0220 	orr.w	r2, r2, #32
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	f002 021f 	and.w	r2, r2, #31
 80028b4:	2101      	movs	r1, #1
 80028b6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d13a      	bne.n	8002936 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0b2      	b.n	8002a2a <HAL_RCC_ClockConfig+0x2de>
 80028c4:	2302      	movs	r3, #2
 80028c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80028d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d102      	bne.n	80028ec <HAL_RCC_ClockConfig+0x1a0>
 80028e6:	4b31      	ldr	r3, [pc, #196]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	e00d      	b.n	8002908 <HAL_RCC_ClockConfig+0x1bc>
 80028ec:	2302      	movs	r3, #2
 80028ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f8:	2302      	movs	r3, #2
 80028fa:	623b      	str	r3, [r7, #32]
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	61fb      	str	r3, [r7, #28]
 8002904:	4b29      	ldr	r3, [pc, #164]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	2202      	movs	r2, #2
 800290a:	61ba      	str	r2, [r7, #24]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	fa92 f2a2 	rbit	r2, r2
 8002912:	617a      	str	r2, [r7, #20]
  return result;
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	fab2 f282 	clz	r2, r2
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	f042 0220 	orr.w	r2, r2, #32
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	f002 021f 	and.w	r2, r2, #31
 8002926:	2101      	movs	r1, #1
 8002928:	fa01 f202 	lsl.w	r2, r1, r2
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e079      	b.n	8002a2a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002936:	4b1d      	ldr	r3, [pc, #116]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f023 0203 	bic.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	491a      	ldr	r1, [pc, #104]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002948:	f7fe fa08 	bl	8000d5c <HAL_GetTick>
 800294c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	e00a      	b.n	8002966 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002950:	f7fe fa04 	bl	8000d5c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e061      	b.n	8002a2a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 020c 	and.w	r2, r3, #12
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	429a      	cmp	r2, r3
 8002976:	d1eb      	bne.n	8002950 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002978:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <HAL_RCC_ClockConfig+0x25c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d214      	bcs.n	80029b0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b08      	ldr	r3, [pc, #32]	@ (80029a8 <HAL_RCC_ClockConfig+0x25c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 0207 	bic.w	r2, r3, #7
 800298e:	4906      	ldr	r1, [pc, #24]	@ (80029a8 <HAL_RCC_ClockConfig+0x25c>)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b04      	ldr	r3, [pc, #16]	@ (80029a8 <HAL_RCC_ClockConfig+0x25c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e040      	b.n	8002a2a <HAL_RCC_ClockConfig+0x2de>
 80029a8:	40022000 	.word	0x40022000
 80029ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a34 <HAL_RCC_ClockConfig+0x2e8>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	491a      	ldr	r1, [pc, #104]	@ (8002a34 <HAL_RCC_ClockConfig+0x2e8>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029da:	4b16      	ldr	r3, [pc, #88]	@ (8002a34 <HAL_RCC_ClockConfig+0x2e8>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4912      	ldr	r1, [pc, #72]	@ (8002a34 <HAL_RCC_ClockConfig+0x2e8>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029ee:	f000 f829 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 80029f2:	4601      	mov	r1, r0
 80029f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a34 <HAL_RCC_ClockConfig+0x2e8>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029fc:	22f0      	movs	r2, #240	@ 0xf0
 80029fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	fa92 f2a2 	rbit	r2, r2
 8002a06:	60fa      	str	r2, [r7, #12]
  return result;
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	fab2 f282 	clz	r2, r2
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	40d3      	lsrs	r3, r2
 8002a12:	4a09      	ldr	r2, [pc, #36]	@ (8002a38 <HAL_RCC_ClockConfig+0x2ec>)
 8002a14:	5cd3      	ldrb	r3, [r2, r3]
 8002a16:	fa21 f303 	lsr.w	r3, r1, r3
 8002a1a:	4a08      	ldr	r2, [pc, #32]	@ (8002a3c <HAL_RCC_ClockConfig+0x2f0>)
 8002a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a1e:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <HAL_RCC_ClockConfig+0x2f4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe f956 	bl	8000cd4 <HAL_InitTick>
  
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3778      	adds	r7, #120	@ 0x78
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000
 8002a38:	08007cfc 	.word	0x08007cfc
 8002a3c:	20000000 	.word	0x20000000
 8002a40:	20000004 	.word	0x20000004

08002a44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b08b      	sub	sp, #44	@ 0x2c
 8002a48:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	2300      	movs	r3, #0
 8002a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d002      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x30>
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_GetSysClockFreq+0x36>
 8002a72:	e03f      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a74:	4b25      	ldr	r3, [pc, #148]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a76:	623b      	str	r3, [r7, #32]
      break;
 8002a78:	e03f      	b.n	8002afa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002a80:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002a84:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	fa92 f2a2 	rbit	r2, r2
 8002a8c:	607a      	str	r2, [r7, #4]
  return result;
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	fab2 f282 	clz	r2, r2
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	40d3      	lsrs	r3, r2
 8002a98:	4a1d      	ldr	r2, [pc, #116]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a9a:	5cd3      	ldrb	r3, [r2, r3]
 8002a9c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	fa92 f2a2 	rbit	r2, r2
 8002ab0:	60fa      	str	r2, [r7, #12]
  return result;
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	fab2 f282 	clz	r2, r2
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	40d3      	lsrs	r3, r2
 8002abc:	4a15      	ldr	r2, [pc, #84]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002abe:	5cd3      	ldrb	r3, [r2, r3]
 8002ac0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002acc:	4a0f      	ldr	r2, [pc, #60]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8002adc:	e007      	b.n	8002aee <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ade:	4a0b      	ldr	r2, [pc, #44]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	fb02 f303 	mul.w	r3, r2, r3
 8002aec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	623b      	str	r3, [r7, #32]
      break;
 8002af2:	e002      	b.n	8002afa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002af4:	4b05      	ldr	r3, [pc, #20]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002af6:	623b      	str	r3, [r7, #32]
      break;
 8002af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002afa:	6a3b      	ldr	r3, [r7, #32]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	372c      	adds	r7, #44	@ 0x2c
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	007a1200 	.word	0x007a1200
 8002b10:	08007d14 	.word	0x08007d14
 8002b14:	08007d24 	.word	0x08007d24

08002b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b1c:	4b03      	ldr	r3, [pc, #12]	@ (8002b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000000 	.word	0x20000000

08002b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b36:	f7ff ffef 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002b3a:	4601      	mov	r1, r0
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b6c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b44:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	fa92 f2a2 	rbit	r2, r2
 8002b50:	603a      	str	r2, [r7, #0]
  return result;
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	fab2 f282 	clz	r2, r2
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	40d3      	lsrs	r3, r2
 8002b5c:	4a04      	ldr	r2, [pc, #16]	@ (8002b70 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b5e:	5cd3      	ldrb	r3, [r2, r3]
 8002b60:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	08007d0c 	.word	0x08007d0c

08002b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b7a:	f7ff ffcd 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002b7e:	4601      	mov	r1, r0
 8002b80:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002b88:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002b8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	fa92 f2a2 	rbit	r2, r2
 8002b94:	603a      	str	r2, [r7, #0]
  return result;
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	fab2 f282 	clz	r2, r2
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	40d3      	lsrs	r3, r2
 8002ba0:	4a04      	ldr	r2, [pc, #16]	@ (8002bb4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ba2:	5cd3      	ldrb	r3, [r2, r3]
 8002ba4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	08007d0c 	.word	0x08007d0c

08002bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b092      	sub	sp, #72	@ 0x48
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80d4 	beq.w	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bdc:	4b4e      	ldr	r3, [pc, #312]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10e      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be8:	4b4b      	ldr	r3, [pc, #300]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	4a4a      	ldr	r2, [pc, #296]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf2:	61d3      	str	r3, [r2, #28]
 8002bf4:	4b48      	ldr	r3, [pc, #288]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c00:	2301      	movs	r3, #1
 8002c02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c06:	4b45      	ldr	r3, [pc, #276]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d118      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c12:	4b42      	ldr	r3, [pc, #264]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a41      	ldr	r2, [pc, #260]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1e:	f7fe f89d 	bl	8000d5c <HAL_GetTick>
 8002c22:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c24:	e008      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c26:	f7fe f899 	bl	8000d5c <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b64      	cmp	r3, #100	@ 0x64
 8002c32:	d901      	bls.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e1d6      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c38:	4b38      	ldr	r3, [pc, #224]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c44:	4b34      	ldr	r3, [pc, #208]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8084 	beq.w	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d07c      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c64:	4b2c      	ldr	r3, [pc, #176]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c72:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b26      	ldr	r3, [pc, #152]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	2301      	movs	r3, #1
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4b1d      	ldr	r3, [pc, #116]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cb6:	4a18      	ldr	r2, [pc, #96]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d04b      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7fe f849 	bl	8000d5c <HAL_GetTick>
 8002cca:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7fe f845 	bl	8000d5c <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e180      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	623b      	str	r3, [r7, #32]
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	61fb      	str	r3, [r7, #28]
  return result;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d108      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d12:	4b01      	ldr	r3, [pc, #4]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	e00d      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	10908100 	.word	0x10908100
 8002d24:	2302      	movs	r3, #2
 8002d26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	4b9a      	ldr	r3, [pc, #616]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	2202      	movs	r2, #2
 8002d36:	613a      	str	r2, [r7, #16]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	fa92 f2a2 	rbit	r2, r2
 8002d3e:	60fa      	str	r2, [r7, #12]
  return result;
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	fab2 f282 	clz	r2, r2
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	f002 021f 	and.w	r2, r2, #31
 8002d52:	2101      	movs	r1, #1
 8002d54:	fa01 f202 	lsl.w	r2, r1, r2
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0b7      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d5e:	4b8f      	ldr	r3, [pc, #572]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	498c      	ldr	r1, [pc, #560]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d70:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d105      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d78:	4b88      	ldr	r3, [pc, #544]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	4a87      	ldr	r2, [pc, #540]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d90:	4b82      	ldr	r3, [pc, #520]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d94:	f023 0203 	bic.w	r2, r3, #3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	497f      	ldr	r1, [pc, #508]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dae:	4b7b      	ldr	r3, [pc, #492]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	4978      	ldr	r1, [pc, #480]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dcc:	4b73      	ldr	r3, [pc, #460]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	4970      	ldr	r1, [pc, #448]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dea:	4b6c      	ldr	r3, [pc, #432]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	f023 0210 	bic.w	r2, r3, #16
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	4969      	ldr	r1, [pc, #420]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e08:	4b64      	ldr	r3, [pc, #400]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e14:	4961      	ldr	r1, [pc, #388]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e26:	4b5d      	ldr	r3, [pc, #372]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	f023 0220 	bic.w	r2, r3, #32
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	495a      	ldr	r1, [pc, #360]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e44:	4b55      	ldr	r3, [pc, #340]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e48:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	4952      	ldr	r1, [pc, #328]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e62:	4b4e      	ldr	r3, [pc, #312]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	494b      	ldr	r1, [pc, #300]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e80:	4b46      	ldr	r3, [pc, #280]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e84:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	4943      	ldr	r1, [pc, #268]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d008      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	493c      	ldr	r1, [pc, #240]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ebc:	4b37      	ldr	r3, [pc, #220]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec8:	4934      	ldr	r1, [pc, #208]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002eda:	4b30      	ldr	r3, [pc, #192]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ede:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee6:	492d      	ldr	r1, [pc, #180]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ef8:	4b28      	ldr	r3, [pc, #160]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f04:	4925      	ldr	r1, [pc, #148]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f16:	4b21      	ldr	r3, [pc, #132]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	491e      	ldr	r1, [pc, #120]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002f34:	4b19      	ldr	r3, [pc, #100]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f38:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f40:	4916      	ldr	r1, [pc, #88]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002f52:	4b12      	ldr	r3, [pc, #72]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f5e:	490f      	ldr	r1, [pc, #60]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f70:	4b0a      	ldr	r3, [pc, #40]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7c:	4907      	ldr	r1, [pc, #28]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00c      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f8e:	4b03      	ldr	r3, [pc, #12]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	e002      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002f9a:	bf00      	nop
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fa2:	4913      	ldr	r1, [pc, #76]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc0:	490b      	ldr	r1, [pc, #44]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002fd2:	4b07      	ldr	r3, [pc, #28]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fde:	4904      	ldr	r1, [pc, #16]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3748      	adds	r7, #72	@ 0x48
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000

08002ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e09d      	b.n	8003142 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	2b00      	cmp	r3, #0
 800300c:	d108      	bne.n	8003020 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003016:	d009      	beq.n	800302c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	61da      	str	r2, [r3, #28]
 800301e:	e005      	b.n	800302c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fd fc32 	bl	80008b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003062:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800306c:	d902      	bls.n	8003074 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	e002      	b.n	800307a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003078:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003082:	d007      	beq.n	8003094 <HAL_SPI_Init+0xa0>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800308c:	d002      	beq.n	8003094 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d6:	ea42 0103 	orr.w	r1, r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030de:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	0c1b      	lsrs	r3, r3, #16
 80030f0:	f003 0204 	and.w	r2, r3, #4
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003110:	ea42 0103 	orr.w	r1, r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69da      	ldr	r2, [r3, #28]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003130:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b08a      	sub	sp, #40	@ 0x28
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003158:	2301      	movs	r3, #1
 800315a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_SPI_TransmitReceive+0x26>
 800316c:	2302      	movs	r3, #2
 800316e:	e20a      	b.n	8003586 <HAL_SPI_TransmitReceive+0x43c>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003178:	f7fd fdf0 	bl	8000d5c <HAL_GetTick>
 800317c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003184:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800318c:	887b      	ldrh	r3, [r7, #2]
 800318e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003190:	887b      	ldrh	r3, [r7, #2]
 8003192:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003194:	7efb      	ldrb	r3, [r7, #27]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d00e      	beq.n	80031b8 <HAL_SPI_TransmitReceive+0x6e>
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031a0:	d106      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x66>
 80031aa:	7efb      	ldrb	r3, [r7, #27]
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d003      	beq.n	80031b8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
 80031b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80031b6:	e1e0      	b.n	800357a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_SPI_TransmitReceive+0x80>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_SPI_TransmitReceive+0x80>
 80031c4:	887b      	ldrh	r3, [r7, #2]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d103      	bne.n	80031d2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80031d0:	e1d3      	b.n	800357a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d003      	beq.n	80031e6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2205      	movs	r2, #5
 80031e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	887a      	ldrh	r2, [r7, #2]
 80031f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	887a      	ldrh	r2, [r7, #2]
 80031fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	887a      	ldrh	r2, [r7, #2]
 8003212:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003228:	d802      	bhi.n	8003230 <HAL_SPI_TransmitReceive+0xe6>
 800322a:	8a3b      	ldrh	r3, [r7, #16]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d908      	bls.n	8003242 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	e007      	b.n	8003252 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003250:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800325c:	2b40      	cmp	r3, #64	@ 0x40
 800325e:	d007      	beq.n	8003270 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800326e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003278:	f240 8081 	bls.w	800337e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_TransmitReceive+0x140>
 8003284:	8a7b      	ldrh	r3, [r7, #18]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d16d      	bne.n	8003366 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328e:	881a      	ldrh	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329a:	1c9a      	adds	r2, r3, #2
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032ae:	e05a      	b.n	8003366 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d11b      	bne.n	80032f6 <HAL_SPI_TransmitReceive+0x1ac>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d016      	beq.n	80032f6 <HAL_SPI_TransmitReceive+0x1ac>
 80032c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d113      	bne.n	80032f6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d2:	881a      	ldrh	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032de:	1c9a      	adds	r2, r3, #2
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d11c      	bne.n	800333e <HAL_SPI_TransmitReceive+0x1f4>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d016      	beq.n	800333e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	b292      	uxth	r2, r2
 800331c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	1c9a      	adds	r2, r3, #2
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800333a:	2301      	movs	r3, #1
 800333c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800333e:	f7fd fd0d 	bl	8000d5c <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800334a:	429a      	cmp	r2, r3
 800334c:	d80b      	bhi.n	8003366 <HAL_SPI_TransmitReceive+0x21c>
 800334e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003354:	d007      	beq.n	8003366 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003364:	e109      	b.n	800357a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d19f      	bne.n	80032b0 <HAL_SPI_TransmitReceive+0x166>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d199      	bne.n	80032b0 <HAL_SPI_TransmitReceive+0x166>
 800337c:	e0e3      	b.n	8003546 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_SPI_TransmitReceive+0x244>
 8003386:	8a7b      	ldrh	r3, [r7, #18]
 8003388:	2b01      	cmp	r3, #1
 800338a:	f040 80cf 	bne.w	800352c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d912      	bls.n	80033be <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339c:	881a      	ldrh	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a8:	1c9a      	adds	r2, r3, #2
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b02      	subs	r3, #2
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033bc:	e0b6      	b.n	800352c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	330c      	adds	r3, #12
 80033c8:	7812      	ldrb	r2, [r2, #0]
 80033ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033e4:	e0a2      	b.n	800352c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d134      	bne.n	800345e <HAL_SPI_TransmitReceive+0x314>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d02f      	beq.n	800345e <HAL_SPI_TransmitReceive+0x314>
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003400:	2b01      	cmp	r3, #1
 8003402:	d12c      	bne.n	800345e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d912      	bls.n	8003434 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003412:	881a      	ldrh	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341e:	1c9a      	adds	r2, r3, #2
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b02      	subs	r3, #2
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003432:	e012      	b.n	800345a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	330c      	adds	r3, #12
 800343e:	7812      	ldrb	r2, [r2, #0]
 8003440:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d148      	bne.n	80034fe <HAL_SPI_TransmitReceive+0x3b4>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d042      	beq.n	80034fe <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d923      	bls.n	80034cc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	b292      	uxth	r2, r2
 8003490:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	1c9a      	adds	r2, r3, #2
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b02      	subs	r3, #2
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d81f      	bhi.n	80034fa <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	e016      	b.n	80034fa <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f103 020c 	add.w	r2, r3, #12
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	7812      	ldrb	r2, [r2, #0]
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034fa:	2301      	movs	r3, #1
 80034fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034fe:	f7fd fc2d 	bl	8000d5c <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800350a:	429a      	cmp	r2, r3
 800350c:	d803      	bhi.n	8003516 <HAL_SPI_TransmitReceive+0x3cc>
 800350e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003514:	d102      	bne.n	800351c <HAL_SPI_TransmitReceive+0x3d2>
 8003516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800352a:	e026      	b.n	800357a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	f47f af57 	bne.w	80033e6 <HAL_SPI_TransmitReceive+0x29c>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	f47f af50 	bne.w	80033e6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f93e 	bl	80037cc <SPI_EndRxTxTransaction>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003570:	e003      	b.n	800357a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003582:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003586:	4618      	mov	r0, r3
 8003588:	3728      	adds	r7, #40	@ 0x28
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	4613      	mov	r3, r2
 800359e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035a0:	f7fd fbdc 	bl	8000d5c <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	4413      	add	r3, r2
 80035ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035b0:	f7fd fbd4 	bl	8000d5c <HAL_GetTick>
 80035b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035b6:	4b39      	ldr	r3, [pc, #228]	@ (800369c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	015b      	lsls	r3, r3, #5
 80035bc:	0d1b      	lsrs	r3, r3, #20
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	fb02 f303 	mul.w	r3, r2, r3
 80035c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035c6:	e054      	b.n	8003672 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ce:	d050      	beq.n	8003672 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035d0:	f7fd fbc4 	bl	8000d5c <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d902      	bls.n	80035e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d13d      	bne.n	8003662 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035fe:	d111      	bne.n	8003624 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003608:	d004      	beq.n	8003614 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003612:	d107      	bne.n	8003624 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003622:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800362c:	d10f      	bne.n	800364e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800364c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e017      	b.n	8003692 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	3b01      	subs	r3, #1
 8003670:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4013      	ands	r3, r2
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	429a      	cmp	r2, r3
 8003680:	bf0c      	ite	eq
 8003682:	2301      	moveq	r3, #1
 8003684:	2300      	movne	r3, #0
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	429a      	cmp	r2, r3
 800368e:	d19b      	bne.n	80035c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3720      	adds	r7, #32
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	20000000 	.word	0x20000000

080036a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08a      	sub	sp, #40	@ 0x28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80036b2:	f7fd fb53 	bl	8000d5c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	4413      	add	r3, r2
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80036c2:	f7fd fb4b 	bl	8000d5c <HAL_GetTick>
 80036c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	330c      	adds	r3, #12
 80036ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80036d0:	4b3d      	ldr	r3, [pc, #244]	@ (80037c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	00da      	lsls	r2, r3, #3
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	0d1b      	lsrs	r3, r3, #20
 80036e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80036e8:	e060      	b.n	80037ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80036f0:	d107      	bne.n	8003702 <SPI_WaitFifoStateUntilTimeout+0x62>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003700:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003708:	d050      	beq.n	80037ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800370a:	f7fd fb27 	bl	8000d5c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003716:	429a      	cmp	r2, r3
 8003718:	d902      	bls.n	8003720 <SPI_WaitFifoStateUntilTimeout+0x80>
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	2b00      	cmp	r3, #0
 800371e:	d13d      	bne.n	800379c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800372e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003738:	d111      	bne.n	800375e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003742:	d004      	beq.n	800374e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800374c:	d107      	bne.n	800375e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800375c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003766:	d10f      	bne.n	8003788 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003786:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e010      	b.n	80037be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4013      	ands	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d196      	bne.n	80036ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3728      	adds	r7, #40	@ 0x28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000000 	.word	0x20000000

080037cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2200      	movs	r2, #0
 80037e0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f7ff ff5b 	bl	80036a0 <SPI_WaitFifoStateUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d007      	beq.n	8003800 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f4:	f043 0220 	orr.w	r2, r3, #32
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e027      	b.n	8003850 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2200      	movs	r2, #0
 8003808:	2180      	movs	r1, #128	@ 0x80
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f7ff fec0 	bl	8003590 <SPI_WaitFlagStateUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800381a:	f043 0220 	orr.w	r2, r3, #32
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e014      	b.n	8003850 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2200      	movs	r2, #0
 800382e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff ff34 	bl	80036a0 <SPI_WaitFifoStateUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003842:	f043 0220 	orr.w	r2, r3, #32
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e000      	b.n	8003850 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e040      	b.n	80038ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd f85c 	bl	8000938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2224      	movs	r2, #36	@ 0x24
 8003884:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f8d4 	bl	8003a44 <UART_SetConfig>
 800389c:	4603      	mov	r3, r0
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e022      	b.n	80038ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fa9c 	bl	8003dec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fb23 	bl	8003f30 <UART_CheckIdleState>
 80038ea:	4603      	mov	r3, r0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08a      	sub	sp, #40	@ 0x28
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	603b      	str	r3, [r7, #0]
 8003900:	4613      	mov	r3, r2
 8003902:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003908:	2b20      	cmp	r3, #32
 800390a:	d177      	bne.n	80039fc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_UART_Transmit+0x24>
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e070      	b.n	80039fe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2221      	movs	r2, #33	@ 0x21
 8003928:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800392a:	f7fd fa17 	bl	8000d5c <HAL_GetTick>
 800392e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	88fa      	ldrh	r2, [r7, #6]
 8003934:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	88fa      	ldrh	r2, [r7, #6]
 800393c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003948:	d108      	bne.n	800395c <HAL_UART_Transmit+0x68>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d104      	bne.n	800395c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	e003      	b.n	8003964 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003960:	2300      	movs	r3, #0
 8003962:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003964:	e02f      	b.n	80039c6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2200      	movs	r2, #0
 800396e:	2180      	movs	r1, #128	@ 0x80
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 fb85 	bl	8004080 <UART_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e03b      	b.n	80039fe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10b      	bne.n	80039a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	881a      	ldrh	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003998:	b292      	uxth	r2, r2
 800399a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	3302      	adds	r3, #2
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	e007      	b.n	80039b4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	781a      	ldrb	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3301      	adds	r3, #1
 80039b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1c9      	bne.n	8003966 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2200      	movs	r2, #0
 80039da:	2140      	movs	r1, #64	@ 0x40
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fb4f 	bl	8004080 <UART_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d004      	beq.n	80039f2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e005      	b.n	80039fe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e000      	b.n	80039fe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
  }
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4b92      	ldr	r3, [pc, #584]	@ (8003cb8 <UART_SetConfig+0x274>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	6979      	ldr	r1, [r7, #20]
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a80      	ldr	r2, [pc, #512]	@ (8003cbc <UART_SetConfig+0x278>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d120      	bne.n	8003b02 <UART_SetConfig+0xbe>
 8003ac0:	4b7f      	ldr	r3, [pc, #508]	@ (8003cc0 <UART_SetConfig+0x27c>)
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d817      	bhi.n	8003afc <UART_SetConfig+0xb8>
 8003acc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad4 <UART_SetConfig+0x90>)
 8003ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad2:	bf00      	nop
 8003ad4:	08003ae5 	.word	0x08003ae5
 8003ad8:	08003af1 	.word	0x08003af1
 8003adc:	08003af7 	.word	0x08003af7
 8003ae0:	08003aeb 	.word	0x08003aeb
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e0b5      	b.n	8003c56 <UART_SetConfig+0x212>
 8003aea:	2302      	movs	r3, #2
 8003aec:	77fb      	strb	r3, [r7, #31]
 8003aee:	e0b2      	b.n	8003c56 <UART_SetConfig+0x212>
 8003af0:	2304      	movs	r3, #4
 8003af2:	77fb      	strb	r3, [r7, #31]
 8003af4:	e0af      	b.n	8003c56 <UART_SetConfig+0x212>
 8003af6:	2308      	movs	r3, #8
 8003af8:	77fb      	strb	r3, [r7, #31]
 8003afa:	e0ac      	b.n	8003c56 <UART_SetConfig+0x212>
 8003afc:	2310      	movs	r3, #16
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e0a9      	b.n	8003c56 <UART_SetConfig+0x212>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a6f      	ldr	r2, [pc, #444]	@ (8003cc4 <UART_SetConfig+0x280>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d124      	bne.n	8003b56 <UART_SetConfig+0x112>
 8003b0c:	4b6c      	ldr	r3, [pc, #432]	@ (8003cc0 <UART_SetConfig+0x27c>)
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b18:	d011      	beq.n	8003b3e <UART_SetConfig+0xfa>
 8003b1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b1e:	d817      	bhi.n	8003b50 <UART_SetConfig+0x10c>
 8003b20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b24:	d011      	beq.n	8003b4a <UART_SetConfig+0x106>
 8003b26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b2a:	d811      	bhi.n	8003b50 <UART_SetConfig+0x10c>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <UART_SetConfig+0xf4>
 8003b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b34:	d006      	beq.n	8003b44 <UART_SetConfig+0x100>
 8003b36:	e00b      	b.n	8003b50 <UART_SetConfig+0x10c>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e08b      	b.n	8003c56 <UART_SetConfig+0x212>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	77fb      	strb	r3, [r7, #31]
 8003b42:	e088      	b.n	8003c56 <UART_SetConfig+0x212>
 8003b44:	2304      	movs	r3, #4
 8003b46:	77fb      	strb	r3, [r7, #31]
 8003b48:	e085      	b.n	8003c56 <UART_SetConfig+0x212>
 8003b4a:	2308      	movs	r3, #8
 8003b4c:	77fb      	strb	r3, [r7, #31]
 8003b4e:	e082      	b.n	8003c56 <UART_SetConfig+0x212>
 8003b50:	2310      	movs	r3, #16
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	e07f      	b.n	8003c56 <UART_SetConfig+0x212>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a5b      	ldr	r2, [pc, #364]	@ (8003cc8 <UART_SetConfig+0x284>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d124      	bne.n	8003baa <UART_SetConfig+0x166>
 8003b60:	4b57      	ldr	r3, [pc, #348]	@ (8003cc0 <UART_SetConfig+0x27c>)
 8003b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b64:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003b68:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b6c:	d011      	beq.n	8003b92 <UART_SetConfig+0x14e>
 8003b6e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b72:	d817      	bhi.n	8003ba4 <UART_SetConfig+0x160>
 8003b74:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b78:	d011      	beq.n	8003b9e <UART_SetConfig+0x15a>
 8003b7a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b7e:	d811      	bhi.n	8003ba4 <UART_SetConfig+0x160>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <UART_SetConfig+0x148>
 8003b84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b88:	d006      	beq.n	8003b98 <UART_SetConfig+0x154>
 8003b8a:	e00b      	b.n	8003ba4 <UART_SetConfig+0x160>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	77fb      	strb	r3, [r7, #31]
 8003b90:	e061      	b.n	8003c56 <UART_SetConfig+0x212>
 8003b92:	2302      	movs	r3, #2
 8003b94:	77fb      	strb	r3, [r7, #31]
 8003b96:	e05e      	b.n	8003c56 <UART_SetConfig+0x212>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	77fb      	strb	r3, [r7, #31]
 8003b9c:	e05b      	b.n	8003c56 <UART_SetConfig+0x212>
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	77fb      	strb	r3, [r7, #31]
 8003ba2:	e058      	b.n	8003c56 <UART_SetConfig+0x212>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	77fb      	strb	r3, [r7, #31]
 8003ba8:	e055      	b.n	8003c56 <UART_SetConfig+0x212>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a47      	ldr	r2, [pc, #284]	@ (8003ccc <UART_SetConfig+0x288>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d124      	bne.n	8003bfe <UART_SetConfig+0x1ba>
 8003bb4:	4b42      	ldr	r3, [pc, #264]	@ (8003cc0 <UART_SetConfig+0x27c>)
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003bbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bc0:	d011      	beq.n	8003be6 <UART_SetConfig+0x1a2>
 8003bc2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bc6:	d817      	bhi.n	8003bf8 <UART_SetConfig+0x1b4>
 8003bc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bcc:	d011      	beq.n	8003bf2 <UART_SetConfig+0x1ae>
 8003bce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bd2:	d811      	bhi.n	8003bf8 <UART_SetConfig+0x1b4>
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <UART_SetConfig+0x19c>
 8003bd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bdc:	d006      	beq.n	8003bec <UART_SetConfig+0x1a8>
 8003bde:	e00b      	b.n	8003bf8 <UART_SetConfig+0x1b4>
 8003be0:	2300      	movs	r3, #0
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	e037      	b.n	8003c56 <UART_SetConfig+0x212>
 8003be6:	2302      	movs	r3, #2
 8003be8:	77fb      	strb	r3, [r7, #31]
 8003bea:	e034      	b.n	8003c56 <UART_SetConfig+0x212>
 8003bec:	2304      	movs	r3, #4
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e031      	b.n	8003c56 <UART_SetConfig+0x212>
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	77fb      	strb	r3, [r7, #31]
 8003bf6:	e02e      	b.n	8003c56 <UART_SetConfig+0x212>
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	e02b      	b.n	8003c56 <UART_SetConfig+0x212>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a33      	ldr	r2, [pc, #204]	@ (8003cd0 <UART_SetConfig+0x28c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d124      	bne.n	8003c52 <UART_SetConfig+0x20e>
 8003c08:	4b2d      	ldr	r3, [pc, #180]	@ (8003cc0 <UART_SetConfig+0x27c>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003c10:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c14:	d011      	beq.n	8003c3a <UART_SetConfig+0x1f6>
 8003c16:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c1a:	d817      	bhi.n	8003c4c <UART_SetConfig+0x208>
 8003c1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c20:	d011      	beq.n	8003c46 <UART_SetConfig+0x202>
 8003c22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c26:	d811      	bhi.n	8003c4c <UART_SetConfig+0x208>
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <UART_SetConfig+0x1f0>
 8003c2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c30:	d006      	beq.n	8003c40 <UART_SetConfig+0x1fc>
 8003c32:	e00b      	b.n	8003c4c <UART_SetConfig+0x208>
 8003c34:	2300      	movs	r3, #0
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e00d      	b.n	8003c56 <UART_SetConfig+0x212>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e00a      	b.n	8003c56 <UART_SetConfig+0x212>
 8003c40:	2304      	movs	r3, #4
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e007      	b.n	8003c56 <UART_SetConfig+0x212>
 8003c46:	2308      	movs	r3, #8
 8003c48:	77fb      	strb	r3, [r7, #31]
 8003c4a:	e004      	b.n	8003c56 <UART_SetConfig+0x212>
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	77fb      	strb	r3, [r7, #31]
 8003c50:	e001      	b.n	8003c56 <UART_SetConfig+0x212>
 8003c52:	2310      	movs	r3, #16
 8003c54:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c5e:	d16b      	bne.n	8003d38 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003c60:	7ffb      	ldrb	r3, [r7, #31]
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d838      	bhi.n	8003cd8 <UART_SetConfig+0x294>
 8003c66:	a201      	add	r2, pc, #4	@ (adr r2, 8003c6c <UART_SetConfig+0x228>)
 8003c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6c:	08003c91 	.word	0x08003c91
 8003c70:	08003c99 	.word	0x08003c99
 8003c74:	08003ca1 	.word	0x08003ca1
 8003c78:	08003cd9 	.word	0x08003cd9
 8003c7c:	08003ca7 	.word	0x08003ca7
 8003c80:	08003cd9 	.word	0x08003cd9
 8003c84:	08003cd9 	.word	0x08003cd9
 8003c88:	08003cd9 	.word	0x08003cd9
 8003c8c:	08003caf 	.word	0x08003caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c90:	f7fe ff4e 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 8003c94:	61b8      	str	r0, [r7, #24]
        break;
 8003c96:	e024      	b.n	8003ce2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c98:	f7fe ff6c 	bl	8002b74 <HAL_RCC_GetPCLK2Freq>
 8003c9c:	61b8      	str	r0, [r7, #24]
        break;
 8003c9e:	e020      	b.n	8003ce2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd4 <UART_SetConfig+0x290>)
 8003ca2:	61bb      	str	r3, [r7, #24]
        break;
 8003ca4:	e01d      	b.n	8003ce2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ca6:	f7fe fecd 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 8003caa:	61b8      	str	r0, [r7, #24]
        break;
 8003cac:	e019      	b.n	8003ce2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cb2:	61bb      	str	r3, [r7, #24]
        break;
 8003cb4:	e015      	b.n	8003ce2 <UART_SetConfig+0x29e>
 8003cb6:	bf00      	nop
 8003cb8:	efff69f3 	.word	0xefff69f3
 8003cbc:	40013800 	.word	0x40013800
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40004400 	.word	0x40004400
 8003cc8:	40004800 	.word	0x40004800
 8003ccc:	40004c00 	.word	0x40004c00
 8003cd0:	40005000 	.word	0x40005000
 8003cd4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	77bb      	strb	r3, [r7, #30]
        break;
 8003ce0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d073      	beq.n	8003dd0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	005a      	lsls	r2, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	085b      	lsrs	r3, r3, #1
 8003cf2:	441a      	add	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	2b0f      	cmp	r3, #15
 8003d02:	d916      	bls.n	8003d32 <UART_SetConfig+0x2ee>
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d0a:	d212      	bcs.n	8003d32 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	f023 030f 	bic.w	r3, r3, #15
 8003d14:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	085b      	lsrs	r3, r3, #1
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	89fb      	ldrh	r3, [r7, #14]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	89fa      	ldrh	r2, [r7, #14]
 8003d2e:	60da      	str	r2, [r3, #12]
 8003d30:	e04e      	b.n	8003dd0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	77bb      	strb	r3, [r7, #30]
 8003d36:	e04b      	b.n	8003dd0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d38:	7ffb      	ldrb	r3, [r7, #31]
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d827      	bhi.n	8003d8e <UART_SetConfig+0x34a>
 8003d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d44 <UART_SetConfig+0x300>)
 8003d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d44:	08003d69 	.word	0x08003d69
 8003d48:	08003d71 	.word	0x08003d71
 8003d4c:	08003d79 	.word	0x08003d79
 8003d50:	08003d8f 	.word	0x08003d8f
 8003d54:	08003d7f 	.word	0x08003d7f
 8003d58:	08003d8f 	.word	0x08003d8f
 8003d5c:	08003d8f 	.word	0x08003d8f
 8003d60:	08003d8f 	.word	0x08003d8f
 8003d64:	08003d87 	.word	0x08003d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d68:	f7fe fee2 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 8003d6c:	61b8      	str	r0, [r7, #24]
        break;
 8003d6e:	e013      	b.n	8003d98 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d70:	f7fe ff00 	bl	8002b74 <HAL_RCC_GetPCLK2Freq>
 8003d74:	61b8      	str	r0, [r7, #24]
        break;
 8003d76:	e00f      	b.n	8003d98 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d78:	4b1b      	ldr	r3, [pc, #108]	@ (8003de8 <UART_SetConfig+0x3a4>)
 8003d7a:	61bb      	str	r3, [r7, #24]
        break;
 8003d7c:	e00c      	b.n	8003d98 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d7e:	f7fe fe61 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 8003d82:	61b8      	str	r0, [r7, #24]
        break;
 8003d84:	e008      	b.n	8003d98 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d8a:	61bb      	str	r3, [r7, #24]
        break;
 8003d8c:	e004      	b.n	8003d98 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	77bb      	strb	r3, [r7, #30]
        break;
 8003d96:	bf00      	nop
    }

    if (pclk != 0U)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d018      	beq.n	8003dd0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	085a      	lsrs	r2, r3, #1
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	441a      	add	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2b0f      	cmp	r3, #15
 8003db6:	d909      	bls.n	8003dcc <UART_SetConfig+0x388>
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dbe:	d205      	bcs.n	8003dcc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60da      	str	r2, [r3, #12]
 8003dca:	e001      	b.n	8003dd0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ddc:	7fbb      	ldrb	r3, [r7, #30]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3720      	adds	r7, #32
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	007a1200 	.word	0x007a1200

08003dec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01a      	beq.n	8003f02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eea:	d10a      	bne.n	8003f02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	605a      	str	r2, [r3, #4]
  }
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b098      	sub	sp, #96	@ 0x60
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f40:	f7fc ff0c 	bl	8000d5c <HAL_GetTick>
 8003f44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d12e      	bne.n	8003fb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f88c 	bl	8004080 <UART_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d021      	beq.n	8003fb2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f76:	e853 3f00 	ldrex	r3, [r3]
 8003f7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f82:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f8e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f94:	e841 2300 	strex	r3, r2, [r1]
 8003f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e6      	bne.n	8003f6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e062      	b.n	8004078 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d149      	bne.n	8004054 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f856 	bl	8004080 <UART_WaitOnFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d03c      	beq.n	8004054 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	623b      	str	r3, [r7, #32]
   return(result);
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ffa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e6      	bne.n	8003fda <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3308      	adds	r3, #8
 8004012:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	e853 3f00 	ldrex	r3, [r3]
 800401a:	60fb      	str	r3, [r7, #12]
   return(result);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0301 	bic.w	r3, r3, #1
 8004022:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3308      	adds	r3, #8
 800402a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800402c:	61fa      	str	r2, [r7, #28]
 800402e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004030:	69b9      	ldr	r1, [r7, #24]
 8004032:	69fa      	ldr	r2, [r7, #28]
 8004034:	e841 2300 	strex	r3, r2, [r1]
 8004038:	617b      	str	r3, [r7, #20]
   return(result);
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e5      	bne.n	800400c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e011      	b.n	8004078 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2220      	movs	r2, #32
 800405e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3758      	adds	r7, #88	@ 0x58
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	4613      	mov	r3, r2
 800408e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004090:	e049      	b.n	8004126 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004098:	d045      	beq.n	8004126 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800409a:	f7fc fe5f 	bl	8000d5c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d302      	bcc.n	80040b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e048      	b.n	8004146 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d031      	beq.n	8004126 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d110      	bne.n	80040f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2208      	movs	r2, #8
 80040d6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f8ff 	bl	80042dc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2208      	movs	r2, #8
 80040e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e029      	b.n	8004146 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004100:	d111      	bne.n	8004126 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800410a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 f8e5 	bl	80042dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e00f      	b.n	8004146 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	69da      	ldr	r2, [r3, #28]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4013      	ands	r3, r2
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	429a      	cmp	r2, r3
 8004134:	bf0c      	ite	eq
 8004136:	2301      	moveq	r3, #1
 8004138:	2300      	movne	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	429a      	cmp	r2, r3
 8004142:	d0a6      	beq.n	8004092 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b096      	sub	sp, #88	@ 0x58
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	4613      	mov	r3, r2
 800415c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	88fa      	ldrh	r2, [r7, #6]
 8004168:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2222      	movs	r2, #34	@ 0x22
 8004178:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004180:	2b00      	cmp	r3, #0
 8004182:	d028      	beq.n	80041d6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004188:	4a3e      	ldr	r2, [pc, #248]	@ (8004284 <UART_Start_Receive_DMA+0x134>)
 800418a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004190:	4a3d      	ldr	r2, [pc, #244]	@ (8004288 <UART_Start_Receive_DMA+0x138>)
 8004192:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004198:	4a3c      	ldr	r2, [pc, #240]	@ (800428c <UART_Start_Receive_DMA+0x13c>)
 800419a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041a0:	2200      	movs	r2, #0
 80041a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3324      	adds	r3, #36	@ 0x24
 80041ae:	4619      	mov	r1, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b4:	461a      	mov	r2, r3
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	f7fc ff34 	bl	8001024 <HAL_DMA_Start_IT>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d009      	beq.n	80041d6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2210      	movs	r2, #16
 80041c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e051      	b.n	800427a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d018      	beq.n	8004210 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041e6:	e853 3f00 	ldrex	r3, [r3]
 80041ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041fe:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004202:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004204:	e841 2300 	strex	r3, r2, [r1]
 8004208:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800420a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e6      	bne.n	80041de <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3308      	adds	r3, #8
 8004216:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	653b      	str	r3, [r7, #80]	@ 0x50
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3308      	adds	r3, #8
 800422e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004230:	637a      	str	r2, [r7, #52]	@ 0x34
 8004232:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004236:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800423e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e5      	bne.n	8004210 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3308      	adds	r3, #8
 800424a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	613b      	str	r3, [r7, #16]
   return(result);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800425a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3308      	adds	r3, #8
 8004262:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004264:	623a      	str	r2, [r7, #32]
 8004266:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	69f9      	ldr	r1, [r7, #28]
 800426a:	6a3a      	ldr	r2, [r7, #32]
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	61bb      	str	r3, [r7, #24]
   return(result);
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e5      	bne.n	8004244 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3758      	adds	r7, #88	@ 0x58
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	080043a5 	.word	0x080043a5
 8004288:	080044cb 	.word	0x080044cb
 800428c:	08004509 	.word	0x08004509

08004290 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004290:	b480      	push	{r7}
 8004292:	b089      	sub	sp, #36	@ 0x24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80042ac:	61fb      	str	r3, [r7, #28]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6979      	ldr	r1, [r7, #20]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	613b      	str	r3, [r7, #16]
   return(result);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e6      	bne.n	8004298 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80042d0:	bf00      	nop
 80042d2:	3724      	adds	r7, #36	@ 0x24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042dc:	b480      	push	{r7}
 80042de:	b095      	sub	sp, #84	@ 0x54
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004302:	643b      	str	r3, [r7, #64]	@ 0x40
 8004304:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004308:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e6      	bne.n	80042e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3308      	adds	r3, #8
 800431c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	61fb      	str	r3, [r7, #28]
   return(result);
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3308      	adds	r3, #8
 8004334:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004336:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004338:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800433c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e5      	bne.n	8004316 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800434e:	2b01      	cmp	r3, #1
 8004350:	d118      	bne.n	8004384 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f023 0310 	bic.w	r3, r3, #16
 8004366:	647b      	str	r3, [r7, #68]	@ 0x44
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6979      	ldr	r1, [r7, #20]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	613b      	str	r3, [r7, #16]
   return(result);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e6      	bne.n	8004352 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004398:	bf00      	nop
 800439a:	3754      	adds	r7, #84	@ 0x54
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b09c      	sub	sp, #112	@ 0x70
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d071      	beq.n	800449e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80043ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043bc:	2200      	movs	r2, #0
 80043be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043e2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e6      	bne.n	80043c2 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3308      	adds	r3, #8
 80043fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	667b      	str	r3, [r7, #100]	@ 0x64
 800440c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3308      	adds	r3, #8
 8004412:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004414:	647a      	str	r2, [r7, #68]	@ 0x44
 8004416:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800441a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e5      	bne.n	80043f4 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3308      	adds	r3, #8
 800442e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004432:	e853 3f00 	ldrex	r3, [r3]
 8004436:	623b      	str	r3, [r7, #32]
   return(result);
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800443e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004440:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3308      	adds	r3, #8
 8004446:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004448:	633a      	str	r2, [r7, #48]	@ 0x30
 800444a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800444e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004450:	e841 2300 	strex	r3, r2, [r1]
 8004454:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e5      	bne.n	8004428 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800445c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800445e:	2220      	movs	r2, #32
 8004460:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004468:	2b01      	cmp	r3, #1
 800446a:	d118      	bne.n	800449e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800446c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	e853 3f00 	ldrex	r3, [r3]
 8004478:	60fb      	str	r3, [r7, #12]
   return(result);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f023 0310 	bic.w	r3, r3, #16
 8004480:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	461a      	mov	r2, r3
 8004488:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800448a:	61fb      	str	r3, [r7, #28]
 800448c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	69b9      	ldr	r1, [r7, #24]
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	617b      	str	r3, [r7, #20]
   return(result);
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e6      	bne.n	800446c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800449e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044a0:	2200      	movs	r2, #0
 80044a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d107      	bne.n	80044bc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044b2:	4619      	mov	r1, r3
 80044b4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80044b6:	f7fb feeb 	bl	8000290 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044ba:	e002      	b.n	80044c2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80044bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80044be:	f7ff faa2 	bl	8003a06 <HAL_UART_RxCpltCallback>
}
 80044c2:	bf00      	nop
 80044c4:	3770      	adds	r7, #112	@ 0x70
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d109      	bne.n	80044fa <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044ec:	085b      	lsrs	r3, r3, #1
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	4619      	mov	r1, r3
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f7fb fecc 	bl	8000290 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044f8:	e002      	b.n	8004500 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f7ff fa8d 	bl	8003a1a <HAL_UART_RxHalfCpltCallback>
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800451a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004522:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452e:	2b80      	cmp	r3, #128	@ 0x80
 8004530:	d109      	bne.n	8004546 <UART_DMAError+0x3e>
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b21      	cmp	r3, #33	@ 0x21
 8004536:	d106      	bne.n	8004546 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2200      	movs	r2, #0
 800453c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004540:	6978      	ldr	r0, [r7, #20]
 8004542:	f7ff fea5 	bl	8004290 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004550:	2b40      	cmp	r3, #64	@ 0x40
 8004552:	d109      	bne.n	8004568 <UART_DMAError+0x60>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b22      	cmp	r3, #34	@ 0x22
 8004558:	d106      	bne.n	8004568 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2200      	movs	r2, #0
 800455e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004562:	6978      	ldr	r0, [r7, #20]
 8004564:	f7ff feba 	bl	80042dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800456e:	f043 0210 	orr.w	r2, r3, #16
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004578:	6978      	ldr	r0, [r7, #20]
 800457a:	f7ff fa58 	bl	8003a2e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800457e:	bf00      	nop
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b08c      	sub	sp, #48	@ 0x30
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	4613      	mov	r3, r2
 8004592:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800459a:	2b20      	cmp	r3, #32
 800459c:	d142      	bne.n	8004624 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80045a4:	88fb      	ldrh	r3, [r7, #6]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e03b      	b.n	8004626 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	461a      	mov	r2, r3
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f7ff fdc5 	bl	8004150 <UART_Start_Receive_DMA>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80045cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d124      	bne.n	800461e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d11d      	bne.n	8004618 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2210      	movs	r2, #16
 80045e2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	e853 3f00 	ldrex	r3, [r3]
 80045f0:	617b      	str	r3, [r7, #20]
   return(result);
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f043 0310 	orr.w	r3, r3, #16
 80045f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24
 8004604:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004606:	6a39      	ldr	r1, [r7, #32]
 8004608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e6      	bne.n	80045e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8004616:	e002      	b.n	800461e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800461e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004622:	e000      	b.n	8004626 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004624:	2302      	movs	r3, #2
  }
}
 8004626:	4618      	mov	r0, r3
 8004628:	3730      	adds	r7, #48	@ 0x30
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <SPI_QCA7000_Read_Signature>:

void SPI_Transmit_Receive();
void Serial_Print();


uint16_t SPI_QCA7000_Read_Signature(void){
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
    uint16_t sig;
    uint8_t i;
    i = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	71fb      	strb	r3, [r7, #7]
    spi_tx_buffer[i++] = 0xDA;
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	71fa      	strb	r2, [r7, #7]
 8004640:	461a      	mov	r2, r3
 8004642:	4b1b      	ldr	r3, [pc, #108]	@ (80046b0 <SPI_QCA7000_Read_Signature+0x80>)
 8004644:	21da      	movs	r1, #218	@ 0xda
 8004646:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	71fa      	strb	r2, [r7, #7]
 800464e:	461a      	mov	r2, r3
 8004650:	4b17      	ldr	r3, [pc, #92]	@ (80046b0 <SPI_QCA7000_Read_Signature+0x80>)
 8004652:	2100      	movs	r1, #0
 8004654:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	71fa      	strb	r2, [r7, #7]
 800465c:	461a      	mov	r2, r3
 800465e:	4b14      	ldr	r3, [pc, #80]	@ (80046b0 <SPI_QCA7000_Read_Signature+0x80>)
 8004660:	2100      	movs	r1, #0
 8004662:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	71fa      	strb	r2, [r7, #7]
 800466a:	461a      	mov	r2, r3
 800466c:	4b10      	ldr	r3, [pc, #64]	@ (80046b0 <SPI_QCA7000_Read_Signature+0x80>)
 800466e:	2100      	movs	r1, #0
 8004670:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	b29a      	uxth	r2, r3
 8004676:	4b0f      	ldr	r3, [pc, #60]	@ (80046b4 <SPI_QCA7000_Read_Signature+0x84>)
 8004678:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 800467a:	f7fb fef7 	bl	800046c <SPI_Transmit_Receive>

    sig = spi_rx_buffer[2];
 800467e:	4b0e      	ldr	r3, [pc, #56]	@ (80046b8 <SPI_QCA7000_Read_Signature+0x88>)
 8004680:	789b      	ldrb	r3, [r3, #2]
 8004682:	80bb      	strh	r3, [r7, #4]
    sig <<= 8;
 8004684:	88bb      	ldrh	r3, [r7, #4]
 8004686:	021b      	lsls	r3, r3, #8
 8004688:	80bb      	strh	r3, [r7, #4]
    sig += spi_rx_buffer[3];
 800468a:	4b0b      	ldr	r3, [pc, #44]	@ (80046b8 <SPI_QCA7000_Read_Signature+0x88>)
 800468c:	78db      	ldrb	r3, [r3, #3]
 800468e:	461a      	mov	r2, r3
 8004690:	88bb      	ldrh	r3, [r7, #4]
 8004692:	4413      	add	r3, r2
 8004694:	80bb      	strh	r3, [r7, #4]

    sprintf(serial_output_buffer, "Hello, sig is %X ", sig);
 8004696:	88bb      	ldrh	r3, [r7, #4]
 8004698:	461a      	mov	r2, r3
 800469a:	4908      	ldr	r1, [pc, #32]	@ (80046bc <SPI_QCA7000_Read_Signature+0x8c>)
 800469c:	4808      	ldr	r0, [pc, #32]	@ (80046c0 <SPI_QCA7000_Read_Signature+0x90>)
 800469e:	f001 ffe5 	bl	800666c <siprintf>
    Serial_Print();
 80046a2:	f7fb fed1 	bl	8000448 <Serial_Print>

    return sig;
 80046a6:	88bb      	ldrh	r3, [r7, #4]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000a10 	.word	0x20000a10
 80046b4:	20001a78 	.word	0x20001a78
 80046b8:	20001244 	.word	0x20001244
 80046bc:	080077ec 	.word	0x080077ec
 80046c0:	200001dc 	.word	0x200001dc

080046c4 <SPI_QCA7000_Read_WRBUF_SPC_AVA>:

uint16_t SPI_QCA7000_Read_WRBUF_SPC_AVA(void){
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
    uint16_t len;
    uint8_t i;
    i = 0;
 80046ca:	2300      	movs	r3, #0
 80046cc:	71fb      	strb	r3, [r7, #7]
    spi_tx_buffer[i++] = 0xC2;
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	71fa      	strb	r2, [r7, #7]
 80046d4:	461a      	mov	r2, r3
 80046d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004744 <SPI_QCA7000_Read_WRBUF_SPC_AVA+0x80>)
 80046d8:	21c2      	movs	r1, #194	@ 0xc2
 80046da:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	71fa      	strb	r2, [r7, #7]
 80046e2:	461a      	mov	r2, r3
 80046e4:	4b17      	ldr	r3, [pc, #92]	@ (8004744 <SPI_QCA7000_Read_WRBUF_SPC_AVA+0x80>)
 80046e6:	2100      	movs	r1, #0
 80046e8:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	71fa      	strb	r2, [r7, #7]
 80046f0:	461a      	mov	r2, r3
 80046f2:	4b14      	ldr	r3, [pc, #80]	@ (8004744 <SPI_QCA7000_Read_WRBUF_SPC_AVA+0x80>)
 80046f4:	2100      	movs	r1, #0
 80046f6:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 80046f8:	79fb      	ldrb	r3, [r7, #7]
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	71fa      	strb	r2, [r7, #7]
 80046fe:	461a      	mov	r2, r3
 8004700:	4b10      	ldr	r3, [pc, #64]	@ (8004744 <SPI_QCA7000_Read_WRBUF_SPC_AVA+0x80>)
 8004702:	2100      	movs	r1, #0
 8004704:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	b29a      	uxth	r2, r3
 800470a:	4b0f      	ldr	r3, [pc, #60]	@ (8004748 <SPI_QCA7000_Read_WRBUF_SPC_AVA+0x84>)
 800470c:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 800470e:	f7fb fead 	bl	800046c <SPI_Transmit_Receive>

    len = spi_rx_buffer[2];
 8004712:	4b0e      	ldr	r3, [pc, #56]	@ (800474c <SPI_QCA7000_Read_WRBUF_SPC_AVA+0x88>)
 8004714:	789b      	ldrb	r3, [r3, #2]
 8004716:	80bb      	strh	r3, [r7, #4]
    len <<= 8;
 8004718:	88bb      	ldrh	r3, [r7, #4]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	80bb      	strh	r3, [r7, #4]
    len += spi_rx_buffer[3];
 800471e:	4b0b      	ldr	r3, [pc, #44]	@ (800474c <SPI_QCA7000_Read_WRBUF_SPC_AVA+0x88>)
 8004720:	78db      	ldrb	r3, [r3, #3]
 8004722:	461a      	mov	r2, r3
 8004724:	88bb      	ldrh	r3, [r7, #4]
 8004726:	4413      	add	r3, r2
 8004728:	80bb      	strh	r3, [r7, #4]

    sprintf(serial_output_buffer,"WRBUF_SPC_AVA is %X ", len);
 800472a:	88bb      	ldrh	r3, [r7, #4]
 800472c:	461a      	mov	r2, r3
 800472e:	4908      	ldr	r1, [pc, #32]	@ (8004750 <SPI_QCA7000_Read_WRBUF_SPC_AVA+0x8c>)
 8004730:	4808      	ldr	r0, [pc, #32]	@ (8004754 <SPI_QCA7000_Read_WRBUF_SPC_AVA+0x90>)
 8004732:	f001 ff9b 	bl	800666c <siprintf>
    Serial_Print();
 8004736:	f7fb fe87 	bl	8000448 <Serial_Print>

    return len;
 800473a:	88bb      	ldrh	r3, [r7, #4]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20000a10 	.word	0x20000a10
 8004748:	20001a78 	.word	0x20001a78
 800474c:	20001244 	.word	0x20001244
 8004750:	08007800 	.word	0x08007800
 8004754:	200001dc 	.word	0x200001dc

08004758 <SPI_QCA7000_Read_RDBUF_SPC_AVA>:

uint16_t SPI_QCA7000_Read_RDBUF_SPC_AVA(void){
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
    uint16_t len;
    uint8_t i;
    i = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	71fb      	strb	r3, [r7, #7]
    spi_tx_buffer[i++] = 0xC3;
 8004762:	79fb      	ldrb	r3, [r7, #7]
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	71fa      	strb	r2, [r7, #7]
 8004768:	461a      	mov	r2, r3
 800476a:	4b1b      	ldr	r3, [pc, #108]	@ (80047d8 <SPI_QCA7000_Read_RDBUF_SPC_AVA+0x80>)
 800476c:	21c3      	movs	r1, #195	@ 0xc3
 800476e:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 8004770:	79fb      	ldrb	r3, [r7, #7]
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	71fa      	strb	r2, [r7, #7]
 8004776:	461a      	mov	r2, r3
 8004778:	4b17      	ldr	r3, [pc, #92]	@ (80047d8 <SPI_QCA7000_Read_RDBUF_SPC_AVA+0x80>)
 800477a:	2100      	movs	r1, #0
 800477c:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	71fa      	strb	r2, [r7, #7]
 8004784:	461a      	mov	r2, r3
 8004786:	4b14      	ldr	r3, [pc, #80]	@ (80047d8 <SPI_QCA7000_Read_RDBUF_SPC_AVA+0x80>)
 8004788:	2100      	movs	r1, #0
 800478a:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	71fa      	strb	r2, [r7, #7]
 8004792:	461a      	mov	r2, r3
 8004794:	4b10      	ldr	r3, [pc, #64]	@ (80047d8 <SPI_QCA7000_Read_RDBUF_SPC_AVA+0x80>)
 8004796:	2100      	movs	r1, #0
 8004798:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	b29a      	uxth	r2, r3
 800479e:	4b0f      	ldr	r3, [pc, #60]	@ (80047dc <SPI_QCA7000_Read_RDBUF_SPC_AVA+0x84>)
 80047a0:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 80047a2:	f7fb fe63 	bl	800046c <SPI_Transmit_Receive>

    len = spi_rx_buffer[2];
 80047a6:	4b0e      	ldr	r3, [pc, #56]	@ (80047e0 <SPI_QCA7000_Read_RDBUF_SPC_AVA+0x88>)
 80047a8:	789b      	ldrb	r3, [r3, #2]
 80047aa:	80bb      	strh	r3, [r7, #4]
    len <<= 8;
 80047ac:	88bb      	ldrh	r3, [r7, #4]
 80047ae:	021b      	lsls	r3, r3, #8
 80047b0:	80bb      	strh	r3, [r7, #4]
    len += spi_rx_buffer[3];
 80047b2:	4b0b      	ldr	r3, [pc, #44]	@ (80047e0 <SPI_QCA7000_Read_RDBUF_SPC_AVA+0x88>)
 80047b4:	78db      	ldrb	r3, [r3, #3]
 80047b6:	461a      	mov	r2, r3
 80047b8:	88bb      	ldrh	r3, [r7, #4]
 80047ba:	4413      	add	r3, r2
 80047bc:	80bb      	strh	r3, [r7, #4]

    sprintf(serial_output_buffer,"RDBUF_SPC_AVA is %X ", len);
 80047be:	88bb      	ldrh	r3, [r7, #4]
 80047c0:	461a      	mov	r2, r3
 80047c2:	4908      	ldr	r1, [pc, #32]	@ (80047e4 <SPI_QCA7000_Read_RDBUF_SPC_AVA+0x8c>)
 80047c4:	4808      	ldr	r0, [pc, #32]	@ (80047e8 <SPI_QCA7000_Read_RDBUF_SPC_AVA+0x90>)
 80047c6:	f001 ff51 	bl	800666c <siprintf>
    Serial_Print();
 80047ca:	f7fb fe3d 	bl	8000448 <Serial_Print>

    return len;
 80047ce:	88bb      	ldrh	r3, [r7, #4]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000a10 	.word	0x20000a10
 80047dc:	20001a78 	.word	0x20001a78
 80047e0:	20001244 	.word	0x20001244
 80047e4:	08007818 	.word	0x08007818
 80047e8:	200001dc 	.word	0x200001dc

080047ec <SPI_QCA7000_Write_BFR_SIZE>:

void SPI_QCA7000_Write_BFR_SIZE(uint16_t len){
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	80fb      	strh	r3, [r7, #6]
    uint8_t i;
    i = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	73fb      	strb	r3, [r7, #15]
    spi_tx_buffer[i++] = 0x41;
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	73fa      	strb	r2, [r7, #15]
 8004800:	461a      	mov	r2, r3
 8004802:	4b13      	ldr	r3, [pc, #76]	@ (8004850 <SPI_QCA7000_Write_BFR_SIZE+0x64>)
 8004804:	2141      	movs	r1, #65	@ 0x41
 8004806:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	73fa      	strb	r2, [r7, #15]
 800480e:	461a      	mov	r2, r3
 8004810:	4b0f      	ldr	r3, [pc, #60]	@ (8004850 <SPI_QCA7000_Write_BFR_SIZE+0x64>)
 8004812:	2100      	movs	r1, #0
 8004814:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = len >> 8;
 8004816:	88fb      	ldrh	r3, [r7, #6]
 8004818:	0a1b      	lsrs	r3, r3, #8
 800481a:	b299      	uxth	r1, r3
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	73fa      	strb	r2, [r7, #15]
 8004822:	461a      	mov	r2, r3
 8004824:	b2c9      	uxtb	r1, r1
 8004826:	4b0a      	ldr	r3, [pc, #40]	@ (8004850 <SPI_QCA7000_Write_BFR_SIZE+0x64>)
 8004828:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = (uint8_t)len;
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	73fa      	strb	r2, [r7, #15]
 8004830:	461a      	mov	r2, r3
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	b2d9      	uxtb	r1, r3
 8004836:	4b06      	ldr	r3, [pc, #24]	@ (8004850 <SPI_QCA7000_Write_BFR_SIZE+0x64>)
 8004838:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 800483a:	7bfb      	ldrb	r3, [r7, #15]
 800483c:	b29a      	uxth	r2, r3
 800483e:	4b05      	ldr	r3, [pc, #20]	@ (8004854 <SPI_QCA7000_Write_BFR_SIZE+0x68>)
 8004840:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 8004842:	f7fb fe13 	bl	800046c <SPI_Transmit_Receive>
}
 8004846:	bf00      	nop
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000a10 	.word	0x20000a10
 8004854:	20001a78 	.word	0x20001a78

08004858 <SPI_QCA7000_Disable_REG_INTR_DISABLE>:

void SPI_QCA7000_Disable_REG_INTR_DISABLE(void){
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
    uint8_t i;
    i=0;
 800485e:	2300      	movs	r3, #0
 8004860:	71fb      	strb	r3, [r7, #7]
    spi_tx_buffer[i++] = 0x4D;
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	71fa      	strb	r2, [r7, #7]
 8004868:	461a      	mov	r2, r3
 800486a:	4b11      	ldr	r3, [pc, #68]	@ (80048b0 <SPI_QCA7000_Disable_REG_INTR_DISABLE+0x58>)
 800486c:	214d      	movs	r1, #77	@ 0x4d
 800486e:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 8004870:	79fb      	ldrb	r3, [r7, #7]
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	71fa      	strb	r2, [r7, #7]
 8004876:	461a      	mov	r2, r3
 8004878:	4b0d      	ldr	r3, [pc, #52]	@ (80048b0 <SPI_QCA7000_Disable_REG_INTR_DISABLE+0x58>)
 800487a:	2100      	movs	r1, #0
 800487c:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	71fa      	strb	r2, [r7, #7]
 8004884:	461a      	mov	r2, r3
 8004886:	4b0a      	ldr	r3, [pc, #40]	@ (80048b0 <SPI_QCA7000_Disable_REG_INTR_DISABLE+0x58>)
 8004888:	2100      	movs	r1, #0
 800488a:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	71fa      	strb	r2, [r7, #7]
 8004892:	461a      	mov	r2, r3
 8004894:	4b06      	ldr	r3, [pc, #24]	@ (80048b0 <SPI_QCA7000_Disable_REG_INTR_DISABLE+0x58>)
 8004896:	2100      	movs	r1, #0
 8004898:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	b29a      	uxth	r2, r3
 800489e:	4b05      	ldr	r3, [pc, #20]	@ (80048b4 <SPI_QCA7000_Disable_REG_INTR_DISABLE+0x5c>)
 80048a0:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 80048a2:	f7fb fde3 	bl	800046c <SPI_Transmit_Receive>

//    sprintf(serial_output_buffer, "REG_INTR_ENABLE is disabled ");
//    Serial_Print();
}
 80048a6:	bf00      	nop
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000a10 	.word	0x20000a10
 80048b4:	20001a78 	.word	0x20001a78

080048b8 <SPI_QCA7000_Enable_REG_INTR_ENABLE>:

void SPI_QCA7000_Enable_REG_INTR_ENABLE(void){
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
    uint8_t i;
    i=0;
 80048be:	2300      	movs	r3, #0
 80048c0:	71fb      	strb	r3, [r7, #7]
    spi_tx_buffer[i++] = 0x4D;
 80048c2:	79fb      	ldrb	r3, [r7, #7]
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	71fa      	strb	r2, [r7, #7]
 80048c8:	461a      	mov	r2, r3
 80048ca:	4b11      	ldr	r3, [pc, #68]	@ (8004910 <SPI_QCA7000_Enable_REG_INTR_ENABLE+0x58>)
 80048cc:	214d      	movs	r1, #77	@ 0x4d
 80048ce:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 80048d0:	79fb      	ldrb	r3, [r7, #7]
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	71fa      	strb	r2, [r7, #7]
 80048d6:	461a      	mov	r2, r3
 80048d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004910 <SPI_QCA7000_Enable_REG_INTR_ENABLE+0x58>)
 80048da:	2100      	movs	r1, #0
 80048dc:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	71fa      	strb	r2, [r7, #7]
 80048e4:	461a      	mov	r2, r3
 80048e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004910 <SPI_QCA7000_Enable_REG_INTR_ENABLE+0x58>)
 80048e8:	2100      	movs	r1, #0
 80048ea:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x47;
 80048ec:	79fb      	ldrb	r3, [r7, #7]
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	71fa      	strb	r2, [r7, #7]
 80048f2:	461a      	mov	r2, r3
 80048f4:	4b06      	ldr	r3, [pc, #24]	@ (8004910 <SPI_QCA7000_Enable_REG_INTR_ENABLE+0x58>)
 80048f6:	2147      	movs	r1, #71	@ 0x47
 80048f8:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	4b05      	ldr	r3, [pc, #20]	@ (8004914 <SPI_QCA7000_Enable_REG_INTR_ENABLE+0x5c>)
 8004900:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 8004902:	f7fb fdb3 	bl	800046c <SPI_Transmit_Receive>

//    sprintf(serial_output_buffer, "REG_INTR_ENABLE is enabled ");
//    Serial_Print();
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000a10 	.word	0x20000a10
 8004914:	20001a78 	.word	0x20001a78

08004918 <SPI_QCA7000_Read_REG_INTR_CAUSE>:

uint16_t SPI_QCA7000_Read_REG_INTR_CAUSE(void){
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
    uint16_t cause;
    uint8_t i;
    i=0;
 800491e:	2300      	movs	r3, #0
 8004920:	71fb      	strb	r3, [r7, #7]
    spi_tx_buffer[i++] = 0xCC;
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	71fa      	strb	r2, [r7, #7]
 8004928:	461a      	mov	r2, r3
 800492a:	4b42      	ldr	r3, [pc, #264]	@ (8004a34 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x11c>)
 800492c:	21cc      	movs	r1, #204	@ 0xcc
 800492e:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 8004930:	79fb      	ldrb	r3, [r7, #7]
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	71fa      	strb	r2, [r7, #7]
 8004936:	461a      	mov	r2, r3
 8004938:	4b3e      	ldr	r3, [pc, #248]	@ (8004a34 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x11c>)
 800493a:	2100      	movs	r1, #0
 800493c:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	71fa      	strb	r2, [r7, #7]
 8004944:	461a      	mov	r2, r3
 8004946:	4b3b      	ldr	r3, [pc, #236]	@ (8004a34 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x11c>)
 8004948:	2100      	movs	r1, #0
 800494a:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	71fa      	strb	r2, [r7, #7]
 8004952:	461a      	mov	r2, r3
 8004954:	4b37      	ldr	r3, [pc, #220]	@ (8004a34 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x11c>)
 8004956:	2100      	movs	r1, #0
 8004958:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 800495a:	79fb      	ldrb	r3, [r7, #7]
 800495c:	b29a      	uxth	r2, r3
 800495e:	4b36      	ldr	r3, [pc, #216]	@ (8004a38 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x120>)
 8004960:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 8004962:	f7fb fd83 	bl	800046c <SPI_Transmit_Receive>

    cause = spi_rx_buffer[2];
 8004966:	4b35      	ldr	r3, [pc, #212]	@ (8004a3c <SPI_QCA7000_Read_REG_INTR_CAUSE+0x124>)
 8004968:	789b      	ldrb	r3, [r3, #2]
 800496a:	80bb      	strh	r3, [r7, #4]
    cause <<= 8;
 800496c:	88bb      	ldrh	r3, [r7, #4]
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	80bb      	strh	r3, [r7, #4]
    cause += spi_rx_buffer[3];
 8004972:	4b32      	ldr	r3, [pc, #200]	@ (8004a3c <SPI_QCA7000_Read_REG_INTR_CAUSE+0x124>)
 8004974:	78db      	ldrb	r3, [r3, #3]
 8004976:	461a      	mov	r2, r3
 8004978:	88bb      	ldrh	r3, [r7, #4]
 800497a:	4413      	add	r3, r2
 800497c:	80bb      	strh	r3, [r7, #4]

    if(cause & 0x0400){
 800497e:	88bb      	ldrh	r3, [r7, #4]
 8004980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004984:	2b00      	cmp	r3, #0
 8004986:	d007      	beq.n	8004998 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x80>
    	sprintf(serial_output_buffer, "REG_INTR_CAUSE is %X, SPI_INT_WRBUF_BELOW_WM ", cause);
 8004988:	88bb      	ldrh	r3, [r7, #4]
 800498a:	461a      	mov	r2, r3
 800498c:	492c      	ldr	r1, [pc, #176]	@ (8004a40 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x128>)
 800498e:	482d      	ldr	r0, [pc, #180]	@ (8004a44 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x12c>)
 8004990:	f001 fe6c 	bl	800666c <siprintf>
    	Serial_Print();
 8004994:	f7fb fd58 	bl	8000448 <Serial_Print>
    }
    if(cause & 0x0040){
 8004998:	88bb      	ldrh	r3, [r7, #4]
 800499a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d009      	beq.n	80049b6 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x9e>
    	sprintf(serial_output_buffer, "REG_INTR_CAUSE is %X, SPI_INT_CPU_ON ", cause);
 80049a2:	88bb      	ldrh	r3, [r7, #4]
 80049a4:	461a      	mov	r2, r3
 80049a6:	4928      	ldr	r1, [pc, #160]	@ (8004a48 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x130>)
 80049a8:	4826      	ldr	r0, [pc, #152]	@ (8004a44 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x12c>)
 80049aa:	f001 fe5f 	bl	800666c <siprintf>
    	SPI_QCA7000_Init_Setup();
 80049ae:	f000 f8ff 	bl	8004bb0 <SPI_QCA7000_Init_Setup>
    	Serial_Print();
 80049b2:	f7fb fd49 	bl	8000448 <Serial_Print>
    }
    if(cause & 0x0008){
 80049b6:	88bb      	ldrh	r3, [r7, #4]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d007      	beq.n	80049d0 <SPI_QCA7000_Read_REG_INTR_CAUSE+0xb8>
    	sprintf(serial_output_buffer, "REG_INTR_CAUSE is %X, SPI_INT_ADDR_ERR ", cause);
 80049c0:	88bb      	ldrh	r3, [r7, #4]
 80049c2:	461a      	mov	r2, r3
 80049c4:	4921      	ldr	r1, [pc, #132]	@ (8004a4c <SPI_QCA7000_Read_REG_INTR_CAUSE+0x134>)
 80049c6:	481f      	ldr	r0, [pc, #124]	@ (8004a44 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x12c>)
 80049c8:	f001 fe50 	bl	800666c <siprintf>
    	Serial_Print();
 80049cc:	f7fb fd3c 	bl	8000448 <Serial_Print>
    }
    if(cause & 0x0004){
 80049d0:	88bb      	ldrh	r3, [r7, #4]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d009      	beq.n	80049ee <SPI_QCA7000_Read_REG_INTR_CAUSE+0xd6>
    	sprintf(serial_output_buffer, "REG_INTR_CAUSE is %X, SPI_INT_WRBUF_ERR ", cause);
 80049da:	88bb      	ldrh	r3, [r7, #4]
 80049dc:	461a      	mov	r2, r3
 80049de:	491c      	ldr	r1, [pc, #112]	@ (8004a50 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x138>)
 80049e0:	4818      	ldr	r0, [pc, #96]	@ (8004a44 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x12c>)
 80049e2:	f001 fe43 	bl	800666c <siprintf>
    	SPI_QCA7000_Write_Config();
 80049e6:	f000 f8a9 	bl	8004b3c <SPI_QCA7000_Write_Config>
    	Serial_Print();
 80049ea:	f7fb fd2d 	bl	8000448 <Serial_Print>
    }
    if(cause & 0x0002){
 80049ee:	88bb      	ldrh	r3, [r7, #4]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d009      	beq.n	8004a0c <SPI_QCA7000_Read_REG_INTR_CAUSE+0xf4>
    	sprintf(serial_output_buffer, "REG_INTR_CAUSE is %X, SPI_INT_RDBUF_ERR ", cause);
 80049f8:	88bb      	ldrh	r3, [r7, #4]
 80049fa:	461a      	mov	r2, r3
 80049fc:	4915      	ldr	r1, [pc, #84]	@ (8004a54 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x13c>)
 80049fe:	4811      	ldr	r0, [pc, #68]	@ (8004a44 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x12c>)
 8004a00:	f001 fe34 	bl	800666c <siprintf>
    	SPI_QCA7000_Write_Config();
 8004a04:	f000 f89a 	bl	8004b3c <SPI_QCA7000_Write_Config>
    	Serial_Print();
 8004a08:	f7fb fd1e 	bl	8000448 <Serial_Print>
    }
    if(cause & 0x0001){
 8004a0c:	88bb      	ldrh	r3, [r7, #4]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d009      	beq.n	8004a2a <SPI_QCA7000_Read_REG_INTR_CAUSE+0x112>
    	sprintf(serial_output_buffer, "REG_INTR_CAUSE is %X, SPI_INT_PKT_AVLBL ", cause);
 8004a16:	88bb      	ldrh	r3, [r7, #4]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	490f      	ldr	r1, [pc, #60]	@ (8004a58 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x140>)
 8004a1c:	4809      	ldr	r0, [pc, #36]	@ (8004a44 <SPI_QCA7000_Read_REG_INTR_CAUSE+0x12c>)
 8004a1e:	f001 fe25 	bl	800666c <siprintf>
    	Serial_Print();
 8004a22:	f7fb fd11 	bl	8000448 <Serial_Print>
    	SPI_QCA7000_Read_Eth_Frame();
 8004a26:	f000 f9fb 	bl	8004e20 <SPI_QCA7000_Read_Eth_Frame>
    }

    return cause;
 8004a2a:	88bb      	ldrh	r3, [r7, #4]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20000a10 	.word	0x20000a10
 8004a38:	20001a78 	.word	0x20001a78
 8004a3c:	20001244 	.word	0x20001244
 8004a40:	08007830 	.word	0x08007830
 8004a44:	200001dc 	.word	0x200001dc
 8004a48:	08007860 	.word	0x08007860
 8004a4c:	08007888 	.word	0x08007888
 8004a50:	080078b0 	.word	0x080078b0
 8004a54:	080078dc 	.word	0x080078dc
 8004a58:	08007908 	.word	0x08007908

08004a5c <SPI_QCA7000_Confirm_REG_INTR_CAUSE>:

void SPI_QCA7000_Confirm_REG_INTR_CAUSE(uint16_t cause){
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	4603      	mov	r3, r0
 8004a64:	80fb      	strh	r3, [r7, #6]
    uint8_t i;
    i=0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	73fb      	strb	r3, [r7, #15]
    spi_tx_buffer[i++] = 0x4C;
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	73fa      	strb	r2, [r7, #15]
 8004a70:	461a      	mov	r2, r3
 8004a72:	4b13      	ldr	r3, [pc, #76]	@ (8004ac0 <SPI_QCA7000_Confirm_REG_INTR_CAUSE+0x64>)
 8004a74:	214c      	movs	r1, #76	@ 0x4c
 8004a76:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	73fa      	strb	r2, [r7, #15]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac0 <SPI_QCA7000_Confirm_REG_INTR_CAUSE+0x64>)
 8004a82:	2100      	movs	r1, #0
 8004a84:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = cause >> 8;
 8004a86:	88fb      	ldrh	r3, [r7, #6]
 8004a88:	0a1b      	lsrs	r3, r3, #8
 8004a8a:	b299      	uxth	r1, r3
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	73fa      	strb	r2, [r7, #15]
 8004a92:	461a      	mov	r2, r3
 8004a94:	b2c9      	uxtb	r1, r1
 8004a96:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac0 <SPI_QCA7000_Confirm_REG_INTR_CAUSE+0x64>)
 8004a98:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = (uint8_t)cause;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	73fa      	strb	r2, [r7, #15]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	b2d9      	uxtb	r1, r3
 8004aa6:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <SPI_QCA7000_Confirm_REG_INTR_CAUSE+0x64>)
 8004aa8:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	4b05      	ldr	r3, [pc, #20]	@ (8004ac4 <SPI_QCA7000_Confirm_REG_INTR_CAUSE+0x68>)
 8004ab0:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 8004ab2:	f7fb fcdb 	bl	800046c <SPI_Transmit_Receive>
}
 8004ab6:	bf00      	nop
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000a10 	.word	0x20000a10
 8004ac4:	20001a78 	.word	0x20001a78

08004ac8 <SPI_QCA7000_Reset_Config>:

void SPI_QCA7000_Reset_Config(void){
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
    uint8_t i;
    i = 0;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	71fb      	strb	r3, [r7, #7]
    spi_tx_buffer[i++] = 0x44;
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	71fa      	strb	r2, [r7, #7]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4b14      	ldr	r3, [pc, #80]	@ (8004b2c <SPI_QCA7000_Reset_Config+0x64>)
 8004adc:	2144      	movs	r1, #68	@ 0x44
 8004ade:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	71fa      	strb	r2, [r7, #7]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	4b10      	ldr	r3, [pc, #64]	@ (8004b2c <SPI_QCA7000_Reset_Config+0x64>)
 8004aea:	2100      	movs	r1, #0
 8004aec:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	71fa      	strb	r2, [r7, #7]
 8004af4:	461a      	mov	r2, r3
 8004af6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b2c <SPI_QCA7000_Reset_Config+0x64>)
 8004af8:	2100      	movs	r1, #0
 8004afa:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x40;
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	71fa      	strb	r2, [r7, #7]
 8004b02:	461a      	mov	r2, r3
 8004b04:	4b09      	ldr	r3, [pc, #36]	@ (8004b2c <SPI_QCA7000_Reset_Config+0x64>)
 8004b06:	2140      	movs	r1, #64	@ 0x40
 8004b08:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	4b08      	ldr	r3, [pc, #32]	@ (8004b30 <SPI_QCA7000_Reset_Config+0x68>)
 8004b10:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 8004b12:	f7fb fcab 	bl	800046c <SPI_Transmit_Receive>

    sprintf(serial_output_buffer, "Reset Configuration ");
 8004b16:	4907      	ldr	r1, [pc, #28]	@ (8004b34 <SPI_QCA7000_Reset_Config+0x6c>)
 8004b18:	4807      	ldr	r0, [pc, #28]	@ (8004b38 <SPI_QCA7000_Reset_Config+0x70>)
 8004b1a:	f001 fda7 	bl	800666c <siprintf>
    Serial_Print();
 8004b1e:	f7fb fc93 	bl	8000448 <Serial_Print>
}
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20000a10 	.word	0x20000a10
 8004b30:	20001a78 	.word	0x20001a78
 8004b34:	08007934 	.word	0x08007934
 8004b38:	200001dc 	.word	0x200001dc

08004b3c <SPI_QCA7000_Write_Config>:

void SPI_QCA7000_Write_Config(void){
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
    uint8_t i;
    i = 0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	71fb      	strb	r3, [r7, #7]
    spi_tx_buffer[i++] = 0x44;
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	71fa      	strb	r2, [r7, #7]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4b14      	ldr	r3, [pc, #80]	@ (8004ba0 <SPI_QCA7000_Write_Config+0x64>)
 8004b50:	2144      	movs	r1, #68	@ 0x44
 8004b52:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	71fa      	strb	r2, [r7, #7]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	4b10      	ldr	r3, [pc, #64]	@ (8004ba0 <SPI_QCA7000_Write_Config+0x64>)
 8004b5e:	2100      	movs	r1, #0
 8004b60:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 8004b62:	79fb      	ldrb	r3, [r7, #7]
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	71fa      	strb	r2, [r7, #7]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba0 <SPI_QCA7000_Write_Config+0x64>)
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	71fa      	strb	r2, [r7, #7]
 8004b76:	461a      	mov	r2, r3
 8004b78:	4b09      	ldr	r3, [pc, #36]	@ (8004ba0 <SPI_QCA7000_Write_Config+0x64>)
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	5499      	strb	r1, [r3, r2]
    spi_data_size = i;
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	4b08      	ldr	r3, [pc, #32]	@ (8004ba4 <SPI_QCA7000_Write_Config+0x68>)
 8004b84:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 8004b86:	f7fb fc71 	bl	800046c <SPI_Transmit_Receive>

    sprintf(serial_output_buffer, "Set Configuration ");
 8004b8a:	4907      	ldr	r1, [pc, #28]	@ (8004ba8 <SPI_QCA7000_Write_Config+0x6c>)
 8004b8c:	4807      	ldr	r0, [pc, #28]	@ (8004bac <SPI_QCA7000_Write_Config+0x70>)
 8004b8e:	f001 fd6d 	bl	800666c <siprintf>
    Serial_Print();
 8004b92:	f7fb fc59 	bl	8000448 <Serial_Print>
}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000a10 	.word	0x20000a10
 8004ba4:	20001a78 	.word	0x20001a78
 8004ba8:	0800794c 	.word	0x0800794c
 8004bac:	200001dc 	.word	0x200001dc

08004bb0 <SPI_QCA7000_Init_Setup>:

void SPI_QCA7000_Init_Setup(void){
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
	uint16_t sig;
	sig = SPI_QCA7000_Read_Signature();
 8004bb6:	f7ff fd3b 	bl	8004630 <SPI_QCA7000_Read_Signature>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	80fb      	strh	r3, [r7, #6]
	sig = 0x0000;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	80fb      	strh	r3, [r7, #6]
	sig = SPI_QCA7000_Read_Signature();
 8004bc2:	f7ff fd35 	bl	8004630 <SPI_QCA7000_Read_Signature>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	80fb      	strh	r3, [r7, #6]
	if(sig == 0xAA55) SPI_QCA7000_Enable_REG_INTR_ENABLE();
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d101      	bne.n	8004bd8 <SPI_QCA7000_Init_Setup+0x28>
 8004bd4:	f7ff fe70 	bl	80048b8 <SPI_QCA7000_Enable_REG_INTR_ENABLE>
}
 8004bd8:	bf00      	nop
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <SPI_QCA7000_Check_Rx_Data>:

void SPI_QCA7000_Check_Rx_Data(uint16_t available_bytes){
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	80fb      	strh	r3, [r7, #6]
	 uint16_t  spi_len, eth_len;
	 uint8_t *p;
	 uint8_t  blDone = 0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	74fb      	strb	r3, [r7, #19]
//	 uint8_t counterOfEthFramesInSpiFrame;
//	 counterOfEthFramesInSpiFrame = 0;
	 p = spi_rx_buffer;
 8004bee:	4b59      	ldr	r3, [pc, #356]	@ (8004d54 <SPI_QCA7000_Check_Rx_Data+0x174>)
 8004bf0:	617b      	str	r3, [r7, #20]

	 while (!blDone) {  /* The SPI receive buffer may contain multiple Ethernet frames. Run through all. */
 8004bf2:	e0a6      	b.n	8004d42 <SPI_QCA7000_Check_Rx_Data+0x162>
	         2 byte reserved 00 00
	         payload
	         2 byte End of frame, 55 55 */
	       /* The higher 2 bytes of the len are assumed to be 0. */
	       /* The lower two bytes of the "outer" len, big endian: */
	       spi_len = p[2]; spi_len<<=8; spi_len+=p[3];
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	3302      	adds	r3, #2
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	823b      	strh	r3, [r7, #16]
 8004bfc:	8a3b      	ldrh	r3, [r7, #16]
 8004bfe:	021b      	lsls	r3, r3, #8
 8004c00:	823b      	strh	r3, [r7, #16]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	3303      	adds	r3, #3
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	8a3b      	ldrh	r3, [r7, #16]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	823b      	strh	r3, [r7, #16]
	       /* The "inner" len, little endian. */
	       eth_len = p[9]; eth_len<<=8; eth_len+=p[8];
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	3309      	adds	r3, #9
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	81fb      	strh	r3, [r7, #14]
 8004c18:	89fb      	ldrh	r3, [r7, #14]
 8004c1a:	021b      	lsls	r3, r3, #8
 8004c1c:	81fb      	strh	r3, [r7, #14]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	3308      	adds	r3, #8
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	461a      	mov	r2, r3
 8004c26:	89fb      	ldrh	r3, [r7, #14]
 8004c28:	4413      	add	r3, r2
 8004c2a:	81fb      	strh	r3, [r7, #14]
	       if ((p[4]=0xAA) && (p[5]=0xAA) && (p[6]=0xAA) && (p[7]=0xAA)
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	22aa      	movs	r2, #170	@ 0xaa
 8004c32:	701a      	strb	r2, [r3, #0]
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	3305      	adds	r3, #5
 8004c38:	22aa      	movs	r2, #170	@ 0xaa
 8004c3a:	701a      	strb	r2, [r3, #0]
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	3306      	adds	r3, #6
 8004c40:	22aa      	movs	r2, #170	@ 0xaa
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	3307      	adds	r3, #7
 8004c48:	22aa      	movs	r2, #170	@ 0xaa
 8004c4a:	701a      	strb	r2, [r3, #0]
	             && (eth_len+10 == spi_len)) {
 8004c4c:	89fb      	ldrh	r3, [r7, #14]
 8004c4e:	f103 020a 	add.w	r2, r3, #10
 8004c52:	8a3b      	ldrh	r3, [r7, #16]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d172      	bne.n	8004d3e <SPI_QCA7000_Check_Rx_Data+0x15e>
	           //counterOfEthFramesInSpiFrame++;
	           /* The start of frame and the two length informations are plausible. Copy the payload to the eth receive buffer. */
	    	   eth_rx_size = eth_len;
 8004c58:	4a3f      	ldr	r2, [pc, #252]	@ (8004d58 <SPI_QCA7000_Check_Rx_Data+0x178>)
 8004c5a:	89fb      	ldrh	r3, [r7, #14]
 8004c5c:	8013      	strh	r3, [r2, #0]
	           /* but limit the length, to avoid buffer overflow */
//	           if (eth_rx_size > ETH_RECEIVE_BUFFER_SIZE) {
//	               eth_rx_size = ETH_RECEIVE_BUFFER_SIZE;
//	               debugCounter_cutted_myethreceivebufferLen++;
//	           }
	           memcpy(eth_rx_buffer, &p[12], eth_rx_size);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	330c      	adds	r3, #12
 8004c62:	4a3d      	ldr	r2, [pc, #244]	@ (8004d58 <SPI_QCA7000_Check_Rx_Data+0x178>)
 8004c64:	8812      	ldrh	r2, [r2, #0]
 8004c66:	4619      	mov	r1, r3
 8004c68:	483c      	ldr	r0, [pc, #240]	@ (8004d5c <SPI_QCA7000_Check_Rx_Data+0x17c>)
 8004c6a:	f001 fdde 	bl	800682a <memcpy>
	           /* We received an ethernet package. Determine its type, and dispatch it to the related handler. */
	           uint16_t mtype = HPGP_Get_MTYPE(eth_rx_buffer);
 8004c6e:	483b      	ldr	r0, [pc, #236]	@ (8004d5c <SPI_QCA7000_Check_Rx_Data+0x17c>)
 8004c70:	f000 f958 	bl	8004f24 <HPGP_Get_MTYPE>
 8004c74:	4603      	mov	r3, r0
 8004c76:	81bb      	strh	r3, [r7, #12]
	           if (mtype == 0x88E1) {
 8004c78:	89bb      	ldrh	r3, [r7, #12]
 8004c7a:	f648 02e1 	movw	r2, #35041	@ 0x88e1
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d105      	bne.n	8004c8e <SPI_QCA7000_Check_Rx_Data+0xae>
	        	   /* it is a HomePlug message */
                   //Serial.println("Its a HomePlug message.");
                   sprintf(serial_output_buffer, "Its a HomePlug message.");
 8004c82:	4937      	ldr	r1, [pc, #220]	@ (8004d60 <SPI_QCA7000_Check_Rx_Data+0x180>)
 8004c84:	4837      	ldr	r0, [pc, #220]	@ (8004d64 <SPI_QCA7000_Check_Rx_Data+0x184>)
 8004c86:	f001 fcf1 	bl	800666c <siprintf>
                   Serial_Print();
 8004c8a:	f7fb fbdd 	bl	8000448 <Serial_Print>
//	           if(eth_rx_buffer[15] == 0x64 && eth_rx_buffer[16] == 0x60){
//	        	   HPGP_EVSE_Respond_SLAC_PARM_CNF();
//	        	   SPI_QCA7000_Send_Eth_Frame();
//	           }
	           /*-------------------------*/
	           available_bytes = available_bytes - spi_len - 4;
 8004c8e:	88fa      	ldrh	r2, [r7, #6]
 8004c90:	8a3b      	ldrh	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	3b04      	subs	r3, #4
 8004c98:	80fb      	strh	r3, [r7, #6]
	           p += spi_len+4;
 8004c9a:	8a3b      	ldrh	r3, [r7, #16]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]
	           if(available_bytes == 0){
 8004ca4:	88fb      	ldrh	r3, [r7, #6]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <SPI_QCA7000_Check_Rx_Data+0xd8>
                   sprintf(serial_output_buffer, "Only one frame! ");
 8004caa:	492f      	ldr	r1, [pc, #188]	@ (8004d68 <SPI_QCA7000_Check_Rx_Data+0x188>)
 8004cac:	482d      	ldr	r0, [pc, #180]	@ (8004d64 <SPI_QCA7000_Check_Rx_Data+0x184>)
 8004cae:	f001 fcdd 	bl	800666c <siprintf>
                   Serial_Print();
 8004cb2:	f7fb fbc9 	bl	8000448 <Serial_Print>
 8004cb6:	e03f      	b.n	8004d38 <SPI_QCA7000_Check_Rx_Data+0x158>
	           }
	           else if(available_bytes != 0){
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d03c      	beq.n	8004d38 <SPI_QCA7000_Check_Rx_Data+0x158>
	        	   spi_len = p[2]; spi_len<<=8; spi_len+=p[3];
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	3302      	adds	r3, #2
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	823b      	strh	r3, [r7, #16]
 8004cc6:	8a3b      	ldrh	r3, [r7, #16]
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	823b      	strh	r3, [r7, #16]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	3303      	adds	r3, #3
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	8a3b      	ldrh	r3, [r7, #16]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	823b      	strh	r3, [r7, #16]
	        	   eth_len = p[9]; eth_len<<=8; eth_len+=p[8];
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	3309      	adds	r3, #9
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	81fb      	strh	r3, [r7, #14]
 8004ce2:	89fb      	ldrh	r3, [r7, #14]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	81fb      	strh	r3, [r7, #14]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	3308      	adds	r3, #8
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	89fb      	ldrh	r3, [r7, #14]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	81fb      	strh	r3, [r7, #14]
	        	   if ((p[4]=0xAA) && (p[5]=0xAA) && (p[6]=0xAA) && (p[7]=0xAA)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	22aa      	movs	r2, #170	@ 0xaa
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	3305      	adds	r3, #5
 8004d02:	22aa      	movs	r2, #170	@ 0xaa
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	3306      	adds	r3, #6
 8004d0a:	22aa      	movs	r2, #170	@ 0xaa
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	3307      	adds	r3, #7
 8004d12:	22aa      	movs	r2, #170	@ 0xaa
 8004d14:	701a      	strb	r2, [r3, #0]
	        	   	             && (eth_len+10 == spi_len)) {
 8004d16:	89fb      	ldrh	r3, [r7, #14]
 8004d18:	f103 020a 	add.w	r2, r3, #10
 8004d1c:	8a3b      	ldrh	r3, [r7, #16]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d102      	bne.n	8004d28 <SPI_QCA7000_Check_Rx_Data+0x148>
	        		   eth_2nd_rx_size = eth_len;
 8004d22:	4a12      	ldr	r2, [pc, #72]	@ (8004d6c <SPI_QCA7000_Check_Rx_Data+0x18c>)
 8004d24:	89fb      	ldrh	r3, [r7, #14]
 8004d26:	8013      	strh	r3, [r2, #0]
	           	   }
	        	   memcpy(eth_2nd_rx_buffer, &p[12], eth_2nd_rx_size);
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	330c      	adds	r3, #12
 8004d2c:	4a0f      	ldr	r2, [pc, #60]	@ (8004d6c <SPI_QCA7000_Check_Rx_Data+0x18c>)
 8004d2e:	8812      	ldrh	r2, [r2, #0]
 8004d30:	4619      	mov	r1, r3
 8004d32:	480f      	ldr	r0, [pc, #60]	@ (8004d70 <SPI_QCA7000_Check_Rx_Data+0x190>)
 8004d34:	f001 fd79 	bl	800682a <memcpy>
//	             Serial.print(String(p[9], HEX) + " ");
//	             */
//	           } else {
//	             blDone=1;
//	           }
	           blDone=1;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	74fb      	strb	r3, [r7, #19]
	             && (eth_len+10 == spi_len)) {
 8004d3c:	e001      	b.n	8004d42 <SPI_QCA7000_Check_Rx_Data+0x162>
	     }
	     else {
	         /* no valid header -> end */
	         blDone=1;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	74fb      	strb	r3, [r7, #19]
	 while (!blDone) {  /* The SPI receive buffer may contain multiple Ethernet frames. Run through all. */
 8004d42:	7cfb      	ldrb	r3, [r7, #19]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f43f af55 	beq.w	8004bf4 <SPI_QCA7000_Check_Rx_Data+0x14>
	     }
	 }
}
 8004d4a:	bf00      	nop
 8004d4c:	bf00      	nop
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20001244 	.word	0x20001244
 8004d58:	20001c72 	.word	0x20001c72
 8004d5c:	20001b78 	.word	0x20001b78
 8004d60:	08007960 	.word	0x08007960
 8004d64:	200001dc 	.word	0x200001dc
 8004d68:	08007978 	.word	0x08007978
 8004d6c:	20001d6e 	.word	0x20001d6e
 8004d70:	20001c74 	.word	0x20001c74

08004d74 <SPI_QCA7000_Send_Eth_Frame>:

void SPI_QCA7000_Send_Eth_Frame(void){
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
    SPI_QCA7000_Read_WRBUF_SPC_AVA();
 8004d78:	f7ff fca4 	bl	80046c4 <SPI_QCA7000_Read_WRBUF_SPC_AVA>
    SPI_QCA7000_Write_BFR_SIZE(eth_tx_size + 10);
 8004d7c:	4b23      	ldr	r3, [pc, #140]	@ (8004e0c <SPI_QCA7000_Send_Eth_Frame+0x98>)
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	330a      	adds	r3, #10
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff fd31 	bl	80047ec <SPI_QCA7000_Write_BFR_SIZE>

    spi_tx_buffer[0] = 0x00;
 8004d8a:	4b21      	ldr	r3, [pc, #132]	@ (8004e10 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
    spi_tx_buffer[1] = 0x00;
 8004d90:	4b1f      	ldr	r3, [pc, #124]	@ (8004e10 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	705a      	strb	r2, [r3, #1]
    spi_tx_buffer[2] = 0xAA;
 8004d96:	4b1e      	ldr	r3, [pc, #120]	@ (8004e10 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 8004d98:	22aa      	movs	r2, #170	@ 0xaa
 8004d9a:	709a      	strb	r2, [r3, #2]
    spi_tx_buffer[3] = 0xAA;
 8004d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004e10 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 8004d9e:	22aa      	movs	r2, #170	@ 0xaa
 8004da0:	70da      	strb	r2, [r3, #3]
    spi_tx_buffer[4] = 0xAA;
 8004da2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e10 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 8004da4:	22aa      	movs	r2, #170	@ 0xaa
 8004da6:	711a      	strb	r2, [r3, #4]
    spi_tx_buffer[5] = 0xAA;
 8004da8:	4b19      	ldr	r3, [pc, #100]	@ (8004e10 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 8004daa:	22aa      	movs	r2, #170	@ 0xaa
 8004dac:	715a      	strb	r2, [r3, #5]
    spi_tx_buffer[6] = (uint8_t)eth_tx_size;
 8004dae:	4b17      	ldr	r3, [pc, #92]	@ (8004e0c <SPI_QCA7000_Send_Eth_Frame+0x98>)
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	4b16      	ldr	r3, [pc, #88]	@ (8004e10 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 8004db6:	719a      	strb	r2, [r3, #6]
    spi_tx_buffer[7] = eth_tx_size >> 8;
 8004db8:	4b14      	ldr	r3, [pc, #80]	@ (8004e0c <SPI_QCA7000_Send_Eth_Frame+0x98>)
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	0a1b      	lsrs	r3, r3, #8
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	4b13      	ldr	r3, [pc, #76]	@ (8004e10 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 8004dc4:	71da      	strb	r2, [r3, #7]
    spi_tx_buffer[8] = 0x00;
 8004dc6:	4b12      	ldr	r3, [pc, #72]	@ (8004e10 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	721a      	strb	r2, [r3, #8]
    spi_tx_buffer[9] = 0x00;
 8004dcc:	4b10      	ldr	r3, [pc, #64]	@ (8004e10 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	725a      	strb	r2, [r3, #9]
    memcpy(&spi_tx_buffer[10], eth_tx_buffer, eth_tx_size);
 8004dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8004e0c <SPI_QCA7000_Send_Eth_Frame+0x98>)
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	490e      	ldr	r1, [pc, #56]	@ (8004e14 <SPI_QCA7000_Send_Eth_Frame+0xa0>)
 8004dda:	480f      	ldr	r0, [pc, #60]	@ (8004e18 <SPI_QCA7000_Send_Eth_Frame+0xa4>)
 8004ddc:	f001 fd25 	bl	800682a <memcpy>
    spi_tx_buffer[10 + eth_tx_size] = 0x55;
 8004de0:	4b0a      	ldr	r3, [pc, #40]	@ (8004e0c <SPI_QCA7000_Send_Eth_Frame+0x98>)
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	330a      	adds	r3, #10
 8004de6:	4a0a      	ldr	r2, [pc, #40]	@ (8004e10 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 8004de8:	2155      	movs	r1, #85	@ 0x55
 8004dea:	54d1      	strb	r1, [r2, r3]
    spi_tx_buffer[11 + eth_tx_size] = 0x55;
 8004dec:	4b07      	ldr	r3, [pc, #28]	@ (8004e0c <SPI_QCA7000_Send_Eth_Frame+0x98>)
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	330b      	adds	r3, #11
 8004df2:	4a07      	ldr	r2, [pc, #28]	@ (8004e10 <SPI_QCA7000_Send_Eth_Frame+0x9c>)
 8004df4:	2155      	movs	r1, #85	@ 0x55
 8004df6:	54d1      	strb	r1, [r2, r3]
    spi_data_size = 12 + eth_tx_size;
 8004df8:	4b04      	ldr	r3, [pc, #16]	@ (8004e0c <SPI_QCA7000_Send_Eth_Frame+0x98>)
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	330c      	adds	r3, #12
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	4b06      	ldr	r3, [pc, #24]	@ (8004e1c <SPI_QCA7000_Send_Eth_Frame+0xa8>)
 8004e02:	801a      	strh	r2, [r3, #0]
    SPI_Transmit_Receive();
 8004e04:	f7fb fb32 	bl	800046c <SPI_Transmit_Receive>
//    uint8_t i;
//    for(i=0; i<spi_data_size; i++){
//    	sprintf(serial_output_buffer + strlen(serial_output_buffer), " %X ", spi_tx_buffer[i]);
//    }
//    Serial_Print();
}
 8004e08:	bf00      	nop
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	20001b76 	.word	0x20001b76
 8004e10:	20000a10 	.word	0x20000a10
 8004e14:	20001a7c 	.word	0x20001a7c
 8004e18:	20000a1a 	.word	0x20000a1a
 8004e1c:	20001a78 	.word	0x20001a78

08004e20 <SPI_QCA7000_Read_Eth_Frame>:

void SPI_QCA7000_Read_Eth_Frame(void){
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
    uint8_t i;
    i = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	71fb      	strb	r3, [r7, #7]
    uint16_t ava_size;
    ava_size = SPI_QCA7000_Read_RDBUF_SPC_AVA();
 8004e2a:	f7ff fc95 	bl	8004758 <SPI_QCA7000_Read_RDBUF_SPC_AVA>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	80bb      	strh	r3, [r7, #4]
    if(ava_size == 0){
 8004e32:	88bb      	ldrh	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d03e      	beq.n	8004eb6 <SPI_QCA7000_Read_Eth_Frame+0x96>
    	return;
    }
    SPI_QCA7000_Write_BFR_SIZE(ava_size);
 8004e38:	88bb      	ldrh	r3, [r7, #4]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff fcd6 	bl	80047ec <SPI_QCA7000_Write_BFR_SIZE>

    spi_tx_buffer[i++] = 0x80;
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	71fa      	strb	r2, [r7, #7]
 8004e46:	461a      	mov	r2, r3
 8004e48:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec0 <SPI_QCA7000_Read_Eth_Frame+0xa0>)
 8004e4a:	2180      	movs	r1, #128	@ 0x80
 8004e4c:	5499      	strb	r1, [r3, r2]
    spi_tx_buffer[i++] = 0x00;
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	71fa      	strb	r2, [r7, #7]
 8004e54:	461a      	mov	r2, r3
 8004e56:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec0 <SPI_QCA7000_Read_Eth_Frame+0xa0>)
 8004e58:	2100      	movs	r1, #0
 8004e5a:	5499      	strb	r1, [r3, r2]

    spi_data_size = ava_size + 2;
 8004e5c:	88bb      	ldrh	r3, [r7, #4]
 8004e5e:	3302      	adds	r3, #2
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	4b18      	ldr	r3, [pc, #96]	@ (8004ec4 <SPI_QCA7000_Read_Eth_Frame+0xa4>)
 8004e64:	801a      	strh	r2, [r3, #0]

    SPI_Transmit_Receive();
 8004e66:	f7fb fb01 	bl	800046c <SPI_Transmit_Receive>

    for(i=0; i<ava_size; i++){
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	71fb      	strb	r3, [r7, #7]
 8004e6e:	e016      	b.n	8004e9e <SPI_QCA7000_Read_Eth_Frame+0x7e>
        spi_rx_buffer[i] = spi_rx_buffer[i+2];
 8004e70:	79fb      	ldrb	r3, [r7, #7]
 8004e72:	1c9a      	adds	r2, r3, #2
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	4914      	ldr	r1, [pc, #80]	@ (8004ec8 <SPI_QCA7000_Read_Eth_Frame+0xa8>)
 8004e78:	5c89      	ldrb	r1, [r1, r2]
 8004e7a:	4a13      	ldr	r2, [pc, #76]	@ (8004ec8 <SPI_QCA7000_Read_Eth_Frame+0xa8>)
 8004e7c:	54d1      	strb	r1, [r2, r3]
   		sprintf(serial_output_buffer + strlen(serial_output_buffer), " %X ", spi_rx_buffer[i]);
 8004e7e:	4813      	ldr	r0, [pc, #76]	@ (8004ecc <SPI_QCA7000_Read_Eth_Frame+0xac>)
 8004e80:	f7fb f9ae 	bl	80001e0 <strlen>
 8004e84:	4603      	mov	r3, r0
 8004e86:	4a11      	ldr	r2, [pc, #68]	@ (8004ecc <SPI_QCA7000_Read_Eth_Frame+0xac>)
 8004e88:	1898      	adds	r0, r3, r2
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	4a0e      	ldr	r2, [pc, #56]	@ (8004ec8 <SPI_QCA7000_Read_Eth_Frame+0xa8>)
 8004e8e:	5cd3      	ldrb	r3, [r2, r3]
 8004e90:	461a      	mov	r2, r3
 8004e92:	490f      	ldr	r1, [pc, #60]	@ (8004ed0 <SPI_QCA7000_Read_Eth_Frame+0xb0>)
 8004e94:	f001 fbea 	bl	800666c <siprintf>
    for(i=0; i<ava_size; i++){
 8004e98:	79fb      	ldrb	r3, [r7, #7]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	71fb      	strb	r3, [r7, #7]
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	88ba      	ldrh	r2, [r7, #4]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d8e3      	bhi.n	8004e70 <SPI_QCA7000_Read_Eth_Frame+0x50>
    }
	Serial_Print();
 8004ea8:	f7fb face 	bl	8000448 <Serial_Print>

    SPI_QCA7000_Check_Rx_Data(ava_size);
 8004eac:	88bb      	ldrh	r3, [r7, #4]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff fe96 	bl	8004be0 <SPI_QCA7000_Check_Rx_Data>
 8004eb4:	e000      	b.n	8004eb8 <SPI_QCA7000_Read_Eth_Frame+0x98>
    	return;
 8004eb6:	bf00      	nop
//	sprintf(serial_output_buffer, "abc: %X %X ", spi_rx_buffer[2], spi_rx_buffer[3] );
//	Serial_Print();
}
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000a10 	.word	0x20000a10
 8004ec4:	20001a78 	.word	0x20001a78
 8004ec8:	20001244 	.word	0x20001244
 8004ecc:	200001dc 	.word	0x200001dc
 8004ed0:	0800798c 	.word	0x0800798c

08004ed4 <SPI_QCA7000_Handling_Intr>:

void SPI_QCA7000_Handling_Intr(void){
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
    SPI_QCA7000_Disable_REG_INTR_DISABLE();
 8004eda:	f7ff fcbd 	bl	8004858 <SPI_QCA7000_Disable_REG_INTR_DISABLE>
    uint16_t cause;
    cause = SPI_QCA7000_Read_REG_INTR_CAUSE();
 8004ede:	f7ff fd1b 	bl	8004918 <SPI_QCA7000_Read_REG_INTR_CAUSE>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	80fb      	strh	r3, [r7, #6]
    SPI_QCA7000_Confirm_REG_INTR_CAUSE(cause);
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff fdb7 	bl	8004a5c <SPI_QCA7000_Confirm_REG_INTR_CAUSE>
    SPI_QCA7000_Enable_REG_INTR_ENABLE();
 8004eee:	f7ff fce3 	bl	80048b8 <SPI_QCA7000_Enable_REG_INTR_ENABLE>
}
 8004ef2:	bf00      	nop
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <HPGP_Fill_Address>:
/********** local prototypes *****************************************/
void HPGP_Compose_ATTEN_CHAR_RSP(void);
void HPGP_SLAC_Enter_State(int n);
void HPGP_Compose_SET_KEY_REQ(void);

void HPGP_Fill_Address(const uint8_t *mac, uint8_t offset) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
 /* at offset 0 in the ethernet frame, we have the destination MAC.
    we can give a different offset, to re-use the MAC also in the data area */
  memcpy(&eth_tx_buffer[offset], mac, 6);
 8004f08:	78fb      	ldrb	r3, [r7, #3]
 8004f0a:	4a05      	ldr	r2, [pc, #20]	@ (8004f20 <HPGP_Fill_Address+0x24>)
 8004f0c:	4413      	add	r3, r2
 8004f0e:	2206      	movs	r2, #6
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f001 fc89 	bl	800682a <memcpy>
}
 8004f18:	bf00      	nop
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	20001a7c 	.word	0x20001a7c

08004f24 <HPGP_Get_MTYPE>:

/* Extracting the MTYPE from a received message. */
uint16_t HPGP_Get_MTYPE(uint8_t *eth_rx_buffer) {
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint16_t mtype=0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	81fb      	strh	r3, [r7, #14]
  mtype=eth_rx_buffer[12]*256 + eth_rx_buffer[13];
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	330c      	adds	r3, #12
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	320d      	adds	r2, #13
 8004f3e:	7812      	ldrb	r2, [r2, #0]
 8004f40:	4413      	add	r3, r2
 8004f42:	81fb      	strh	r3, [r7, #14]
  return mtype;
 8004f44:	89fb      	ldrh	r3, [r7, #14]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
	...

08004f54 <HPGP_Clean_Tx_Buffer>:

void HPGP_Clean_Tx_Buffer(void) {
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
  /* fill the complete ethernet transmit buffer with 0x00 */
  int i;
  for (i=0; i<ETH_TRANSMIT_BUFFER_SIZE; i++) {
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	607b      	str	r3, [r7, #4]
 8004f5e:	e007      	b.n	8004f70 <HPGP_Clean_Tx_Buffer+0x1c>
    eth_tx_buffer[i]=0;
 8004f60:	4a08      	ldr	r2, [pc, #32]	@ (8004f84 <HPGP_Clean_Tx_Buffer+0x30>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4413      	add	r3, r2
 8004f66:	2200      	movs	r2, #0
 8004f68:	701a      	strb	r2, [r3, #0]
  for (i=0; i<ETH_TRANSMIT_BUFFER_SIZE; i++) {
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	607b      	str	r3, [r7, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2bf9      	cmp	r3, #249	@ 0xf9
 8004f74:	ddf4      	ble.n	8004f60 <HPGP_Clean_Tx_Buffer+0xc>
  }
}
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	20001a7c 	.word	0x20001a7c

08004f88 <PEF_Get_Data>:

ev_parameter myEV;
evse_parameter myEVSE;

/* Parameter Exchanged Function */
void PEF_Get_Data(uint8_t* mac, uint8_t offset, uint8_t len){
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
 8004f94:	4613      	mov	r3, r2
 8004f96:	70bb      	strb	r3, [r7, #2]
	memcpy(mac, &eth_rx_buffer[offset], len);
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	4a05      	ldr	r2, [pc, #20]	@ (8004fb0 <PEF_Get_Data+0x28>)
 8004f9c:	4413      	add	r3, r2
 8004f9e:	78ba      	ldrb	r2, [r7, #2]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f001 fc41 	bl	800682a <memcpy>
}
 8004fa8:	bf00      	nop
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20001b78 	.word	0x20001b78

08004fb4 <PEF_Compose_Initialization_Req>:
void PEF_Compose_Initialization_Req(void){
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
	/* Initialization Request */
    eth_tx_size = 60;
 8004fb8:	4b19      	ldr	r3, [pc, #100]	@ (8005020 <PEF_Compose_Initialization_Req+0x6c>)
 8004fba:	223c      	movs	r2, #60	@ 0x3c
 8004fbc:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 8004fbe:	f7ff ffc9 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(broadcastID, 0);
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4817      	ldr	r0, [pc, #92]	@ (8005024 <PEF_Compose_Initialization_Req+0x70>)
 8004fc6:	f7ff ff99 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 8004fca:	2106      	movs	r1, #6
 8004fcc:	4816      	ldr	r0, [pc, #88]	@ (8005028 <PEF_Compose_Initialization_Req+0x74>)
 8004fce:	f7ff ff95 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 8004fd2:	4b16      	ldr	r3, [pc, #88]	@ (800502c <PEF_Compose_Initialization_Req+0x78>)
 8004fd4:	2288      	movs	r2, #136	@ 0x88
 8004fd6:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 8004fd8:	4b14      	ldr	r3, [pc, #80]	@ (800502c <PEF_Compose_Initialization_Req+0x78>)
 8004fda:	22e1      	movs	r2, #225	@ 0xe1
 8004fdc:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 8004fde:	4b13      	ldr	r3, [pc, #76]	@ (800502c <PEF_Compose_Initialization_Req+0x78>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 8004fe4:	4b11      	ldr	r3, [pc, #68]	@ (800502c <PEF_Compose_Initialization_Req+0x78>)
 8004fe6:	22e0      	movs	r2, #224	@ 0xe0
 8004fe8:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 8004fea:	4b10      	ldr	r3, [pc, #64]	@ (800502c <PEF_Compose_Initialization_Req+0x78>)
 8004fec:	2260      	movs	r2, #96	@ 0x60
 8004fee:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 8004ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800502c <PEF_Compose_Initialization_Req+0x78>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800502c <PEF_Compose_Initialization_Req+0x78>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 8004ffc:	2113      	movs	r1, #19
 8004ffe:	480c      	ldr	r0, [pc, #48]	@ (8005030 <PEF_Compose_Initialization_Req+0x7c>)
 8005000:	f7ff ff7c 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB0; // Session + State
 8005004:	4b09      	ldr	r3, [pc, #36]	@ (800502c <PEF_Compose_Initialization_Req+0x78>)
 8005006:	22b0      	movs	r2, #176	@ 0xb0
 8005008:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x00; // Function + Message Type
 800500a:	4b08      	ldr	r3, [pc, #32]	@ (800502c <PEF_Compose_Initialization_Req+0x78>)
 800500c:	2200      	movs	r2, #0
 800500e:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 8005010:	4b06      	ldr	r3, [pc, #24]	@ (800502c <PEF_Compose_Initialization_Req+0x78>)
 8005012:	2200      	movs	r2, #0
 8005014:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 8005016:	4b05      	ldr	r3, [pc, #20]	@ (800502c <PEF_Compose_Initialization_Req+0x78>)
 8005018:	2200      	movs	r2, #0
 800501a:	771a      	strb	r2, [r3, #28]
    // Body
}
 800501c:	bf00      	nop
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20001b76 	.word	0x20001b76
 8005024:	20001d78 	.word	0x20001d78
 8005028:	20000014 	.word	0x20000014
 800502c:	20001a7c 	.word	0x20001a7c
 8005030:	2000000c 	.word	0x2000000c

08005034 <PEF_Compose_Initialization_Cnf>:

void PEF_Compose_Initialization_Cnf(void){
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
	/* Initialization Confirm */
    eth_tx_size = 60;
 8005038:	4b19      	ldr	r3, [pc, #100]	@ (80050a0 <PEF_Compose_Initialization_Cnf+0x6c>)
 800503a:	223c      	movs	r2, #60	@ 0x3c
 800503c:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800503e:	f7ff ff89 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 8005042:	2100      	movs	r1, #0
 8005044:	4817      	ldr	r0, [pc, #92]	@ (80050a4 <PEF_Compose_Initialization_Cnf+0x70>)
 8005046:	f7ff ff59 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 800504a:	2106      	movs	r1, #6
 800504c:	4816      	ldr	r0, [pc, #88]	@ (80050a8 <PEF_Compose_Initialization_Cnf+0x74>)
 800504e:	f7ff ff55 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 8005052:	4b16      	ldr	r3, [pc, #88]	@ (80050ac <PEF_Compose_Initialization_Cnf+0x78>)
 8005054:	2288      	movs	r2, #136	@ 0x88
 8005056:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 8005058:	4b14      	ldr	r3, [pc, #80]	@ (80050ac <PEF_Compose_Initialization_Cnf+0x78>)
 800505a:	22e1      	movs	r2, #225	@ 0xe1
 800505c:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800505e:	4b13      	ldr	r3, [pc, #76]	@ (80050ac <PEF_Compose_Initialization_Cnf+0x78>)
 8005060:	2201      	movs	r2, #1
 8005062:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE1; // EXCHANGE_DATA
 8005064:	4b11      	ldr	r3, [pc, #68]	@ (80050ac <PEF_Compose_Initialization_Cnf+0x78>)
 8005066:	22e1      	movs	r2, #225	@ 0xe1
 8005068:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800506a:	4b10      	ldr	r3, [pc, #64]	@ (80050ac <PEF_Compose_Initialization_Cnf+0x78>)
 800506c:	2260      	movs	r2, #96	@ 0x60
 800506e:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 8005070:	4b0e      	ldr	r3, [pc, #56]	@ (80050ac <PEF_Compose_Initialization_Cnf+0x78>)
 8005072:	2200      	movs	r2, #0
 8005074:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 8005076:	4b0d      	ldr	r3, [pc, #52]	@ (80050ac <PEF_Compose_Initialization_Cnf+0x78>)
 8005078:	2200      	movs	r2, #0
 800507a:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800507c:	2113      	movs	r1, #19
 800507e:	480c      	ldr	r0, [pc, #48]	@ (80050b0 <PEF_Compose_Initialization_Cnf+0x7c>)
 8005080:	f7ff ff3c 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB0; // Session + State
 8005084:	4b09      	ldr	r3, [pc, #36]	@ (80050ac <PEF_Compose_Initialization_Cnf+0x78>)
 8005086:	22b0      	movs	r2, #176	@ 0xb0
 8005088:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x01; // Function + Message Type
 800508a:	4b08      	ldr	r3, [pc, #32]	@ (80050ac <PEF_Compose_Initialization_Cnf+0x78>)
 800508c:	2201      	movs	r2, #1
 800508e:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 8005090:	4b06      	ldr	r3, [pc, #24]	@ (80050ac <PEF_Compose_Initialization_Cnf+0x78>)
 8005092:	2200      	movs	r2, #0
 8005094:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 8005096:	4b05      	ldr	r3, [pc, #20]	@ (80050ac <PEF_Compose_Initialization_Cnf+0x78>)
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]
    // Body
}
 800509c:	bf00      	nop
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20001b76 	.word	0x20001b76
 80050a4:	20001d70 	.word	0x20001d70
 80050a8:	2000001c 	.word	0x2000001c
 80050ac:	20001a7c 	.word	0x20001a7c
 80050b0:	2000000c 	.word	0x2000000c

080050b4 <PEF_Evaluate_Initialization>:

void PEF_Evaluate_Initialization(void){
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
    PEF_Get_Data(yourID, 6, 6);
 80050b8:	2206      	movs	r2, #6
 80050ba:	2106      	movs	r1, #6
 80050bc:	4804      	ldr	r0, [pc, #16]	@ (80050d0 <PEF_Evaluate_Initialization+0x1c>)
 80050be:	f7ff ff63 	bl	8004f88 <PEF_Get_Data>
    PEF_Get_Data(sessionID, 19, 6);
 80050c2:	2206      	movs	r2, #6
 80050c4:	2113      	movs	r1, #19
 80050c6:	4803      	ldr	r0, [pc, #12]	@ (80050d4 <PEF_Evaluate_Initialization+0x20>)
 80050c8:	f7ff ff5e 	bl	8004f88 <PEF_Get_Data>
}
 80050cc:	bf00      	nop
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20001d70 	.word	0x20001d70
 80050d4:	2000000c 	.word	0x2000000c

080050d8 <PEF_Compose_Parameter_Exchange_Req>:



void PEF_Compose_Parameter_Exchange_Req(void){
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
	myEV.control_protocol_number = 0xAA;
 80050dc:	4b51      	ldr	r3, [pc, #324]	@ (8005224 <PEF_Compose_Parameter_Exchange_Req+0x14c>)
 80050de:	22aa      	movs	r2, #170	@ 0xaa
 80050e0:	709a      	strb	r2, [r3, #2]
	myEV.rate_capacity_battery = 0x3A;
 80050e2:	4b50      	ldr	r3, [pc, #320]	@ (8005224 <PEF_Compose_Parameter_Exchange_Req+0x14c>)
 80050e4:	223a      	movs	r2, #58	@ 0x3a
 80050e6:	70da      	strb	r2, [r3, #3]
	myEV.current_battery = (uint16_t)(rand()%20);
 80050e8:	f001 f9c0 	bl	800646c <rand>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4b4e      	ldr	r3, [pc, #312]	@ (8005228 <PEF_Compose_Parameter_Exchange_Req+0x150>)
 80050f0:	fb83 1302 	smull	r1, r3, r3, r2
 80050f4:	10d9      	asrs	r1, r3, #3
 80050f6:	17d3      	asrs	r3, r2, #31
 80050f8:	1ac9      	subs	r1, r1, r3
 80050fa:	460b      	mov	r3, r1
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	1ad1      	subs	r1, r2, r3
 8005104:	b28a      	uxth	r2, r1
 8005106:	4b47      	ldr	r3, [pc, #284]	@ (8005224 <PEF_Compose_Parameter_Exchange_Req+0x14c>)
 8005108:	809a      	strh	r2, [r3, #4]
	myEV.max_battery = (uint16_t)(90+rand()%5);
 800510a:	f001 f9af 	bl	800646c <rand>
 800510e:	4602      	mov	r2, r0
 8005110:	4b45      	ldr	r3, [pc, #276]	@ (8005228 <PEF_Compose_Parameter_Exchange_Req+0x150>)
 8005112:	fb83 1302 	smull	r1, r3, r3, r2
 8005116:	1059      	asrs	r1, r3, #1
 8005118:	17d3      	asrs	r3, r2, #31
 800511a:	1ac9      	subs	r1, r1, r3
 800511c:	460b      	mov	r3, r1
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	440b      	add	r3, r1
 8005122:	1ad1      	subs	r1, r2, r3
 8005124:	b28b      	uxth	r3, r1
 8005126:	335a      	adds	r3, #90	@ 0x5a
 8005128:	b29a      	uxth	r2, r3
 800512a:	4b3e      	ldr	r3, [pc, #248]	@ (8005224 <PEF_Compose_Parameter_Exchange_Req+0x14c>)
 800512c:	80da      	strh	r2, [r3, #6]
	myEV.max_charging_time = 0x1518;
 800512e:	4b3d      	ldr	r3, [pc, #244]	@ (8005224 <PEF_Compose_Parameter_Exchange_Req+0x14c>)
 8005130:	f241 5218 	movw	r2, #5400	@ 0x1518
 8005134:	811a      	strh	r2, [r3, #8]
	myEV.target_battery_voltage = 0x00C8;
 8005136:	4b3b      	ldr	r3, [pc, #236]	@ (8005224 <PEF_Compose_Parameter_Exchange_Req+0x14c>)
 8005138:	22c8      	movs	r2, #200	@ 0xc8
 800513a:	815a      	strh	r2, [r3, #10]
	myEV.vehicle_charging_enabled = 0xAA;
 800513c:	4b39      	ldr	r3, [pc, #228]	@ (8005224 <PEF_Compose_Parameter_Exchange_Req+0x14c>)
 800513e:	22aa      	movs	r2, #170	@ 0xaa
 8005140:	731a      	strb	r2, [r3, #12]

	/* Parameter Exchange Request */
    eth_tx_size = 60;
 8005142:	4b3a      	ldr	r3, [pc, #232]	@ (800522c <PEF_Compose_Parameter_Exchange_Req+0x154>)
 8005144:	223c      	movs	r2, #60	@ 0x3c
 8005146:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 8005148:	f7ff ff04 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800514c:	2100      	movs	r1, #0
 800514e:	4838      	ldr	r0, [pc, #224]	@ (8005230 <PEF_Compose_Parameter_Exchange_Req+0x158>)
 8005150:	f7ff fed4 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 8005154:	2106      	movs	r1, #6
 8005156:	4837      	ldr	r0, [pc, #220]	@ (8005234 <PEF_Compose_Parameter_Exchange_Req+0x15c>)
 8005158:	f7ff fed0 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800515c:	4b36      	ldr	r3, [pc, #216]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 800515e:	2288      	movs	r2, #136	@ 0x88
 8005160:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 8005162:	4b35      	ldr	r3, [pc, #212]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 8005164:	22e1      	movs	r2, #225	@ 0xe1
 8005166:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 8005168:	4b33      	ldr	r3, [pc, #204]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 800516a:	2201      	movs	r2, #1
 800516c:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800516e:	4b32      	ldr	r3, [pc, #200]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 8005170:	22e0      	movs	r2, #224	@ 0xe0
 8005172:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 8005174:	4b30      	ldr	r3, [pc, #192]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 8005176:	2260      	movs	r2, #96	@ 0x60
 8005178:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800517a:	4b2f      	ldr	r3, [pc, #188]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 800517c:	2200      	movs	r2, #0
 800517e:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 8005180:	4b2d      	ldr	r3, [pc, #180]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 8005182:	2200      	movs	r2, #0
 8005184:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 8005186:	2113      	movs	r1, #19
 8005188:	482c      	ldr	r0, [pc, #176]	@ (800523c <PEF_Compose_Parameter_Exchange_Req+0x164>)
 800518a:	f7ff feb7 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB0; // Session + State
 800518e:	4b2a      	ldr	r3, [pc, #168]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 8005190:	22b0      	movs	r2, #176	@ 0xb0
 8005192:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x04; // Function + Message Type
 8005194:	4b28      	ldr	r3, [pc, #160]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 8005196:	2204      	movs	r2, #4
 8005198:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800519a:	4b27      	ldr	r3, [pc, #156]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 800519c:	2200      	movs	r2, #0
 800519e:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 80051a0:	4b25      	ldr	r3, [pc, #148]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	771a      	strb	r2, [r3, #28]
    // Body
    eth_tx_buffer[29] = myEV.control_protocol_number;
 80051a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005224 <PEF_Compose_Parameter_Exchange_Req+0x14c>)
 80051a8:	789a      	ldrb	r2, [r3, #2]
 80051aa:	4b23      	ldr	r3, [pc, #140]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 80051ac:	775a      	strb	r2, [r3, #29]
    eth_tx_buffer[30] = myEV.rate_capacity_battery;
 80051ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005224 <PEF_Compose_Parameter_Exchange_Req+0x14c>)
 80051b0:	78da      	ldrb	r2, [r3, #3]
 80051b2:	4b21      	ldr	r3, [pc, #132]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 80051b4:	779a      	strb	r2, [r3, #30]
    eth_tx_buffer[31] = myEV.current_battery;
 80051b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005224 <PEF_Compose_Parameter_Exchange_Req+0x14c>)
 80051b8:	889b      	ldrh	r3, [r3, #4]
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 80051be:	77da      	strb	r2, [r3, #31]
    eth_tx_buffer[32] = (myEV.max_battery >> 8);
 80051c0:	4b18      	ldr	r3, [pc, #96]	@ (8005224 <PEF_Compose_Parameter_Exchange_Req+0x14c>)
 80051c2:	88db      	ldrh	r3, [r3, #6]
 80051c4:	0a1b      	lsrs	r3, r3, #8
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 80051cc:	f883 2020 	strb.w	r2, [r3, #32]
    eth_tx_buffer[33] = myEV.max_battery;
 80051d0:	4b14      	ldr	r3, [pc, #80]	@ (8005224 <PEF_Compose_Parameter_Exchange_Req+0x14c>)
 80051d2:	88db      	ldrh	r3, [r3, #6]
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	4b18      	ldr	r3, [pc, #96]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 80051d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    eth_tx_buffer[34] = (myEV.max_charging_time >> 8);
 80051dc:	4b11      	ldr	r3, [pc, #68]	@ (8005224 <PEF_Compose_Parameter_Exchange_Req+0x14c>)
 80051de:	891b      	ldrh	r3, [r3, #8]
 80051e0:	0a1b      	lsrs	r3, r3, #8
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	4b14      	ldr	r3, [pc, #80]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 80051e8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    eth_tx_buffer[35] = myEV.max_charging_time;
 80051ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005224 <PEF_Compose_Parameter_Exchange_Req+0x14c>)
 80051ee:	891b      	ldrh	r3, [r3, #8]
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	4b11      	ldr	r3, [pc, #68]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 80051f4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    eth_tx_buffer[36] = (myEV.target_battery_voltage >> 8);
 80051f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005224 <PEF_Compose_Parameter_Exchange_Req+0x14c>)
 80051fa:	895b      	ldrh	r3, [r3, #10]
 80051fc:	0a1b      	lsrs	r3, r3, #8
 80051fe:	b29b      	uxth	r3, r3
 8005200:	b2da      	uxtb	r2, r3
 8005202:	4b0d      	ldr	r3, [pc, #52]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 8005204:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    eth_tx_buffer[37] = myEV.target_battery_voltage;
 8005208:	4b06      	ldr	r3, [pc, #24]	@ (8005224 <PEF_Compose_Parameter_Exchange_Req+0x14c>)
 800520a:	895b      	ldrh	r3, [r3, #10]
 800520c:	b2da      	uxtb	r2, r3
 800520e:	4b0a      	ldr	r3, [pc, #40]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 8005210:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    eth_tx_buffer[38] = myEV.vehicle_charging_enabled;
 8005214:	4b03      	ldr	r3, [pc, #12]	@ (8005224 <PEF_Compose_Parameter_Exchange_Req+0x14c>)
 8005216:	7b1a      	ldrb	r2, [r3, #12]
 8005218:	4b07      	ldr	r3, [pc, #28]	@ (8005238 <PEF_Compose_Parameter_Exchange_Req+0x160>)
 800521a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 800521e:	bf00      	nop
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20001d80 	.word	0x20001d80
 8005228:	66666667 	.word	0x66666667
 800522c:	20001b76 	.word	0x20001b76
 8005230:	20001d70 	.word	0x20001d70
 8005234:	20000014 	.word	0x20000014
 8005238:	20001a7c 	.word	0x20001a7c
 800523c:	2000000c 	.word	0x2000000c

08005240 <PEF_Compose_Parameter_Exchange_Res>:

void PEF_Compose_Parameter_Exchange_Res(void){
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
	myEVSE.control_protocol_number = 0xAA;
 8005244:	4b31      	ldr	r3, [pc, #196]	@ (800530c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 8005246:	22aa      	movs	r2, #170	@ 0xaa
 8005248:	701a      	strb	r2, [r3, #0]
	myEVSE.available_output_voltage = 0x0190;
 800524a:	4b30      	ldr	r3, [pc, #192]	@ (800530c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 800524c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005250:	805a      	strh	r2, [r3, #2]
	myEVSE.available_output_current = 0x0032;
 8005252:	4b2e      	ldr	r3, [pc, #184]	@ (800530c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 8005254:	2232      	movs	r2, #50	@ 0x32
 8005256:	809a      	strh	r2, [r3, #4]
	myEVSE.battery_incompability = 0xAA;
 8005258:	4b2c      	ldr	r3, [pc, #176]	@ (800530c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 800525a:	22aa      	movs	r2, #170	@ 0xaa
 800525c:	719a      	strb	r2, [r3, #6]

	/* Parameter Exchange Response */
    eth_tx_size = 60;
 800525e:	4b2c      	ldr	r3, [pc, #176]	@ (8005310 <PEF_Compose_Parameter_Exchange_Res+0xd0>)
 8005260:	223c      	movs	r2, #60	@ 0x3c
 8005262:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 8005264:	f7ff fe76 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 8005268:	2100      	movs	r1, #0
 800526a:	482a      	ldr	r0, [pc, #168]	@ (8005314 <PEF_Compose_Parameter_Exchange_Res+0xd4>)
 800526c:	f7ff fe46 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 8005270:	2106      	movs	r1, #6
 8005272:	4829      	ldr	r0, [pc, #164]	@ (8005318 <PEF_Compose_Parameter_Exchange_Res+0xd8>)
 8005274:	f7ff fe42 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 8005278:	4b28      	ldr	r3, [pc, #160]	@ (800531c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800527a:	2288      	movs	r2, #136	@ 0x88
 800527c:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 800527e:	4b27      	ldr	r3, [pc, #156]	@ (800531c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 8005280:	22e1      	movs	r2, #225	@ 0xe1
 8005282:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 8005284:	4b25      	ldr	r3, [pc, #148]	@ (800531c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 8005286:	2201      	movs	r2, #1
 8005288:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800528a:	4b24      	ldr	r3, [pc, #144]	@ (800531c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800528c:	22e0      	movs	r2, #224	@ 0xe0
 800528e:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 8005290:	4b22      	ldr	r3, [pc, #136]	@ (800531c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 8005292:	2260      	movs	r2, #96	@ 0x60
 8005294:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 8005296:	4b21      	ldr	r3, [pc, #132]	@ (800531c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 8005298:	2200      	movs	r2, #0
 800529a:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800529c:	4b1f      	ldr	r3, [pc, #124]	@ (800531c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 800529e:	2200      	movs	r2, #0
 80052a0:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 80052a2:	2113      	movs	r1, #19
 80052a4:	481e      	ldr	r0, [pc, #120]	@ (8005320 <PEF_Compose_Parameter_Exchange_Res+0xe0>)
 80052a6:	f7ff fe29 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB0; // Session + State
 80052aa:	4b1c      	ldr	r3, [pc, #112]	@ (800531c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 80052ac:	22b0      	movs	r2, #176	@ 0xb0
 80052ae:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x07; // Function + Message Type
 80052b0:	4b1a      	ldr	r3, [pc, #104]	@ (800531c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 80052b2:	2207      	movs	r2, #7
 80052b4:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 80052b6:	4b19      	ldr	r3, [pc, #100]	@ (800531c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 80052bc:	4b17      	ldr	r3, [pc, #92]	@ (800531c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 80052be:	2200      	movs	r2, #0
 80052c0:	771a      	strb	r2, [r3, #28]
    // Body
    eth_tx_buffer[29] = myEVSE.control_protocol_number;
 80052c2:	4b12      	ldr	r3, [pc, #72]	@ (800530c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 80052c4:	781a      	ldrb	r2, [r3, #0]
 80052c6:	4b15      	ldr	r3, [pc, #84]	@ (800531c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 80052c8:	775a      	strb	r2, [r3, #29]
    eth_tx_buffer[30] = (myEVSE.available_output_voltage >> 8);
 80052ca:	4b10      	ldr	r3, [pc, #64]	@ (800530c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 80052cc:	885b      	ldrh	r3, [r3, #2]
 80052ce:	0a1b      	lsrs	r3, r3, #8
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	4b11      	ldr	r3, [pc, #68]	@ (800531c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 80052d6:	779a      	strb	r2, [r3, #30]
    eth_tx_buffer[31] = myEVSE.available_output_voltage;
 80052d8:	4b0c      	ldr	r3, [pc, #48]	@ (800530c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 80052da:	885b      	ldrh	r3, [r3, #2]
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	4b0f      	ldr	r3, [pc, #60]	@ (800531c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 80052e0:	77da      	strb	r2, [r3, #31]
    eth_tx_buffer[32] = (myEVSE.available_output_current >> 8);
 80052e2:	4b0a      	ldr	r3, [pc, #40]	@ (800530c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 80052e4:	889b      	ldrh	r3, [r3, #4]
 80052e6:	0a1b      	lsrs	r3, r3, #8
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	4b0b      	ldr	r3, [pc, #44]	@ (800531c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 80052ee:	f883 2020 	strb.w	r2, [r3, #32]
    eth_tx_buffer[33] = myEVSE.available_output_current;
 80052f2:	4b06      	ldr	r3, [pc, #24]	@ (800530c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 80052f4:	889b      	ldrh	r3, [r3, #4]
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	4b08      	ldr	r3, [pc, #32]	@ (800531c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 80052fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    eth_tx_buffer[34] = myEVSE.battery_incompability;
 80052fe:	4b03      	ldr	r3, [pc, #12]	@ (800530c <PEF_Compose_Parameter_Exchange_Res+0xcc>)
 8005300:	799a      	ldrb	r2, [r3, #6]
 8005302:	4b06      	ldr	r3, [pc, #24]	@ (800531c <PEF_Compose_Parameter_Exchange_Res+0xdc>)
 8005304:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8005308:	bf00      	nop
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20001d94 	.word	0x20001d94
 8005310:	20001b76 	.word	0x20001b76
 8005314:	20001d70 	.word	0x20001d70
 8005318:	2000001c 	.word	0x2000001c
 800531c:	20001a7c 	.word	0x20001a7c
 8005320:	2000000c 	.word	0x2000000c

08005324 <PEF_Compose_Parameter_Exchange_Cnf>:

void PEF_Compose_Parameter_Exchange_Cnf(void){
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
	/* Parameter Exchange Confirm */
    eth_tx_size = 60;
 8005328:	4b19      	ldr	r3, [pc, #100]	@ (8005390 <PEF_Compose_Parameter_Exchange_Cnf+0x6c>)
 800532a:	223c      	movs	r2, #60	@ 0x3c
 800532c:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 800532e:	f7ff fe11 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 8005332:	2100      	movs	r1, #0
 8005334:	4817      	ldr	r0, [pc, #92]	@ (8005394 <PEF_Compose_Parameter_Exchange_Cnf+0x70>)
 8005336:	f7ff fde1 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 800533a:	2106      	movs	r1, #6
 800533c:	4816      	ldr	r0, [pc, #88]	@ (8005398 <PEF_Compose_Parameter_Exchange_Cnf+0x74>)
 800533e:	f7ff fddd 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 8005342:	4b16      	ldr	r3, [pc, #88]	@ (800539c <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 8005344:	2288      	movs	r2, #136	@ 0x88
 8005346:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 8005348:	4b14      	ldr	r3, [pc, #80]	@ (800539c <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 800534a:	22e1      	movs	r2, #225	@ 0xe1
 800534c:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 800534e:	4b13      	ldr	r3, [pc, #76]	@ (800539c <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 8005350:	2201      	movs	r2, #1
 8005352:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 8005354:	4b11      	ldr	r3, [pc, #68]	@ (800539c <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 8005356:	22e0      	movs	r2, #224	@ 0xe0
 8005358:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 800535a:	4b10      	ldr	r3, [pc, #64]	@ (800539c <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 800535c:	2260      	movs	r2, #96	@ 0x60
 800535e:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 8005360:	4b0e      	ldr	r3, [pc, #56]	@ (800539c <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 8005362:	2200      	movs	r2, #0
 8005364:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 8005366:	4b0d      	ldr	r3, [pc, #52]	@ (800539c <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 8005368:	2200      	movs	r2, #0
 800536a:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 800536c:	2113      	movs	r1, #19
 800536e:	480c      	ldr	r0, [pc, #48]	@ (80053a0 <PEF_Compose_Parameter_Exchange_Cnf+0x7c>)
 8005370:	f7ff fdc4 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB0; // Session + State
 8005374:	4b09      	ldr	r3, [pc, #36]	@ (800539c <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 8005376:	22b0      	movs	r2, #176	@ 0xb0
 8005378:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x05; // Function + Message Type
 800537a:	4b08      	ldr	r3, [pc, #32]	@ (800539c <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 800537c:	2205      	movs	r2, #5
 800537e:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 8005380:	4b06      	ldr	r3, [pc, #24]	@ (800539c <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 8005382:	2200      	movs	r2, #0
 8005384:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 8005386:	4b05      	ldr	r3, [pc, #20]	@ (800539c <PEF_Compose_Parameter_Exchange_Cnf+0x78>)
 8005388:	2200      	movs	r2, #0
 800538a:	771a      	strb	r2, [r3, #28]
    // Body
}
 800538c:	bf00      	nop
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20001b76 	.word	0x20001b76
 8005394:	20001d70 	.word	0x20001d70
 8005398:	20000014 	.word	0x20000014
 800539c:	20001a7c 	.word	0x20001a7c
 80053a0:	2000000c 	.word	0x2000000c

080053a4 <PEF_Evaluate_Parameter_Exchange_Req>:

void PEF_Evaluate_Parameter_Exchange_Req(void){
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
	myEV.control_protocol_number = eth_rx_buffer[29];
 80053a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005420 <PEF_Evaluate_Parameter_Exchange_Req+0x7c>)
 80053aa:	7f5a      	ldrb	r2, [r3, #29]
 80053ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005424 <PEF_Evaluate_Parameter_Exchange_Req+0x80>)
 80053ae:	709a      	strb	r2, [r3, #2]
	myEV.rate_capacity_battery = eth_rx_buffer[30];
 80053b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005420 <PEF_Evaluate_Parameter_Exchange_Req+0x7c>)
 80053b2:	7f9a      	ldrb	r2, [r3, #30]
 80053b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005424 <PEF_Evaluate_Parameter_Exchange_Req+0x80>)
 80053b6:	70da      	strb	r2, [r3, #3]
	myEV.current_battery = eth_rx_buffer[31];
 80053b8:	4b19      	ldr	r3, [pc, #100]	@ (8005420 <PEF_Evaluate_Parameter_Exchange_Req+0x7c>)
 80053ba:	7fdb      	ldrb	r3, [r3, #31]
 80053bc:	461a      	mov	r2, r3
 80053be:	4b19      	ldr	r3, [pc, #100]	@ (8005424 <PEF_Evaluate_Parameter_Exchange_Req+0x80>)
 80053c0:	809a      	strh	r2, [r3, #4]
	myEV.max_battery = (eth_rx_buffer[32] << 8) + eth_rx_buffer[33];
 80053c2:	4b17      	ldr	r3, [pc, #92]	@ (8005420 <PEF_Evaluate_Parameter_Exchange_Req+0x7c>)
 80053c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	4a14      	ldr	r2, [pc, #80]	@ (8005420 <PEF_Evaluate_Parameter_Exchange_Req+0x7c>)
 80053ce:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 80053d2:	4413      	add	r3, r2
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	4b13      	ldr	r3, [pc, #76]	@ (8005424 <PEF_Evaluate_Parameter_Exchange_Req+0x80>)
 80053d8:	80da      	strh	r2, [r3, #6]
	myEV.max_charging_time = (eth_rx_buffer[34] << 8) + eth_rx_buffer[35];
 80053da:	4b11      	ldr	r3, [pc, #68]	@ (8005420 <PEF_Evaluate_Parameter_Exchange_Req+0x7c>)
 80053dc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80053e0:	021b      	lsls	r3, r3, #8
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	4a0e      	ldr	r2, [pc, #56]	@ (8005420 <PEF_Evaluate_Parameter_Exchange_Req+0x7c>)
 80053e6:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 80053ea:	4413      	add	r3, r2
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005424 <PEF_Evaluate_Parameter_Exchange_Req+0x80>)
 80053f0:	811a      	strh	r2, [r3, #8]
	myEV.target_battery_voltage = (eth_rx_buffer[36] << 8) + eth_rx_buffer[37];
 80053f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005420 <PEF_Evaluate_Parameter_Exchange_Req+0x7c>)
 80053f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	4a08      	ldr	r2, [pc, #32]	@ (8005420 <PEF_Evaluate_Parameter_Exchange_Req+0x7c>)
 80053fe:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8005402:	4413      	add	r3, r2
 8005404:	b29a      	uxth	r2, r3
 8005406:	4b07      	ldr	r3, [pc, #28]	@ (8005424 <PEF_Evaluate_Parameter_Exchange_Req+0x80>)
 8005408:	815a      	strh	r2, [r3, #10]
	myEV.vehicle_charging_enabled = eth_rx_buffer[38];
 800540a:	4b05      	ldr	r3, [pc, #20]	@ (8005420 <PEF_Evaluate_Parameter_Exchange_Req+0x7c>)
 800540c:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8005410:	4b04      	ldr	r3, [pc, #16]	@ (8005424 <PEF_Evaluate_Parameter_Exchange_Req+0x80>)
 8005412:	731a      	strb	r2, [r3, #12]
}
 8005414:	bf00      	nop
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	20001b78 	.word	0x20001b78
 8005424:	20001d80 	.word	0x20001d80

08005428 <PEF_Evaluate_Parameter_Exchange_Res>:

void PEF_Evaluate_Parameter_Exchange_Res(void){
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
	myEVSE.control_protocol_number = eth_rx_buffer[29];
 800542c:	4b11      	ldr	r3, [pc, #68]	@ (8005474 <PEF_Evaluate_Parameter_Exchange_Res+0x4c>)
 800542e:	7f5a      	ldrb	r2, [r3, #29]
 8005430:	4b11      	ldr	r3, [pc, #68]	@ (8005478 <PEF_Evaluate_Parameter_Exchange_Res+0x50>)
 8005432:	701a      	strb	r2, [r3, #0]
	myEVSE.available_output_voltage = (eth_rx_buffer[30] << 8) + eth_rx_buffer[31];
 8005434:	4b0f      	ldr	r3, [pc, #60]	@ (8005474 <PEF_Evaluate_Parameter_Exchange_Res+0x4c>)
 8005436:	7f9b      	ldrb	r3, [r3, #30]
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	b29b      	uxth	r3, r3
 800543c:	4a0d      	ldr	r2, [pc, #52]	@ (8005474 <PEF_Evaluate_Parameter_Exchange_Res+0x4c>)
 800543e:	7fd2      	ldrb	r2, [r2, #31]
 8005440:	4413      	add	r3, r2
 8005442:	b29a      	uxth	r2, r3
 8005444:	4b0c      	ldr	r3, [pc, #48]	@ (8005478 <PEF_Evaluate_Parameter_Exchange_Res+0x50>)
 8005446:	805a      	strh	r2, [r3, #2]
	myEVSE.available_output_current = (eth_rx_buffer[32] << 8) + eth_rx_buffer[33];
 8005448:	4b0a      	ldr	r3, [pc, #40]	@ (8005474 <PEF_Evaluate_Parameter_Exchange_Res+0x4c>)
 800544a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800544e:	021b      	lsls	r3, r3, #8
 8005450:	b29b      	uxth	r3, r3
 8005452:	4a08      	ldr	r2, [pc, #32]	@ (8005474 <PEF_Evaluate_Parameter_Exchange_Res+0x4c>)
 8005454:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8005458:	4413      	add	r3, r2
 800545a:	b29a      	uxth	r2, r3
 800545c:	4b06      	ldr	r3, [pc, #24]	@ (8005478 <PEF_Evaluate_Parameter_Exchange_Res+0x50>)
 800545e:	809a      	strh	r2, [r3, #4]
	myEVSE.battery_incompability = eth_rx_buffer[34];
 8005460:	4b04      	ldr	r3, [pc, #16]	@ (8005474 <PEF_Evaluate_Parameter_Exchange_Res+0x4c>)
 8005462:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8005466:	4b04      	ldr	r3, [pc, #16]	@ (8005478 <PEF_Evaluate_Parameter_Exchange_Res+0x50>)
 8005468:	719a      	strb	r2, [r3, #6]
}
 800546a:	bf00      	nop
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	20001b78 	.word	0x20001b78
 8005478:	20001d94 	.word	0x20001d94

0800547c <PEF_Compose_Connector_Lock_Req>:



void PEF_Compose_Connector_Lock_Req(void){
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
	/* Connector Lock Request */
    eth_tx_size = 60;
 8005480:	4b19      	ldr	r3, [pc, #100]	@ (80054e8 <PEF_Compose_Connector_Lock_Req+0x6c>)
 8005482:	223c      	movs	r2, #60	@ 0x3c
 8005484:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 8005486:	f7ff fd65 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800548a:	2100      	movs	r1, #0
 800548c:	4817      	ldr	r0, [pc, #92]	@ (80054ec <PEF_Compose_Connector_Lock_Req+0x70>)
 800548e:	f7ff fd35 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 8005492:	2106      	movs	r1, #6
 8005494:	4816      	ldr	r0, [pc, #88]	@ (80054f0 <PEF_Compose_Connector_Lock_Req+0x74>)
 8005496:	f7ff fd31 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800549a:	4b16      	ldr	r3, [pc, #88]	@ (80054f4 <PEF_Compose_Connector_Lock_Req+0x78>)
 800549c:	2288      	movs	r2, #136	@ 0x88
 800549e:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 80054a0:	4b14      	ldr	r3, [pc, #80]	@ (80054f4 <PEF_Compose_Connector_Lock_Req+0x78>)
 80054a2:	22e1      	movs	r2, #225	@ 0xe1
 80054a4:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 80054a6:	4b13      	ldr	r3, [pc, #76]	@ (80054f4 <PEF_Compose_Connector_Lock_Req+0x78>)
 80054a8:	2201      	movs	r2, #1
 80054aa:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 80054ac:	4b11      	ldr	r3, [pc, #68]	@ (80054f4 <PEF_Compose_Connector_Lock_Req+0x78>)
 80054ae:	22e0      	movs	r2, #224	@ 0xe0
 80054b0:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 80054b2:	4b10      	ldr	r3, [pc, #64]	@ (80054f4 <PEF_Compose_Connector_Lock_Req+0x78>)
 80054b4:	2260      	movs	r2, #96	@ 0x60
 80054b6:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 80054b8:	4b0e      	ldr	r3, [pc, #56]	@ (80054f4 <PEF_Compose_Connector_Lock_Req+0x78>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 80054be:	4b0d      	ldr	r3, [pc, #52]	@ (80054f4 <PEF_Compose_Connector_Lock_Req+0x78>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 80054c4:	2113      	movs	r1, #19
 80054c6:	480c      	ldr	r0, [pc, #48]	@ (80054f8 <PEF_Compose_Connector_Lock_Req+0x7c>)
 80054c8:	f7ff fd18 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB0; // Session + State
 80054cc:	4b09      	ldr	r3, [pc, #36]	@ (80054f4 <PEF_Compose_Connector_Lock_Req+0x78>)
 80054ce:	22b0      	movs	r2, #176	@ 0xb0
 80054d0:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x08; // Function + Message Type
 80054d2:	4b08      	ldr	r3, [pc, #32]	@ (80054f4 <PEF_Compose_Connector_Lock_Req+0x78>)
 80054d4:	2208      	movs	r2, #8
 80054d6:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 80054d8:	4b06      	ldr	r3, [pc, #24]	@ (80054f4 <PEF_Compose_Connector_Lock_Req+0x78>)
 80054da:	2200      	movs	r2, #0
 80054dc:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 80054de:	4b05      	ldr	r3, [pc, #20]	@ (80054f4 <PEF_Compose_Connector_Lock_Req+0x78>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]
    // Body
}
 80054e4:	bf00      	nop
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20001b76 	.word	0x20001b76
 80054ec:	20001d70 	.word	0x20001d70
 80054f0:	20000014 	.word	0x20000014
 80054f4:	20001a7c 	.word	0x20001a7c
 80054f8:	2000000c 	.word	0x2000000c

080054fc <PEF_Compose_Connector_Lock_Cnf>:

void PEF_Compose_Connector_Lock_Cnf(void){
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
	/* Connector Lock Confirm */
    eth_tx_size = 60;
 8005500:	4b19      	ldr	r3, [pc, #100]	@ (8005568 <PEF_Compose_Connector_Lock_Cnf+0x6c>)
 8005502:	223c      	movs	r2, #60	@ 0x3c
 8005504:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 8005506:	f7ff fd25 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800550a:	2100      	movs	r1, #0
 800550c:	4817      	ldr	r0, [pc, #92]	@ (800556c <PEF_Compose_Connector_Lock_Cnf+0x70>)
 800550e:	f7ff fcf5 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 8005512:	2106      	movs	r1, #6
 8005514:	4816      	ldr	r0, [pc, #88]	@ (8005570 <PEF_Compose_Connector_Lock_Cnf+0x74>)
 8005516:	f7ff fcf1 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800551a:	4b16      	ldr	r3, [pc, #88]	@ (8005574 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 800551c:	2288      	movs	r2, #136	@ 0x88
 800551e:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 8005520:	4b14      	ldr	r3, [pc, #80]	@ (8005574 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 8005522:	22e1      	movs	r2, #225	@ 0xe1
 8005524:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 8005526:	4b13      	ldr	r3, [pc, #76]	@ (8005574 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 8005528:	2201      	movs	r2, #1
 800552a:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800552c:	4b11      	ldr	r3, [pc, #68]	@ (8005574 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 800552e:	22e0      	movs	r2, #224	@ 0xe0
 8005530:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 8005532:	4b10      	ldr	r3, [pc, #64]	@ (8005574 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 8005534:	2260      	movs	r2, #96	@ 0x60
 8005536:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 8005538:	4b0e      	ldr	r3, [pc, #56]	@ (8005574 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 800553a:	2200      	movs	r2, #0
 800553c:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800553e:	4b0d      	ldr	r3, [pc, #52]	@ (8005574 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 8005540:	2200      	movs	r2, #0
 8005542:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 8005544:	2113      	movs	r1, #19
 8005546:	480c      	ldr	r0, [pc, #48]	@ (8005578 <PEF_Compose_Connector_Lock_Cnf+0x7c>)
 8005548:	f7ff fcd8 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB0; // Session + State
 800554c:	4b09      	ldr	r3, [pc, #36]	@ (8005574 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 800554e:	22b0      	movs	r2, #176	@ 0xb0
 8005550:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x09; // Function + Message Type
 8005552:	4b08      	ldr	r3, [pc, #32]	@ (8005574 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 8005554:	2209      	movs	r2, #9
 8005556:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 8005558:	4b06      	ldr	r3, [pc, #24]	@ (8005574 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 800555a:	2200      	movs	r2, #0
 800555c:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800555e:	4b05      	ldr	r3, [pc, #20]	@ (8005574 <PEF_Compose_Connector_Lock_Cnf+0x78>)
 8005560:	2200      	movs	r2, #0
 8005562:	771a      	strb	r2, [r3, #28]
    // Body
}
 8005564:	bf00      	nop
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20001b76 	.word	0x20001b76
 800556c:	20001d70 	.word	0x20001d70
 8005570:	2000001c 	.word	0x2000001c
 8005574:	20001a7c 	.word	0x20001a7c
 8005578:	2000000c 	.word	0x2000000c

0800557c <PEF_Compose_Contactor_Close_Cnf>:
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
    eth_tx_buffer[28]=0x00;
    // Body
}

void PEF_Compose_Contactor_Close_Cnf(void){
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
	/* Contactor Close Confirm */
    eth_tx_size = 60;
 8005580:	4b19      	ldr	r3, [pc, #100]	@ (80055e8 <PEF_Compose_Contactor_Close_Cnf+0x6c>)
 8005582:	223c      	movs	r2, #60	@ 0x3c
 8005584:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 8005586:	f7ff fce5 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800558a:	2100      	movs	r1, #0
 800558c:	4817      	ldr	r0, [pc, #92]	@ (80055ec <PEF_Compose_Contactor_Close_Cnf+0x70>)
 800558e:	f7ff fcb5 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 8005592:	2106      	movs	r1, #6
 8005594:	4816      	ldr	r0, [pc, #88]	@ (80055f0 <PEF_Compose_Contactor_Close_Cnf+0x74>)
 8005596:	f7ff fcb1 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800559a:	4b16      	ldr	r3, [pc, #88]	@ (80055f4 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 800559c:	2288      	movs	r2, #136	@ 0x88
 800559e:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 80055a0:	4b14      	ldr	r3, [pc, #80]	@ (80055f4 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 80055a2:	22e1      	movs	r2, #225	@ 0xe1
 80055a4:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 80055a6:	4b13      	ldr	r3, [pc, #76]	@ (80055f4 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 80055a8:	2201      	movs	r2, #1
 80055aa:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 80055ac:	4b11      	ldr	r3, [pc, #68]	@ (80055f4 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 80055ae:	22e0      	movs	r2, #224	@ 0xe0
 80055b0:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 80055b2:	4b10      	ldr	r3, [pc, #64]	@ (80055f4 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 80055b4:	2260      	movs	r2, #96	@ 0x60
 80055b6:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 80055b8:	4b0e      	ldr	r3, [pc, #56]	@ (80055f4 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 80055be:	4b0d      	ldr	r3, [pc, #52]	@ (80055f4 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 80055c4:	2113      	movs	r1, #19
 80055c6:	480c      	ldr	r0, [pc, #48]	@ (80055f8 <PEF_Compose_Contactor_Close_Cnf+0x7c>)
 80055c8:	f7ff fc98 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xC1; // Session + State
 80055cc:	4b09      	ldr	r3, [pc, #36]	@ (80055f4 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 80055ce:	22c1      	movs	r2, #193	@ 0xc1
 80055d0:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x0D; // Function + Message Type
 80055d2:	4b08      	ldr	r3, [pc, #32]	@ (80055f4 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 80055d4:	220d      	movs	r2, #13
 80055d6:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 80055d8:	4b06      	ldr	r3, [pc, #24]	@ (80055f4 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 80055da:	2200      	movs	r2, #0
 80055dc:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 80055de:	4b05      	ldr	r3, [pc, #20]	@ (80055f4 <PEF_Compose_Contactor_Close_Cnf+0x78>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	771a      	strb	r2, [r3, #28]
    // Body
}
 80055e4:	bf00      	nop
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20001b76 	.word	0x20001b76
 80055ec:	20001d70 	.word	0x20001d70
 80055f0:	20000014 	.word	0x20000014
 80055f4:	20001a7c 	.word	0x20001a7c
 80055f8:	2000000c 	.word	0x2000000c

080055fc <PEF_Compose_Charging_Current_Demand_Req>:



void PEF_Compose_Charging_Current_Demand_Req(uint16_t current_request, uint8_t system_fault, uint8_t shift_pos){
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	80fb      	strh	r3, [r7, #6]
 8005606:	460b      	mov	r3, r1
 8005608:	717b      	strb	r3, [r7, #5]
 800560a:	4613      	mov	r3, r2
 800560c:	713b      	strb	r3, [r7, #4]
	myEV.charging_current_request = current_request;
 800560e:	4a2a      	ldr	r2, [pc, #168]	@ (80056b8 <PEF_Compose_Charging_Current_Demand_Req+0xbc>)
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	81d3      	strh	r3, [r2, #14]
	myEV.charging_system_fault = system_fault;
 8005614:	4a28      	ldr	r2, [pc, #160]	@ (80056b8 <PEF_Compose_Charging_Current_Demand_Req+0xbc>)
 8005616:	797b      	ldrb	r3, [r7, #5]
 8005618:	7413      	strb	r3, [r2, #16]
	myEV.vehicle_shift_lever_position = shift_pos;
 800561a:	4a27      	ldr	r2, [pc, #156]	@ (80056b8 <PEF_Compose_Charging_Current_Demand_Req+0xbc>)
 800561c:	793b      	ldrb	r3, [r7, #4]
 800561e:	7453      	strb	r3, [r2, #17]

	/* Charging by Current Demand Request */
    eth_tx_size = 60;
 8005620:	4b26      	ldr	r3, [pc, #152]	@ (80056bc <PEF_Compose_Charging_Current_Demand_Req+0xc0>)
 8005622:	223c      	movs	r2, #60	@ 0x3c
 8005624:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 8005626:	f7ff fc95 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800562a:	2100      	movs	r1, #0
 800562c:	4824      	ldr	r0, [pc, #144]	@ (80056c0 <PEF_Compose_Charging_Current_Demand_Req+0xc4>)
 800562e:	f7ff fc65 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 8005632:	2106      	movs	r1, #6
 8005634:	4823      	ldr	r0, [pc, #140]	@ (80056c4 <PEF_Compose_Charging_Current_Demand_Req+0xc8>)
 8005636:	f7ff fc61 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800563a:	4b23      	ldr	r3, [pc, #140]	@ (80056c8 <PEF_Compose_Charging_Current_Demand_Req+0xcc>)
 800563c:	2288      	movs	r2, #136	@ 0x88
 800563e:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 8005640:	4b21      	ldr	r3, [pc, #132]	@ (80056c8 <PEF_Compose_Charging_Current_Demand_Req+0xcc>)
 8005642:	22e1      	movs	r2, #225	@ 0xe1
 8005644:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 8005646:	4b20      	ldr	r3, [pc, #128]	@ (80056c8 <PEF_Compose_Charging_Current_Demand_Req+0xcc>)
 8005648:	2201      	movs	r2, #1
 800564a:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800564c:	4b1e      	ldr	r3, [pc, #120]	@ (80056c8 <PEF_Compose_Charging_Current_Demand_Req+0xcc>)
 800564e:	22e0      	movs	r2, #224	@ 0xe0
 8005650:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 8005652:	4b1d      	ldr	r3, [pc, #116]	@ (80056c8 <PEF_Compose_Charging_Current_Demand_Req+0xcc>)
 8005654:	2260      	movs	r2, #96	@ 0x60
 8005656:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 8005658:	4b1b      	ldr	r3, [pc, #108]	@ (80056c8 <PEF_Compose_Charging_Current_Demand_Req+0xcc>)
 800565a:	2200      	movs	r2, #0
 800565c:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800565e:	4b1a      	ldr	r3, [pc, #104]	@ (80056c8 <PEF_Compose_Charging_Current_Demand_Req+0xcc>)
 8005660:	2200      	movs	r2, #0
 8005662:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 8005664:	2113      	movs	r1, #19
 8005666:	4819      	ldr	r0, [pc, #100]	@ (80056cc <PEF_Compose_Charging_Current_Demand_Req+0xd0>)
 8005668:	f7ff fc48 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xC1; // Session + State
 800566c:	4b16      	ldr	r3, [pc, #88]	@ (80056c8 <PEF_Compose_Charging_Current_Demand_Req+0xcc>)
 800566e:	22c1      	movs	r2, #193	@ 0xc1
 8005670:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x10; // Function + Message Type
 8005672:	4b15      	ldr	r3, [pc, #84]	@ (80056c8 <PEF_Compose_Charging_Current_Demand_Req+0xcc>)
 8005674:	2210      	movs	r2, #16
 8005676:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 8005678:	4b13      	ldr	r3, [pc, #76]	@ (80056c8 <PEF_Compose_Charging_Current_Demand_Req+0xcc>)
 800567a:	2200      	movs	r2, #0
 800567c:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800567e:	4b12      	ldr	r3, [pc, #72]	@ (80056c8 <PEF_Compose_Charging_Current_Demand_Req+0xcc>)
 8005680:	2200      	movs	r2, #0
 8005682:	771a      	strb	r2, [r3, #28]
    // Body
    eth_tx_buffer[29] = (myEV.charging_current_request >> 8);
 8005684:	4b0c      	ldr	r3, [pc, #48]	@ (80056b8 <PEF_Compose_Charging_Current_Demand_Req+0xbc>)
 8005686:	89db      	ldrh	r3, [r3, #14]
 8005688:	0a1b      	lsrs	r3, r3, #8
 800568a:	b29b      	uxth	r3, r3
 800568c:	b2da      	uxtb	r2, r3
 800568e:	4b0e      	ldr	r3, [pc, #56]	@ (80056c8 <PEF_Compose_Charging_Current_Demand_Req+0xcc>)
 8005690:	775a      	strb	r2, [r3, #29]
    eth_tx_buffer[30] = myEV.charging_current_request;
 8005692:	4b09      	ldr	r3, [pc, #36]	@ (80056b8 <PEF_Compose_Charging_Current_Demand_Req+0xbc>)
 8005694:	89db      	ldrh	r3, [r3, #14]
 8005696:	b2da      	uxtb	r2, r3
 8005698:	4b0b      	ldr	r3, [pc, #44]	@ (80056c8 <PEF_Compose_Charging_Current_Demand_Req+0xcc>)
 800569a:	779a      	strb	r2, [r3, #30]
    eth_tx_buffer[31] = myEV.charging_system_fault;
 800569c:	4b06      	ldr	r3, [pc, #24]	@ (80056b8 <PEF_Compose_Charging_Current_Demand_Req+0xbc>)
 800569e:	7c1a      	ldrb	r2, [r3, #16]
 80056a0:	4b09      	ldr	r3, [pc, #36]	@ (80056c8 <PEF_Compose_Charging_Current_Demand_Req+0xcc>)
 80056a2:	77da      	strb	r2, [r3, #31]
    eth_tx_buffer[32] = myEV.vehicle_shift_lever_position;
 80056a4:	4b04      	ldr	r3, [pc, #16]	@ (80056b8 <PEF_Compose_Charging_Current_Demand_Req+0xbc>)
 80056a6:	7c5a      	ldrb	r2, [r3, #17]
 80056a8:	4b07      	ldr	r3, [pc, #28]	@ (80056c8 <PEF_Compose_Charging_Current_Demand_Req+0xcc>)
 80056aa:	f883 2020 	strb.w	r2, [r3, #32]
}
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20001d80 	.word	0x20001d80
 80056bc:	20001b76 	.word	0x20001b76
 80056c0:	20001d70 	.word	0x20001d70
 80056c4:	20000014 	.word	0x20000014
 80056c8:	20001a7c 	.word	0x20001a7c
 80056cc:	2000000c 	.word	0x2000000c

080056d0 <PEF_Compose_Charging_Current_Demand_Res>:

void PEF_Compose_Charging_Current_Demand_Res(uint8_t station_status, uint16_t output_voltage, uint16_t output_current, uint16_t remaining_charging_time, uint8_t station_mal, uint8_t charge_system_mal){
 80056d0:	b590      	push	{r4, r7, lr}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4604      	mov	r4, r0
 80056d8:	4608      	mov	r0, r1
 80056da:	4611      	mov	r1, r2
 80056dc:	461a      	mov	r2, r3
 80056de:	4623      	mov	r3, r4
 80056e0:	71fb      	strb	r3, [r7, #7]
 80056e2:	4603      	mov	r3, r0
 80056e4:	80bb      	strh	r3, [r7, #4]
 80056e6:	460b      	mov	r3, r1
 80056e8:	807b      	strh	r3, [r7, #2]
 80056ea:	4613      	mov	r3, r2
 80056ec:	803b      	strh	r3, [r7, #0]
	myEVSE.station_status = station_status;
 80056ee:	4a3f      	ldr	r2, [pc, #252]	@ (80057ec <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 80056f0:	79fb      	ldrb	r3, [r7, #7]
 80056f2:	71d3      	strb	r3, [r2, #7]
	myEVSE.output_current = output_current;
 80056f4:	4a3d      	ldr	r2, [pc, #244]	@ (80057ec <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 80056f6:	887b      	ldrh	r3, [r7, #2]
 80056f8:	8153      	strh	r3, [r2, #10]
	myEVSE.output_voltage = output_voltage;
 80056fa:	4a3c      	ldr	r2, [pc, #240]	@ (80057ec <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 80056fc:	88bb      	ldrh	r3, [r7, #4]
 80056fe:	8113      	strh	r3, [r2, #8]
	myEVSE.remaining_charging_time = remaining_charging_time;
 8005700:	4a3a      	ldr	r2, [pc, #232]	@ (80057ec <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 8005702:	883b      	ldrh	r3, [r7, #0]
 8005704:	8193      	strh	r3, [r2, #12]
	myEVSE.station_malfunction = station_mal;
 8005706:	4a39      	ldr	r2, [pc, #228]	@ (80057ec <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 8005708:	7e3b      	ldrb	r3, [r7, #24]
 800570a:	7393      	strb	r3, [r2, #14]
	myEVSE.charging_system_malfunction = charge_system_mal;
 800570c:	4a37      	ldr	r2, [pc, #220]	@ (80057ec <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 800570e:	7f3b      	ldrb	r3, [r7, #28]
 8005710:	73d3      	strb	r3, [r2, #15]

	/* Charging by Current Demand Response */
    eth_tx_size = 60;
 8005712:	4b37      	ldr	r3, [pc, #220]	@ (80057f0 <PEF_Compose_Charging_Current_Demand_Res+0x120>)
 8005714:	223c      	movs	r2, #60	@ 0x3c
 8005716:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 8005718:	f7ff fc1c 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 800571c:	2100      	movs	r1, #0
 800571e:	4835      	ldr	r0, [pc, #212]	@ (80057f4 <PEF_Compose_Charging_Current_Demand_Res+0x124>)
 8005720:	f7ff fbec 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 8005724:	2106      	movs	r1, #6
 8005726:	4834      	ldr	r0, [pc, #208]	@ (80057f8 <PEF_Compose_Charging_Current_Demand_Res+0x128>)
 8005728:	f7ff fbe8 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 800572c:	4b33      	ldr	r3, [pc, #204]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800572e:	2288      	movs	r2, #136	@ 0x88
 8005730:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 8005732:	4b32      	ldr	r3, [pc, #200]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 8005734:	22e1      	movs	r2, #225	@ 0xe1
 8005736:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 8005738:	4b30      	ldr	r3, [pc, #192]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800573a:	2201      	movs	r2, #1
 800573c:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 800573e:	4b2f      	ldr	r3, [pc, #188]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 8005740:	22e0      	movs	r2, #224	@ 0xe0
 8005742:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 8005744:	4b2d      	ldr	r3, [pc, #180]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 8005746:	2260      	movs	r2, #96	@ 0x60
 8005748:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 800574a:	4b2c      	ldr	r3, [pc, #176]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800574c:	2200      	movs	r2, #0
 800574e:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 8005750:	4b2a      	ldr	r3, [pc, #168]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 8005752:	2200      	movs	r2, #0
 8005754:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 8005756:	2113      	movs	r1, #19
 8005758:	4829      	ldr	r0, [pc, #164]	@ (8005800 <PEF_Compose_Charging_Current_Demand_Res+0x130>)
 800575a:	f7ff fbcf 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xC1; // Session + State
 800575e:	4b27      	ldr	r3, [pc, #156]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 8005760:	22c1      	movs	r2, #193	@ 0xc1
 8005762:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x13; // Function + Message Type
 8005764:	4b25      	ldr	r3, [pc, #148]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 8005766:	2213      	movs	r2, #19
 8005768:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 800576a:	4b24      	ldr	r3, [pc, #144]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800576c:	2200      	movs	r2, #0
 800576e:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 8005770:	4b22      	ldr	r3, [pc, #136]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 8005772:	2200      	movs	r2, #0
 8005774:	771a      	strb	r2, [r3, #28]
    // Body
    eth_tx_buffer[29] = myEVSE.station_status;
 8005776:	4b1d      	ldr	r3, [pc, #116]	@ (80057ec <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 8005778:	79da      	ldrb	r2, [r3, #7]
 800577a:	4b20      	ldr	r3, [pc, #128]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800577c:	775a      	strb	r2, [r3, #29]
    eth_tx_buffer[30] = (myEVSE.output_current >> 8);
 800577e:	4b1b      	ldr	r3, [pc, #108]	@ (80057ec <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 8005780:	895b      	ldrh	r3, [r3, #10]
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	b29b      	uxth	r3, r3
 8005786:	b2da      	uxtb	r2, r3
 8005788:	4b1c      	ldr	r3, [pc, #112]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 800578a:	779a      	strb	r2, [r3, #30]
    eth_tx_buffer[31] = myEVSE.output_current;
 800578c:	4b17      	ldr	r3, [pc, #92]	@ (80057ec <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 800578e:	895b      	ldrh	r3, [r3, #10]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	4b1a      	ldr	r3, [pc, #104]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 8005794:	77da      	strb	r2, [r3, #31]
    eth_tx_buffer[32] = (myEVSE.output_voltage >> 8);
 8005796:	4b15      	ldr	r3, [pc, #84]	@ (80057ec <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 8005798:	891b      	ldrh	r3, [r3, #8]
 800579a:	0a1b      	lsrs	r3, r3, #8
 800579c:	b29b      	uxth	r3, r3
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	4b16      	ldr	r3, [pc, #88]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 80057a2:	f883 2020 	strb.w	r2, [r3, #32]
    eth_tx_buffer[33] = myEVSE.output_voltage;
 80057a6:	4b11      	ldr	r3, [pc, #68]	@ (80057ec <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 80057a8:	891b      	ldrh	r3, [r3, #8]
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	4b13      	ldr	r3, [pc, #76]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 80057ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    eth_tx_buffer[34] = (myEVSE.remaining_charging_time >> 8);
 80057b2:	4b0e      	ldr	r3, [pc, #56]	@ (80057ec <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 80057b4:	899b      	ldrh	r3, [r3, #12]
 80057b6:	0a1b      	lsrs	r3, r3, #8
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	4b0f      	ldr	r3, [pc, #60]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 80057be:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    eth_tx_buffer[35] = myEVSE.remaining_charging_time;
 80057c2:	4b0a      	ldr	r3, [pc, #40]	@ (80057ec <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 80057c4:	899b      	ldrh	r3, [r3, #12]
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	4b0c      	ldr	r3, [pc, #48]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 80057ca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    eth_tx_buffer[36] = myEVSE.station_malfunction;
 80057ce:	4b07      	ldr	r3, [pc, #28]	@ (80057ec <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 80057d0:	7b9a      	ldrb	r2, [r3, #14]
 80057d2:	4b0a      	ldr	r3, [pc, #40]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 80057d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    eth_tx_buffer[37] = myEVSE.charging_system_malfunction;
 80057d8:	4b04      	ldr	r3, [pc, #16]	@ (80057ec <PEF_Compose_Charging_Current_Demand_Res+0x11c>)
 80057da:	7bda      	ldrb	r2, [r3, #15]
 80057dc:	4b07      	ldr	r3, [pc, #28]	@ (80057fc <PEF_Compose_Charging_Current_Demand_Res+0x12c>)
 80057de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd90      	pop	{r4, r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20001d94 	.word	0x20001d94
 80057f0:	20001b76 	.word	0x20001b76
 80057f4:	20001d70 	.word	0x20001d70
 80057f8:	2000001c 	.word	0x2000001c
 80057fc:	20001a7c 	.word	0x20001a7c
 8005800:	2000000c 	.word	0x2000000c

08005804 <PEF_Evaluate_Charging_Current_Demand_Req>:
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
    eth_tx_buffer[28]=0x00;
    // Body
}

void PEF_Evaluate_Charging_Current_Demand_Req(void){
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
	myEV.charging_current_request = (eth_rx_buffer[29] << 8) + eth_rx_buffer[30];
 8005808:	4b0e      	ldr	r3, [pc, #56]	@ (8005844 <PEF_Evaluate_Charging_Current_Demand_Req+0x40>)
 800580a:	7f5b      	ldrb	r3, [r3, #29]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	b29b      	uxth	r3, r3
 8005810:	4a0c      	ldr	r2, [pc, #48]	@ (8005844 <PEF_Evaluate_Charging_Current_Demand_Req+0x40>)
 8005812:	7f92      	ldrb	r2, [r2, #30]
 8005814:	4413      	add	r3, r2
 8005816:	b29a      	uxth	r2, r3
 8005818:	4b0b      	ldr	r3, [pc, #44]	@ (8005848 <PEF_Evaluate_Charging_Current_Demand_Req+0x44>)
 800581a:	81da      	strh	r2, [r3, #14]
	myEV.charging_system_fault = eth_rx_buffer[31];
 800581c:	4b09      	ldr	r3, [pc, #36]	@ (8005844 <PEF_Evaluate_Charging_Current_Demand_Req+0x40>)
 800581e:	7fda      	ldrb	r2, [r3, #31]
 8005820:	4b09      	ldr	r3, [pc, #36]	@ (8005848 <PEF_Evaluate_Charging_Current_Demand_Req+0x44>)
 8005822:	741a      	strb	r2, [r3, #16]
	myEV.vehicle_shift_lever_position = eth_rx_buffer[32];
 8005824:	4b07      	ldr	r3, [pc, #28]	@ (8005844 <PEF_Evaluate_Charging_Current_Demand_Req+0x40>)
 8005826:	f893 2020 	ldrb.w	r2, [r3, #32]
 800582a:	4b07      	ldr	r3, [pc, #28]	@ (8005848 <PEF_Evaluate_Charging_Current_Demand_Req+0x44>)
 800582c:	745a      	strb	r2, [r3, #17]
	myEV.current_battery = eth_rx_buffer[33];
 800582e:	4b05      	ldr	r3, [pc, #20]	@ (8005844 <PEF_Evaluate_Charging_Current_Demand_Req+0x40>)
 8005830:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005834:	461a      	mov	r2, r3
 8005836:	4b04      	ldr	r3, [pc, #16]	@ (8005848 <PEF_Evaluate_Charging_Current_Demand_Req+0x44>)
 8005838:	809a      	strh	r2, [r3, #4]
}
 800583a:	bf00      	nop
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	20001b78 	.word	0x20001b78
 8005848:	20001d80 	.word	0x20001d80

0800584c <PEF_Evaluate_Charging_Current_Demand_Res>:

void PEF_Evaluate_Charging_Current_Demand_Res(void){
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
	myEVSE.station_status = eth_rx_buffer[29];
 8005850:	4b1a      	ldr	r3, [pc, #104]	@ (80058bc <PEF_Evaluate_Charging_Current_Demand_Res+0x70>)
 8005852:	7f5a      	ldrb	r2, [r3, #29]
 8005854:	4b1a      	ldr	r3, [pc, #104]	@ (80058c0 <PEF_Evaluate_Charging_Current_Demand_Res+0x74>)
 8005856:	71da      	strb	r2, [r3, #7]
	myEVSE.output_current = (eth_rx_buffer[30] << 8) + eth_rx_buffer[31];
 8005858:	4b18      	ldr	r3, [pc, #96]	@ (80058bc <PEF_Evaluate_Charging_Current_Demand_Res+0x70>)
 800585a:	7f9b      	ldrb	r3, [r3, #30]
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	b29b      	uxth	r3, r3
 8005860:	4a16      	ldr	r2, [pc, #88]	@ (80058bc <PEF_Evaluate_Charging_Current_Demand_Res+0x70>)
 8005862:	7fd2      	ldrb	r2, [r2, #31]
 8005864:	4413      	add	r3, r2
 8005866:	b29a      	uxth	r2, r3
 8005868:	4b15      	ldr	r3, [pc, #84]	@ (80058c0 <PEF_Evaluate_Charging_Current_Demand_Res+0x74>)
 800586a:	815a      	strh	r2, [r3, #10]
	myEVSE.output_voltage = (eth_rx_buffer[32] << 8) + eth_rx_buffer[33];
 800586c:	4b13      	ldr	r3, [pc, #76]	@ (80058bc <PEF_Evaluate_Charging_Current_Demand_Res+0x70>)
 800586e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	b29b      	uxth	r3, r3
 8005876:	4a11      	ldr	r2, [pc, #68]	@ (80058bc <PEF_Evaluate_Charging_Current_Demand_Res+0x70>)
 8005878:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 800587c:	4413      	add	r3, r2
 800587e:	b29a      	uxth	r2, r3
 8005880:	4b0f      	ldr	r3, [pc, #60]	@ (80058c0 <PEF_Evaluate_Charging_Current_Demand_Res+0x74>)
 8005882:	811a      	strh	r2, [r3, #8]
	myEVSE.remaining_charging_time = (eth_rx_buffer[34] << 8) + eth_rx_buffer[35];
 8005884:	4b0d      	ldr	r3, [pc, #52]	@ (80058bc <PEF_Evaluate_Charging_Current_Demand_Res+0x70>)
 8005886:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800588a:	021b      	lsls	r3, r3, #8
 800588c:	b29b      	uxth	r3, r3
 800588e:	4a0b      	ldr	r2, [pc, #44]	@ (80058bc <PEF_Evaluate_Charging_Current_Demand_Res+0x70>)
 8005890:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8005894:	4413      	add	r3, r2
 8005896:	b29a      	uxth	r2, r3
 8005898:	4b09      	ldr	r3, [pc, #36]	@ (80058c0 <PEF_Evaluate_Charging_Current_Demand_Res+0x74>)
 800589a:	819a      	strh	r2, [r3, #12]
	myEVSE.station_malfunction = eth_rx_buffer[36];
 800589c:	4b07      	ldr	r3, [pc, #28]	@ (80058bc <PEF_Evaluate_Charging_Current_Demand_Res+0x70>)
 800589e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80058a2:	4b07      	ldr	r3, [pc, #28]	@ (80058c0 <PEF_Evaluate_Charging_Current_Demand_Res+0x74>)
 80058a4:	739a      	strb	r2, [r3, #14]
	myEVSE.charging_system_malfunction = eth_rx_buffer[37];
 80058a6:	4b05      	ldr	r3, [pc, #20]	@ (80058bc <PEF_Evaluate_Charging_Current_Demand_Res+0x70>)
 80058a8:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80058ac:	4b04      	ldr	r3, [pc, #16]	@ (80058c0 <PEF_Evaluate_Charging_Current_Demand_Res+0x74>)
 80058ae:	73da      	strb	r2, [r3, #15]
}
 80058b0:	bf00      	nop
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20001b78 	.word	0x20001b78
 80058c0:	20001d94 	.word	0x20001d94

080058c4 <PEF_Compose_Current_Suppression_Req>:



void PEF_Compose_Current_Suppression_Req(void){
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
	myEV.vehicle_charging_enabled = 0xAA;
 80058c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005940 <PEF_Compose_Current_Suppression_Req+0x7c>)
 80058ca:	22aa      	movs	r2, #170	@ 0xaa
 80058cc:	731a      	strb	r2, [r3, #12]

	/* Current Suppression Request */
    eth_tx_size = 60;
 80058ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005944 <PEF_Compose_Current_Suppression_Req+0x80>)
 80058d0:	223c      	movs	r2, #60	@ 0x3c
 80058d2:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 80058d4:	f7ff fb3e 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 80058d8:	2100      	movs	r1, #0
 80058da:	481b      	ldr	r0, [pc, #108]	@ (8005948 <PEF_Compose_Current_Suppression_Req+0x84>)
 80058dc:	f7ff fb0e 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 80058e0:	2106      	movs	r1, #6
 80058e2:	481a      	ldr	r0, [pc, #104]	@ (800594c <PEF_Compose_Current_Suppression_Req+0x88>)
 80058e4:	f7ff fb0a 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 80058e8:	4b19      	ldr	r3, [pc, #100]	@ (8005950 <PEF_Compose_Current_Suppression_Req+0x8c>)
 80058ea:	2288      	movs	r2, #136	@ 0x88
 80058ec:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 80058ee:	4b18      	ldr	r3, [pc, #96]	@ (8005950 <PEF_Compose_Current_Suppression_Req+0x8c>)
 80058f0:	22e1      	movs	r2, #225	@ 0xe1
 80058f2:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 80058f4:	4b16      	ldr	r3, [pc, #88]	@ (8005950 <PEF_Compose_Current_Suppression_Req+0x8c>)
 80058f6:	2201      	movs	r2, #1
 80058f8:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 80058fa:	4b15      	ldr	r3, [pc, #84]	@ (8005950 <PEF_Compose_Current_Suppression_Req+0x8c>)
 80058fc:	22e0      	movs	r2, #224	@ 0xe0
 80058fe:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 8005900:	4b13      	ldr	r3, [pc, #76]	@ (8005950 <PEF_Compose_Current_Suppression_Req+0x8c>)
 8005902:	2260      	movs	r2, #96	@ 0x60
 8005904:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 8005906:	4b12      	ldr	r3, [pc, #72]	@ (8005950 <PEF_Compose_Current_Suppression_Req+0x8c>)
 8005908:	2200      	movs	r2, #0
 800590a:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 800590c:	4b10      	ldr	r3, [pc, #64]	@ (8005950 <PEF_Compose_Current_Suppression_Req+0x8c>)
 800590e:	2200      	movs	r2, #0
 8005910:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 8005912:	2113      	movs	r1, #19
 8005914:	480f      	ldr	r0, [pc, #60]	@ (8005954 <PEF_Compose_Current_Suppression_Req+0x90>)
 8005916:	f7ff faf1 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xC1; // Session + State
 800591a:	4b0d      	ldr	r3, [pc, #52]	@ (8005950 <PEF_Compose_Current_Suppression_Req+0x8c>)
 800591c:	22c1      	movs	r2, #193	@ 0xc1
 800591e:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x14; // Function + Message Type
 8005920:	4b0b      	ldr	r3, [pc, #44]	@ (8005950 <PEF_Compose_Current_Suppression_Req+0x8c>)
 8005922:	2214      	movs	r2, #20
 8005924:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 8005926:	4b0a      	ldr	r3, [pc, #40]	@ (8005950 <PEF_Compose_Current_Suppression_Req+0x8c>)
 8005928:	2200      	movs	r2, #0
 800592a:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 800592c:	4b08      	ldr	r3, [pc, #32]	@ (8005950 <PEF_Compose_Current_Suppression_Req+0x8c>)
 800592e:	2200      	movs	r2, #0
 8005930:	771a      	strb	r2, [r3, #28]
    // Body
    eth_tx_buffer[29] = myEV.vehicle_charging_enabled;
 8005932:	4b03      	ldr	r3, [pc, #12]	@ (8005940 <PEF_Compose_Current_Suppression_Req+0x7c>)
 8005934:	7b1a      	ldrb	r2, [r3, #12]
 8005936:	4b06      	ldr	r3, [pc, #24]	@ (8005950 <PEF_Compose_Current_Suppression_Req+0x8c>)
 8005938:	775a      	strb	r2, [r3, #29]
}
 800593a:	bf00      	nop
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20001d80 	.word	0x20001d80
 8005944:	20001b76 	.word	0x20001b76
 8005948:	20001d70 	.word	0x20001d70
 800594c:	20000014 	.word	0x20000014
 8005950:	20001a7c 	.word	0x20001a7c
 8005954:	2000000c 	.word	0x2000000c

08005958 <PEF_Compose_Current_Suppression_Res>:

void PEF_Compose_Current_Suppression_Res(uint8_t station_status, uint8_t charging_stop_control, uint16_t output_voltage, uint16_t output_current){
 8005958:	b590      	push	{r4, r7, lr}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	4604      	mov	r4, r0
 8005960:	4608      	mov	r0, r1
 8005962:	4611      	mov	r1, r2
 8005964:	461a      	mov	r2, r3
 8005966:	4623      	mov	r3, r4
 8005968:	71fb      	strb	r3, [r7, #7]
 800596a:	4603      	mov	r3, r0
 800596c:	71bb      	strb	r3, [r7, #6]
 800596e:	460b      	mov	r3, r1
 8005970:	80bb      	strh	r3, [r7, #4]
 8005972:	4613      	mov	r3, r2
 8005974:	807b      	strh	r3, [r7, #2]
	myEVSE.station_status = station_status;
 8005976:	4a32      	ldr	r2, [pc, #200]	@ (8005a40 <PEF_Compose_Current_Suppression_Res+0xe8>)
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	71d3      	strb	r3, [r2, #7]
	myEVSE.charging_stop_control = charging_stop_control;
 800597c:	4a30      	ldr	r2, [pc, #192]	@ (8005a40 <PEF_Compose_Current_Suppression_Res+0xe8>)
 800597e:	79bb      	ldrb	r3, [r7, #6]
 8005980:	7413      	strb	r3, [r2, #16]
	myEVSE.output_voltage = output_voltage;
 8005982:	4a2f      	ldr	r2, [pc, #188]	@ (8005a40 <PEF_Compose_Current_Suppression_Res+0xe8>)
 8005984:	88bb      	ldrh	r3, [r7, #4]
 8005986:	8113      	strh	r3, [r2, #8]
	myEVSE.output_current = output_current;
 8005988:	4a2d      	ldr	r2, [pc, #180]	@ (8005a40 <PEF_Compose_Current_Suppression_Res+0xe8>)
 800598a:	887b      	ldrh	r3, [r7, #2]
 800598c:	8153      	strh	r3, [r2, #10]

	/* Current Suppression Response */
    eth_tx_size = 60;
 800598e:	4b2d      	ldr	r3, [pc, #180]	@ (8005a44 <PEF_Compose_Current_Suppression_Res+0xec>)
 8005990:	223c      	movs	r2, #60	@ 0x3c
 8005992:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 8005994:	f7ff fade 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 8005998:	2100      	movs	r1, #0
 800599a:	482b      	ldr	r0, [pc, #172]	@ (8005a48 <PEF_Compose_Current_Suppression_Res+0xf0>)
 800599c:	f7ff faae 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 80059a0:	2106      	movs	r1, #6
 80059a2:	482a      	ldr	r0, [pc, #168]	@ (8005a4c <PEF_Compose_Current_Suppression_Res+0xf4>)
 80059a4:	f7ff faaa 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 80059a8:	4b29      	ldr	r3, [pc, #164]	@ (8005a50 <PEF_Compose_Current_Suppression_Res+0xf8>)
 80059aa:	2288      	movs	r2, #136	@ 0x88
 80059ac:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 80059ae:	4b28      	ldr	r3, [pc, #160]	@ (8005a50 <PEF_Compose_Current_Suppression_Res+0xf8>)
 80059b0:	22e1      	movs	r2, #225	@ 0xe1
 80059b2:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 80059b4:	4b26      	ldr	r3, [pc, #152]	@ (8005a50 <PEF_Compose_Current_Suppression_Res+0xf8>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 80059ba:	4b25      	ldr	r3, [pc, #148]	@ (8005a50 <PEF_Compose_Current_Suppression_Res+0xf8>)
 80059bc:	22e0      	movs	r2, #224	@ 0xe0
 80059be:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 80059c0:	4b23      	ldr	r3, [pc, #140]	@ (8005a50 <PEF_Compose_Current_Suppression_Res+0xf8>)
 80059c2:	2260      	movs	r2, #96	@ 0x60
 80059c4:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 80059c6:	4b22      	ldr	r3, [pc, #136]	@ (8005a50 <PEF_Compose_Current_Suppression_Res+0xf8>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 80059cc:	4b20      	ldr	r3, [pc, #128]	@ (8005a50 <PEF_Compose_Current_Suppression_Res+0xf8>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 80059d2:	2113      	movs	r1, #19
 80059d4:	481f      	ldr	r0, [pc, #124]	@ (8005a54 <PEF_Compose_Current_Suppression_Res+0xfc>)
 80059d6:	f7ff fa91 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xC1; // Session + State
 80059da:	4b1d      	ldr	r3, [pc, #116]	@ (8005a50 <PEF_Compose_Current_Suppression_Res+0xf8>)
 80059dc:	22c1      	movs	r2, #193	@ 0xc1
 80059de:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x17; // Function + Message Type
 80059e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a50 <PEF_Compose_Current_Suppression_Res+0xf8>)
 80059e2:	2217      	movs	r2, #23
 80059e4:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 80059e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005a50 <PEF_Compose_Current_Suppression_Res+0xf8>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 80059ec:	4b18      	ldr	r3, [pc, #96]	@ (8005a50 <PEF_Compose_Current_Suppression_Res+0xf8>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	771a      	strb	r2, [r3, #28]
    // Body
	eth_tx_buffer[29] = myEVSE.station_status;
 80059f2:	4b13      	ldr	r3, [pc, #76]	@ (8005a40 <PEF_Compose_Current_Suppression_Res+0xe8>)
 80059f4:	79da      	ldrb	r2, [r3, #7]
 80059f6:	4b16      	ldr	r3, [pc, #88]	@ (8005a50 <PEF_Compose_Current_Suppression_Res+0xf8>)
 80059f8:	775a      	strb	r2, [r3, #29]
	eth_tx_buffer[30] = myEVSE.charging_stop_control;
 80059fa:	4b11      	ldr	r3, [pc, #68]	@ (8005a40 <PEF_Compose_Current_Suppression_Res+0xe8>)
 80059fc:	7c1a      	ldrb	r2, [r3, #16]
 80059fe:	4b14      	ldr	r3, [pc, #80]	@ (8005a50 <PEF_Compose_Current_Suppression_Res+0xf8>)
 8005a00:	779a      	strb	r2, [r3, #30]
	eth_tx_buffer[31] = (myEVSE.output_voltage >> 8);
 8005a02:	4b0f      	ldr	r3, [pc, #60]	@ (8005a40 <PEF_Compose_Current_Suppression_Res+0xe8>)
 8005a04:	891b      	ldrh	r3, [r3, #8]
 8005a06:	0a1b      	lsrs	r3, r3, #8
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	4b10      	ldr	r3, [pc, #64]	@ (8005a50 <PEF_Compose_Current_Suppression_Res+0xf8>)
 8005a0e:	77da      	strb	r2, [r3, #31]
	eth_tx_buffer[32] = myEVSE.output_voltage;
 8005a10:	4b0b      	ldr	r3, [pc, #44]	@ (8005a40 <PEF_Compose_Current_Suppression_Res+0xe8>)
 8005a12:	891b      	ldrh	r3, [r3, #8]
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	4b0e      	ldr	r3, [pc, #56]	@ (8005a50 <PEF_Compose_Current_Suppression_Res+0xf8>)
 8005a18:	f883 2020 	strb.w	r2, [r3, #32]
	eth_tx_buffer[33] = (myEVSE.output_current >>8);
 8005a1c:	4b08      	ldr	r3, [pc, #32]	@ (8005a40 <PEF_Compose_Current_Suppression_Res+0xe8>)
 8005a1e:	895b      	ldrh	r3, [r3, #10]
 8005a20:	0a1b      	lsrs	r3, r3, #8
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	4b0a      	ldr	r3, [pc, #40]	@ (8005a50 <PEF_Compose_Current_Suppression_Res+0xf8>)
 8005a28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	eth_tx_buffer[34] = myEVSE.output_current;
 8005a2c:	4b04      	ldr	r3, [pc, #16]	@ (8005a40 <PEF_Compose_Current_Suppression_Res+0xe8>)
 8005a2e:	895b      	ldrh	r3, [r3, #10]
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	4b07      	ldr	r3, [pc, #28]	@ (8005a50 <PEF_Compose_Current_Suppression_Res+0xf8>)
 8005a34:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd90      	pop	{r4, r7, pc}
 8005a40:	20001d94 	.word	0x20001d94
 8005a44:	20001b76 	.word	0x20001b76
 8005a48:	20001d70 	.word	0x20001d70
 8005a4c:	2000001c 	.word	0x2000001c
 8005a50:	20001a7c 	.word	0x20001a7c
 8005a54:	2000000c 	.word	0x2000000c

08005a58 <PEF_Compose_Current_Suppression_Cnf>:

void PEF_Compose_Current_Suppression_Cnf(void){
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
	/* Current Suppression Confirm */
    eth_tx_size = 60;
 8005a5c:	4b19      	ldr	r3, [pc, #100]	@ (8005ac4 <PEF_Compose_Current_Suppression_Cnf+0x6c>)
 8005a5e:	223c      	movs	r2, #60	@ 0x3c
 8005a60:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 8005a62:	f7ff fa77 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 8005a66:	2100      	movs	r1, #0
 8005a68:	4817      	ldr	r0, [pc, #92]	@ (8005ac8 <PEF_Compose_Current_Suppression_Cnf+0x70>)
 8005a6a:	f7ff fa47 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 8005a6e:	2106      	movs	r1, #6
 8005a70:	4816      	ldr	r0, [pc, #88]	@ (8005acc <PEF_Compose_Current_Suppression_Cnf+0x74>)
 8005a72:	f7ff fa43 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 8005a76:	4b16      	ldr	r3, [pc, #88]	@ (8005ad0 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 8005a78:	2288      	movs	r2, #136	@ 0x88
 8005a7a:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 8005a7c:	4b14      	ldr	r3, [pc, #80]	@ (8005ad0 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 8005a7e:	22e1      	movs	r2, #225	@ 0xe1
 8005a80:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 8005a82:	4b13      	ldr	r3, [pc, #76]	@ (8005ad0 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 8005a84:	2201      	movs	r2, #1
 8005a86:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 8005a88:	4b11      	ldr	r3, [pc, #68]	@ (8005ad0 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 8005a8a:	22e0      	movs	r2, #224	@ 0xe0
 8005a8c:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 8005a8e:	4b10      	ldr	r3, [pc, #64]	@ (8005ad0 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 8005a90:	2260      	movs	r2, #96	@ 0x60
 8005a92:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 8005a94:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad0 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 8005a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad0 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 8005aa0:	2113      	movs	r1, #19
 8005aa2:	480c      	ldr	r0, [pc, #48]	@ (8005ad4 <PEF_Compose_Current_Suppression_Cnf+0x7c>)
 8005aa4:	f7ff fa2a 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xC1; // Session + State
 8005aa8:	4b09      	ldr	r3, [pc, #36]	@ (8005ad0 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 8005aaa:	22c1      	movs	r2, #193	@ 0xc1
 8005aac:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x15; // Function + Message Type
 8005aae:	4b08      	ldr	r3, [pc, #32]	@ (8005ad0 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 8005ab0:	2215      	movs	r2, #21
 8005ab2:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 8005ab4:	4b06      	ldr	r3, [pc, #24]	@ (8005ad0 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 8005aba:	4b05      	ldr	r3, [pc, #20]	@ (8005ad0 <PEF_Compose_Current_Suppression_Cnf+0x78>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	771a      	strb	r2, [r3, #28]
    // Body
}
 8005ac0:	bf00      	nop
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	20001b76 	.word	0x20001b76
 8005ac8:	20001d70 	.word	0x20001d70
 8005acc:	20000014 	.word	0x20000014
 8005ad0:	20001a7c 	.word	0x20001a7c
 8005ad4:	2000000c 	.word	0x2000000c

08005ad8 <PEF_Evaluate_Current_Suppression_Res>:

void PEF_Evaluate_Current_Suppression_Res(void){
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
	myEVSE.station_status = eth_rx_buffer[29];
 8005adc:	4b11      	ldr	r3, [pc, #68]	@ (8005b24 <PEF_Evaluate_Current_Suppression_Res+0x4c>)
 8005ade:	7f5a      	ldrb	r2, [r3, #29]
 8005ae0:	4b11      	ldr	r3, [pc, #68]	@ (8005b28 <PEF_Evaluate_Current_Suppression_Res+0x50>)
 8005ae2:	71da      	strb	r2, [r3, #7]
	myEVSE.charging_stop_control = eth_rx_buffer[30];
 8005ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8005b24 <PEF_Evaluate_Current_Suppression_Res+0x4c>)
 8005ae6:	7f9a      	ldrb	r2, [r3, #30]
 8005ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8005b28 <PEF_Evaluate_Current_Suppression_Res+0x50>)
 8005aea:	741a      	strb	r2, [r3, #16]
	myEVSE.output_voltage = (eth_rx_buffer[31] << 8) + eth_rx_buffer[32];
 8005aec:	4b0d      	ldr	r3, [pc, #52]	@ (8005b24 <PEF_Evaluate_Current_Suppression_Res+0x4c>)
 8005aee:	7fdb      	ldrb	r3, [r3, #31]
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	4a0b      	ldr	r2, [pc, #44]	@ (8005b24 <PEF_Evaluate_Current_Suppression_Res+0x4c>)
 8005af6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005afa:	4413      	add	r3, r2
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	4b0a      	ldr	r3, [pc, #40]	@ (8005b28 <PEF_Evaluate_Current_Suppression_Res+0x50>)
 8005b00:	811a      	strh	r2, [r3, #8]
	myEVSE.output_current = (eth_rx_buffer[33] << 8) + eth_rx_buffer[34];
 8005b02:	4b08      	ldr	r3, [pc, #32]	@ (8005b24 <PEF_Evaluate_Current_Suppression_Res+0x4c>)
 8005b04:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005b08:	021b      	lsls	r3, r3, #8
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	4a05      	ldr	r2, [pc, #20]	@ (8005b24 <PEF_Evaluate_Current_Suppression_Res+0x4c>)
 8005b0e:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8005b12:	4413      	add	r3, r2
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	4b04      	ldr	r3, [pc, #16]	@ (8005b28 <PEF_Evaluate_Current_Suppression_Res+0x50>)
 8005b18:	815a      	strh	r2, [r3, #10]
}
 8005b1a:	bf00      	nop
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	20001b78 	.word	0x20001b78
 8005b28:	20001d94 	.word	0x20001d94

08005b2c <PEF_Compose_Zero_Current_Confirm_Req>:



void PEF_Compose_Zero_Current_Confirm_Req(void){
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
	/* Zero Current Confirm Request */
    eth_tx_size = 60;
 8005b30:	4b19      	ldr	r3, [pc, #100]	@ (8005b98 <PEF_Compose_Zero_Current_Confirm_Req+0x6c>)
 8005b32:	223c      	movs	r2, #60	@ 0x3c
 8005b34:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 8005b36:	f7ff fa0d 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4817      	ldr	r0, [pc, #92]	@ (8005b9c <PEF_Compose_Zero_Current_Confirm_Req+0x70>)
 8005b3e:	f7ff f9dd 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 8005b42:	2106      	movs	r1, #6
 8005b44:	4816      	ldr	r0, [pc, #88]	@ (8005ba0 <PEF_Compose_Zero_Current_Confirm_Req+0x74>)
 8005b46:	f7ff f9d9 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 8005b4a:	4b16      	ldr	r3, [pc, #88]	@ (8005ba4 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 8005b4c:	2288      	movs	r2, #136	@ 0x88
 8005b4e:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 8005b50:	4b14      	ldr	r3, [pc, #80]	@ (8005ba4 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 8005b52:	22e1      	movs	r2, #225	@ 0xe1
 8005b54:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 8005b56:	4b13      	ldr	r3, [pc, #76]	@ (8005ba4 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 8005b58:	2201      	movs	r2, #1
 8005b5a:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 8005b5c:	4b11      	ldr	r3, [pc, #68]	@ (8005ba4 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 8005b5e:	22e0      	movs	r2, #224	@ 0xe0
 8005b60:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 8005b62:	4b10      	ldr	r3, [pc, #64]	@ (8005ba4 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 8005b64:	2260      	movs	r2, #96	@ 0x60
 8005b66:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 8005b68:	4b0e      	ldr	r3, [pc, #56]	@ (8005ba4 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 8005b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba4 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 8005b74:	2113      	movs	r1, #19
 8005b76:	480c      	ldr	r0, [pc, #48]	@ (8005ba8 <PEF_Compose_Zero_Current_Confirm_Req+0x7c>)
 8005b78:	f7ff f9c0 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB2; // Session + State
 8005b7c:	4b09      	ldr	r3, [pc, #36]	@ (8005ba4 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 8005b7e:	22b2      	movs	r2, #178	@ 0xb2
 8005b80:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x18; // Function + Message Type
 8005b82:	4b08      	ldr	r3, [pc, #32]	@ (8005ba4 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 8005b84:	2218      	movs	r2, #24
 8005b86:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 8005b88:	4b06      	ldr	r3, [pc, #24]	@ (8005ba4 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 8005b8e:	4b05      	ldr	r3, [pc, #20]	@ (8005ba4 <PEF_Compose_Zero_Current_Confirm_Req+0x78>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	771a      	strb	r2, [r3, #28]
    // Body
}
 8005b94:	bf00      	nop
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20001b76 	.word	0x20001b76
 8005b9c:	20001d70 	.word	0x20001d70
 8005ba0:	2000001c 	.word	0x2000001c
 8005ba4:	20001a7c 	.word	0x20001a7c
 8005ba8:	2000000c 	.word	0x2000000c

08005bac <PEF_Compose_Zero_Current_Confirm_Cnf>:

void PEF_Compose_Zero_Current_Confirm_Cnf(void){
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
	/* Zero Current Confirm */
    eth_tx_size = 60;
 8005bb0:	4b19      	ldr	r3, [pc, #100]	@ (8005c18 <PEF_Compose_Zero_Current_Confirm_Cnf+0x6c>)
 8005bb2:	223c      	movs	r2, #60	@ 0x3c
 8005bb4:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 8005bb6:	f7ff f9cd 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 8005bba:	2100      	movs	r1, #0
 8005bbc:	4817      	ldr	r0, [pc, #92]	@ (8005c1c <PEF_Compose_Zero_Current_Confirm_Cnf+0x70>)
 8005bbe:	f7ff f99d 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 8005bc2:	2106      	movs	r1, #6
 8005bc4:	4816      	ldr	r0, [pc, #88]	@ (8005c20 <PEF_Compose_Zero_Current_Confirm_Cnf+0x74>)
 8005bc6:	f7ff f999 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 8005bca:	4b16      	ldr	r3, [pc, #88]	@ (8005c24 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 8005bcc:	2288      	movs	r2, #136	@ 0x88
 8005bce:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 8005bd0:	4b14      	ldr	r3, [pc, #80]	@ (8005c24 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 8005bd2:	22e1      	movs	r2, #225	@ 0xe1
 8005bd4:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 8005bd6:	4b13      	ldr	r3, [pc, #76]	@ (8005c24 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 8005bd8:	2201      	movs	r2, #1
 8005bda:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 8005bdc:	4b11      	ldr	r3, [pc, #68]	@ (8005c24 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 8005bde:	22e0      	movs	r2, #224	@ 0xe0
 8005be0:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 8005be2:	4b10      	ldr	r3, [pc, #64]	@ (8005c24 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 8005be4:	2260      	movs	r2, #96	@ 0x60
 8005be6:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 8005be8:	4b0e      	ldr	r3, [pc, #56]	@ (8005c24 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 8005bee:	4b0d      	ldr	r3, [pc, #52]	@ (8005c24 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 8005bf4:	2113      	movs	r1, #19
 8005bf6:	480c      	ldr	r0, [pc, #48]	@ (8005c28 <PEF_Compose_Zero_Current_Confirm_Cnf+0x7c>)
 8005bf8:	f7ff f980 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB2; // Session + State
 8005bfc:	4b09      	ldr	r3, [pc, #36]	@ (8005c24 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 8005bfe:	22b2      	movs	r2, #178	@ 0xb2
 8005c00:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x19; // Function + Message Type
 8005c02:	4b08      	ldr	r3, [pc, #32]	@ (8005c24 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 8005c04:	2219      	movs	r2, #25
 8005c06:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 8005c08:	4b06      	ldr	r3, [pc, #24]	@ (8005c24 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 8005c0e:	4b05      	ldr	r3, [pc, #20]	@ (8005c24 <PEF_Compose_Zero_Current_Confirm_Cnf+0x78>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	771a      	strb	r2, [r3, #28]
    // Body
}
 8005c14:	bf00      	nop
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	20001b76 	.word	0x20001b76
 8005c1c:	20001d70 	.word	0x20001d70
 8005c20:	20000014 	.word	0x20000014
 8005c24:	20001a7c 	.word	0x20001a7c
 8005c28:	2000000c 	.word	0x2000000c

08005c2c <PEF_Compose_Voltage_Verification_Req>:



void PEF_Compose_Voltage_Verification_Req(uint16_t output_voltage){
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	4603      	mov	r3, r0
 8005c34:	80fb      	strh	r3, [r7, #6]
	myEVSE.output_voltage = output_voltage;
 8005c36:	4a22      	ldr	r2, [pc, #136]	@ (8005cc0 <PEF_Compose_Voltage_Verification_Req+0x94>)
 8005c38:	88fb      	ldrh	r3, [r7, #6]
 8005c3a:	8113      	strh	r3, [r2, #8]

	/* Voltage Verification Request */
    eth_tx_size = 60;
 8005c3c:	4b21      	ldr	r3, [pc, #132]	@ (8005cc4 <PEF_Compose_Voltage_Verification_Req+0x98>)
 8005c3e:	223c      	movs	r2, #60	@ 0x3c
 8005c40:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 8005c42:	f7ff f987 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 8005c46:	2100      	movs	r1, #0
 8005c48:	481f      	ldr	r0, [pc, #124]	@ (8005cc8 <PEF_Compose_Voltage_Verification_Req+0x9c>)
 8005c4a:	f7ff f957 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 8005c4e:	2106      	movs	r1, #6
 8005c50:	481e      	ldr	r0, [pc, #120]	@ (8005ccc <PEF_Compose_Voltage_Verification_Req+0xa0>)
 8005c52:	f7ff f953 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 8005c56:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd0 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 8005c58:	2288      	movs	r2, #136	@ 0x88
 8005c5a:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 8005c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8005cd0 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 8005c5e:	22e1      	movs	r2, #225	@ 0xe1
 8005c60:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 8005c62:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd0 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 8005c68:	4b19      	ldr	r3, [pc, #100]	@ (8005cd0 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 8005c6a:	22e0      	movs	r2, #224	@ 0xe0
 8005c6c:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 8005c6e:	4b18      	ldr	r3, [pc, #96]	@ (8005cd0 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 8005c70:	2260      	movs	r2, #96	@ 0x60
 8005c72:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 8005c74:	4b16      	ldr	r3, [pc, #88]	@ (8005cd0 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 8005c7a:	4b15      	ldr	r3, [pc, #84]	@ (8005cd0 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 8005c80:	2113      	movs	r1, #19
 8005c82:	4814      	ldr	r0, [pc, #80]	@ (8005cd4 <PEF_Compose_Voltage_Verification_Req+0xa8>)
 8005c84:	f7ff f93a 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB2; // Session + State
 8005c88:	4b11      	ldr	r3, [pc, #68]	@ (8005cd0 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 8005c8a:	22b2      	movs	r2, #178	@ 0xb2
 8005c8c:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x1C; // Function + Message Type
 8005c8e:	4b10      	ldr	r3, [pc, #64]	@ (8005cd0 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 8005c90:	221c      	movs	r2, #28
 8005c92:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 8005c94:	4b0e      	ldr	r3, [pc, #56]	@ (8005cd0 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 8005c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005cd0 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	771a      	strb	r2, [r3, #28]
    // Body
    eth_tx_buffer[29] = (myEVSE.output_voltage >> 8);
 8005ca0:	4b07      	ldr	r3, [pc, #28]	@ (8005cc0 <PEF_Compose_Voltage_Verification_Req+0x94>)
 8005ca2:	891b      	ldrh	r3, [r3, #8]
 8005ca4:	0a1b      	lsrs	r3, r3, #8
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	4b09      	ldr	r3, [pc, #36]	@ (8005cd0 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 8005cac:	775a      	strb	r2, [r3, #29]
    eth_tx_buffer[30] = myEVSE.output_voltage;
 8005cae:	4b04      	ldr	r3, [pc, #16]	@ (8005cc0 <PEF_Compose_Voltage_Verification_Req+0x94>)
 8005cb0:	891b      	ldrh	r3, [r3, #8]
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	4b06      	ldr	r3, [pc, #24]	@ (8005cd0 <PEF_Compose_Voltage_Verification_Req+0xa4>)
 8005cb6:	779a      	strb	r2, [r3, #30]
}
 8005cb8:	bf00      	nop
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	20001d94 	.word	0x20001d94
 8005cc4:	20001b76 	.word	0x20001b76
 8005cc8:	20001d70 	.word	0x20001d70
 8005ccc:	2000001c 	.word	0x2000001c
 8005cd0:	20001a7c 	.word	0x20001a7c
 8005cd4:	2000000c 	.word	0x2000000c

08005cd8 <PEF_Compose_Voltage_Verification_Cnf>:

void PEF_Compose_Voltage_Verification_Cnf(void){
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
	/* Voltage Verification Confirm */
    eth_tx_size = 60;
 8005cdc:	4b19      	ldr	r3, [pc, #100]	@ (8005d44 <PEF_Compose_Voltage_Verification_Cnf+0x6c>)
 8005cde:	223c      	movs	r2, #60	@ 0x3c
 8005ce0:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 8005ce2:	f7ff f937 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	4817      	ldr	r0, [pc, #92]	@ (8005d48 <PEF_Compose_Voltage_Verification_Cnf+0x70>)
 8005cea:	f7ff f907 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 8005cee:	2106      	movs	r1, #6
 8005cf0:	4816      	ldr	r0, [pc, #88]	@ (8005d4c <PEF_Compose_Voltage_Verification_Cnf+0x74>)
 8005cf2:	f7ff f903 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 8005cf6:	4b16      	ldr	r3, [pc, #88]	@ (8005d50 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 8005cf8:	2288      	movs	r2, #136	@ 0x88
 8005cfa:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 8005cfc:	4b14      	ldr	r3, [pc, #80]	@ (8005d50 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 8005cfe:	22e1      	movs	r2, #225	@ 0xe1
 8005d00:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 8005d02:	4b13      	ldr	r3, [pc, #76]	@ (8005d50 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 8005d04:	2201      	movs	r2, #1
 8005d06:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 8005d08:	4b11      	ldr	r3, [pc, #68]	@ (8005d50 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 8005d0a:	22e0      	movs	r2, #224	@ 0xe0
 8005d0c:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 8005d0e:	4b10      	ldr	r3, [pc, #64]	@ (8005d50 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 8005d10:	2260      	movs	r2, #96	@ 0x60
 8005d12:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 8005d14:	4b0e      	ldr	r3, [pc, #56]	@ (8005d50 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 8005d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d50 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 8005d20:	2113      	movs	r1, #19
 8005d22:	480c      	ldr	r0, [pc, #48]	@ (8005d54 <PEF_Compose_Voltage_Verification_Cnf+0x7c>)
 8005d24:	f7ff f8ea 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB2; // Session + State
 8005d28:	4b09      	ldr	r3, [pc, #36]	@ (8005d50 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 8005d2a:	22b2      	movs	r2, #178	@ 0xb2
 8005d2c:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x1D; // Function + Message Type
 8005d2e:	4b08      	ldr	r3, [pc, #32]	@ (8005d50 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 8005d30:	221d      	movs	r2, #29
 8005d32:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 8005d34:	4b06      	ldr	r3, [pc, #24]	@ (8005d50 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 8005d3a:	4b05      	ldr	r3, [pc, #20]	@ (8005d50 <PEF_Compose_Voltage_Verification_Cnf+0x78>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	771a      	strb	r2, [r3, #28]
    // Body
}
 8005d40:	bf00      	nop
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	20001b76 	.word	0x20001b76
 8005d48:	20001d70 	.word	0x20001d70
 8005d4c:	20000014 	.word	0x20000014
 8005d50:	20001a7c 	.word	0x20001a7c
 8005d54:	2000000c 	.word	0x2000000c

08005d58 <PEF_Compose_Connector_Unlock_Req>:

void PEF_Evaluate_Voltage_Verification_Cnf(void){
	myEVSE.output_voltage = (eth_rx_buffer[29] << 8) + eth_rx_buffer[30];
}

void PEF_Compose_Connector_Unlock_Req(void){
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
	/* Connector Unlock Request */
    eth_tx_size = 60;
 8005d5c:	4b19      	ldr	r3, [pc, #100]	@ (8005dc4 <PEF_Compose_Connector_Unlock_Req+0x6c>)
 8005d5e:	223c      	movs	r2, #60	@ 0x3c
 8005d60:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 8005d62:	f7ff f8f7 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 8005d66:	2100      	movs	r1, #0
 8005d68:	4817      	ldr	r0, [pc, #92]	@ (8005dc8 <PEF_Compose_Connector_Unlock_Req+0x70>)
 8005d6a:	f7ff f8c7 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 8005d6e:	2106      	movs	r1, #6
 8005d70:	4816      	ldr	r0, [pc, #88]	@ (8005dcc <PEF_Compose_Connector_Unlock_Req+0x74>)
 8005d72:	f7ff f8c3 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 8005d76:	4b16      	ldr	r3, [pc, #88]	@ (8005dd0 <PEF_Compose_Connector_Unlock_Req+0x78>)
 8005d78:	2288      	movs	r2, #136	@ 0x88
 8005d7a:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 8005d7c:	4b14      	ldr	r3, [pc, #80]	@ (8005dd0 <PEF_Compose_Connector_Unlock_Req+0x78>)
 8005d7e:	22e1      	movs	r2, #225	@ 0xe1
 8005d80:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 8005d82:	4b13      	ldr	r3, [pc, #76]	@ (8005dd0 <PEF_Compose_Connector_Unlock_Req+0x78>)
 8005d84:	2201      	movs	r2, #1
 8005d86:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 8005d88:	4b11      	ldr	r3, [pc, #68]	@ (8005dd0 <PEF_Compose_Connector_Unlock_Req+0x78>)
 8005d8a:	22e0      	movs	r2, #224	@ 0xe0
 8005d8c:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 8005d8e:	4b10      	ldr	r3, [pc, #64]	@ (8005dd0 <PEF_Compose_Connector_Unlock_Req+0x78>)
 8005d90:	2260      	movs	r2, #96	@ 0x60
 8005d92:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 8005d94:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd0 <PEF_Compose_Connector_Unlock_Req+0x78>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 8005d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd0 <PEF_Compose_Connector_Unlock_Req+0x78>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 8005da0:	2113      	movs	r1, #19
 8005da2:	480c      	ldr	r0, [pc, #48]	@ (8005dd4 <PEF_Compose_Connector_Unlock_Req+0x7c>)
 8005da4:	f7ff f8aa 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB2; // Session + State
 8005da8:	4b09      	ldr	r3, [pc, #36]	@ (8005dd0 <PEF_Compose_Connector_Unlock_Req+0x78>)
 8005daa:	22b2      	movs	r2, #178	@ 0xb2
 8005dac:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x20; // Function + Message Type
 8005dae:	4b08      	ldr	r3, [pc, #32]	@ (8005dd0 <PEF_Compose_Connector_Unlock_Req+0x78>)
 8005db0:	2220      	movs	r2, #32
 8005db2:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 8005db4:	4b06      	ldr	r3, [pc, #24]	@ (8005dd0 <PEF_Compose_Connector_Unlock_Req+0x78>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 8005dba:	4b05      	ldr	r3, [pc, #20]	@ (8005dd0 <PEF_Compose_Connector_Unlock_Req+0x78>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	771a      	strb	r2, [r3, #28]
    // Body
}
 8005dc0:	bf00      	nop
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	20001b76 	.word	0x20001b76
 8005dc8:	20001d70 	.word	0x20001d70
 8005dcc:	2000001c 	.word	0x2000001c
 8005dd0:	20001a7c 	.word	0x20001a7c
 8005dd4:	2000000c 	.word	0x2000000c

08005dd8 <PEF_Compose_Connector_Unlock_Cnf>:

void PEF_Compose_Connector_Unlock_Cnf(void){
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
	/* Connector Unlock Confirm */
    eth_tx_size = 60;
 8005ddc:	4b19      	ldr	r3, [pc, #100]	@ (8005e44 <PEF_Compose_Connector_Unlock_Cnf+0x6c>)
 8005dde:	223c      	movs	r2, #60	@ 0x3c
 8005de0:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 8005de2:	f7ff f8b7 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 8005de6:	2100      	movs	r1, #0
 8005de8:	4817      	ldr	r0, [pc, #92]	@ (8005e48 <PEF_Compose_Connector_Unlock_Cnf+0x70>)
 8005dea:	f7ff f887 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 8005dee:	2106      	movs	r1, #6
 8005df0:	4816      	ldr	r0, [pc, #88]	@ (8005e4c <PEF_Compose_Connector_Unlock_Cnf+0x74>)
 8005df2:	f7ff f883 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 8005df6:	4b16      	ldr	r3, [pc, #88]	@ (8005e50 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 8005df8:	2288      	movs	r2, #136	@ 0x88
 8005dfa:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 8005dfc:	4b14      	ldr	r3, [pc, #80]	@ (8005e50 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 8005dfe:	22e1      	movs	r2, #225	@ 0xe1
 8005e00:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 8005e02:	4b13      	ldr	r3, [pc, #76]	@ (8005e50 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 8005e04:	2201      	movs	r2, #1
 8005e06:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 8005e08:	4b11      	ldr	r3, [pc, #68]	@ (8005e50 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 8005e0a:	22e0      	movs	r2, #224	@ 0xe0
 8005e0c:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 8005e0e:	4b10      	ldr	r3, [pc, #64]	@ (8005e50 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 8005e10:	2260      	movs	r2, #96	@ 0x60
 8005e12:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 8005e14:	4b0e      	ldr	r3, [pc, #56]	@ (8005e50 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 8005e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e50 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 8005e20:	2113      	movs	r1, #19
 8005e22:	480c      	ldr	r0, [pc, #48]	@ (8005e54 <PEF_Compose_Connector_Unlock_Cnf+0x7c>)
 8005e24:	f7ff f86a 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB2; // Session + State
 8005e28:	4b09      	ldr	r3, [pc, #36]	@ (8005e50 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 8005e2a:	22b2      	movs	r2, #178	@ 0xb2
 8005e2c:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x21; // Function + Message Type
 8005e2e:	4b08      	ldr	r3, [pc, #32]	@ (8005e50 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 8005e30:	2221      	movs	r2, #33	@ 0x21
 8005e32:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 8005e34:	4b06      	ldr	r3, [pc, #24]	@ (8005e50 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 8005e3a:	4b05      	ldr	r3, [pc, #20]	@ (8005e50 <PEF_Compose_Connector_Unlock_Cnf+0x78>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	771a      	strb	r2, [r3, #28]
    // Body
}
 8005e40:	bf00      	nop
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20001b76 	.word	0x20001b76
 8005e48:	20001d70 	.word	0x20001d70
 8005e4c:	20000014 	.word	0x20000014
 8005e50:	20001a7c 	.word	0x20001a7c
 8005e54:	2000000c 	.word	0x2000000c

08005e58 <PEF_Compose_End_of_Charge_Req>:



void PEF_Compose_End_of_Charge_Req(void){
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
	/* End of Charge Request */
    eth_tx_size = 60;
 8005e5c:	4b19      	ldr	r3, [pc, #100]	@ (8005ec4 <PEF_Compose_End_of_Charge_Req+0x6c>)
 8005e5e:	223c      	movs	r2, #60	@ 0x3c
 8005e60:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 8005e62:	f7ff f877 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 8005e66:	2100      	movs	r1, #0
 8005e68:	4817      	ldr	r0, [pc, #92]	@ (8005ec8 <PEF_Compose_End_of_Charge_Req+0x70>)
 8005e6a:	f7ff f847 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evID, 6);
 8005e6e:	2106      	movs	r1, #6
 8005e70:	4816      	ldr	r0, [pc, #88]	@ (8005ecc <PEF_Compose_End_of_Charge_Req+0x74>)
 8005e72:	f7ff f843 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 8005e76:	4b16      	ldr	r3, [pc, #88]	@ (8005ed0 <PEF_Compose_End_of_Charge_Req+0x78>)
 8005e78:	2288      	movs	r2, #136	@ 0x88
 8005e7a:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 8005e7c:	4b14      	ldr	r3, [pc, #80]	@ (8005ed0 <PEF_Compose_End_of_Charge_Req+0x78>)
 8005e7e:	22e1      	movs	r2, #225	@ 0xe1
 8005e80:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 8005e82:	4b13      	ldr	r3, [pc, #76]	@ (8005ed0 <PEF_Compose_End_of_Charge_Req+0x78>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 8005e88:	4b11      	ldr	r3, [pc, #68]	@ (8005ed0 <PEF_Compose_End_of_Charge_Req+0x78>)
 8005e8a:	22e0      	movs	r2, #224	@ 0xe0
 8005e8c:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 8005e8e:	4b10      	ldr	r3, [pc, #64]	@ (8005ed0 <PEF_Compose_End_of_Charge_Req+0x78>)
 8005e90:	2260      	movs	r2, #96	@ 0x60
 8005e92:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 8005e94:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed0 <PEF_Compose_End_of_Charge_Req+0x78>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 8005e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed0 <PEF_Compose_End_of_Charge_Req+0x78>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 8005ea0:	2113      	movs	r1, #19
 8005ea2:	480c      	ldr	r0, [pc, #48]	@ (8005ed4 <PEF_Compose_End_of_Charge_Req+0x7c>)
 8005ea4:	f7ff f82a 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB2; // Session + State
 8005ea8:	4b09      	ldr	r3, [pc, #36]	@ (8005ed0 <PEF_Compose_End_of_Charge_Req+0x78>)
 8005eaa:	22b2      	movs	r2, #178	@ 0xb2
 8005eac:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x24; // Function + Message Type
 8005eae:	4b08      	ldr	r3, [pc, #32]	@ (8005ed0 <PEF_Compose_End_of_Charge_Req+0x78>)
 8005eb0:	2224      	movs	r2, #36	@ 0x24
 8005eb2:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 8005eb4:	4b06      	ldr	r3, [pc, #24]	@ (8005ed0 <PEF_Compose_End_of_Charge_Req+0x78>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 8005eba:	4b05      	ldr	r3, [pc, #20]	@ (8005ed0 <PEF_Compose_End_of_Charge_Req+0x78>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	771a      	strb	r2, [r3, #28]
    // Body
}
 8005ec0:	bf00      	nop
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	20001b76 	.word	0x20001b76
 8005ec8:	20001d70 	.word	0x20001d70
 8005ecc:	20000014 	.word	0x20000014
 8005ed0:	20001a7c 	.word	0x20001a7c
 8005ed4:	2000000c 	.word	0x2000000c

08005ed8 <PEF_Compose_End_of_Charge_Cnf>:

void PEF_Compose_End_of_Charge_Cnf(void){
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
	/* End of Charge Request */
    eth_tx_size = 60;
 8005edc:	4b19      	ldr	r3, [pc, #100]	@ (8005f44 <PEF_Compose_End_of_Charge_Cnf+0x6c>)
 8005ede:	223c      	movs	r2, #60	@ 0x3c
 8005ee0:	801a      	strh	r2, [r3, #0]
    HPGP_Clean_Tx_Buffer();
 8005ee2:	f7ff f837 	bl	8004f54 <HPGP_Clean_Tx_Buffer>
    /* Destination MAC */
    HPGP_Fill_Address(yourID, 0);
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	4817      	ldr	r0, [pc, #92]	@ (8005f48 <PEF_Compose_End_of_Charge_Cnf+0x70>)
 8005eea:	f7ff f807 	bl	8004efc <HPGP_Fill_Address>
    /* Source MAC */
    HPGP_Fill_Address(evseID, 6);
 8005eee:	2106      	movs	r1, #6
 8005ef0:	4816      	ldr	r0, [pc, #88]	@ (8005f4c <PEF_Compose_End_of_Charge_Cnf+0x74>)
 8005ef2:	f7ff f803 	bl	8004efc <HPGP_Fill_Address>
    // Protocol
    eth_tx_buffer[12]=0x88; // Protocol HomeplugAV
 8005ef6:	4b16      	ldr	r3, [pc, #88]	@ (8005f50 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 8005ef8:	2288      	movs	r2, #136	@ 0x88
 8005efa:	731a      	strb	r2, [r3, #12]
    eth_tx_buffer[13]=0xE1; //
 8005efc:	4b14      	ldr	r3, [pc, #80]	@ (8005f50 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 8005efe:	22e1      	movs	r2, #225	@ 0xe1
 8005f00:	735a      	strb	r2, [r3, #13]
    eth_tx_buffer[14]=0x01; // version
 8005f02:	4b13      	ldr	r3, [pc, #76]	@ (8005f50 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 8005f04:	2201      	movs	r2, #1
 8005f06:	739a      	strb	r2, [r3, #14]
    eth_tx_buffer[15]=0xE0; // EXCHANGE_DATA
 8005f08:	4b11      	ldr	r3, [pc, #68]	@ (8005f50 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 8005f0a:	22e0      	movs	r2, #224	@ 0xe0
 8005f0c:	73da      	strb	r2, [r3, #15]
    eth_tx_buffer[16]=0x60; //
 8005f0e:	4b10      	ldr	r3, [pc, #64]	@ (8005f50 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 8005f10:	2260      	movs	r2, #96	@ 0x60
 8005f12:	741a      	strb	r2, [r3, #16]
    eth_tx_buffer[17]=0x00; // 2 bytes fragmentation information. 0000 means: unfragmented.
 8005f14:	4b0e      	ldr	r3, [pc, #56]	@ (8005f50 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	745a      	strb	r2, [r3, #17]
    eth_tx_buffer[18]=0x00; //
 8005f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f50 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	749a      	strb	r2, [r3, #18]
    /* Exchange Data */
    // Header
    HPGP_Fill_Address(sessionID, 19); // Session ID
 8005f20:	2113      	movs	r1, #19
 8005f22:	480c      	ldr	r0, [pc, #48]	@ (8005f54 <PEF_Compose_End_of_Charge_Cnf+0x7c>)
 8005f24:	f7fe ffea 	bl	8004efc <HPGP_Fill_Address>
    eth_tx_buffer[25]=0xB2; // Session + State
 8005f28:	4b09      	ldr	r3, [pc, #36]	@ (8005f50 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 8005f2a:	22b2      	movs	r2, #178	@ 0xb2
 8005f2c:	765a      	strb	r2, [r3, #25]
    eth_tx_buffer[26]=0x25; // Function + Message Type
 8005f2e:	4b08      	ldr	r3, [pc, #32]	@ (8005f50 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 8005f30:	2225      	movs	r2, #37	@ 0x25
 8005f32:	769a      	strb	r2, [r3, #26]
    eth_tx_buffer[27]=0x00;	// 2 bytes fault code
 8005f34:	4b06      	ldr	r3, [pc, #24]	@ (8005f50 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	76da      	strb	r2, [r3, #27]
    eth_tx_buffer[28]=0x00;
 8005f3a:	4b05      	ldr	r3, [pc, #20]	@ (8005f50 <PEF_Compose_End_of_Charge_Cnf+0x78>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	771a      	strb	r2, [r3, #28]
    // Body
}
 8005f40:	bf00      	nop
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	20001b76 	.word	0x20001b76
 8005f48:	20001d70 	.word	0x20001d70
 8005f4c:	2000001c 	.word	0x2000001c
 8005f50:	20001a7c 	.word	0x20001a7c
 8005f54:	2000000c 	.word	0x2000000c

08005f58 <PEF_Get_Sequence_State>:

uint16_t PEF_Get_Sequence_State(void){
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
	uint16_t message_type;
	message_type = (eth_rx_buffer[25] << 8) + eth_rx_buffer[26];
 8005f5e:	4b07      	ldr	r3, [pc, #28]	@ (8005f7c <PEF_Get_Sequence_State+0x24>)
 8005f60:	7e5b      	ldrb	r3, [r3, #25]
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	4a05      	ldr	r2, [pc, #20]	@ (8005f7c <PEF_Get_Sequence_State+0x24>)
 8005f68:	7e92      	ldrb	r2, [r2, #26]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	80fb      	strh	r3, [r7, #6]
	return message_type;
 8005f6e:	88fb      	ldrh	r3, [r7, #6]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	20001b78 	.word	0x20001b78

08005f80 <PEF_Handle_Initialization_Req>:

void PEF_Handle_Initialization_Req(void){
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received INITIALIZATION.REQ ");
 8005f84:	4906      	ldr	r1, [pc, #24]	@ (8005fa0 <PEF_Handle_Initialization_Req+0x20>)
 8005f86:	4807      	ldr	r0, [pc, #28]	@ (8005fa4 <PEF_Handle_Initialization_Req+0x24>)
 8005f88:	f000 fb70 	bl	800666c <siprintf>
	Serial_Print();
 8005f8c:	f7fa fa5c 	bl	8000448 <Serial_Print>

	PEF_Evaluate_Initialization();
 8005f90:	f7ff f890 	bl	80050b4 <PEF_Evaluate_Initialization>
	PEF_Compose_Initialization_Cnf();
 8005f94:	f7ff f84e 	bl	8005034 <PEF_Compose_Initialization_Cnf>
	SPI_QCA7000_Send_Eth_Frame();
 8005f98:	f7fe feec 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
}
 8005f9c:	bf00      	nop
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	08007994 	.word	0x08007994
 8005fa4:	200001dc 	.word	0x200001dc

08005fa8 <PEF_Handle_Initialization_Cnf>:

void PEF_Handle_Initialization_Cnf(void){
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received INITIALIZATION.CNF ");
 8005fac:	4906      	ldr	r1, [pc, #24]	@ (8005fc8 <PEF_Handle_Initialization_Cnf+0x20>)
 8005fae:	4807      	ldr	r0, [pc, #28]	@ (8005fcc <PEF_Handle_Initialization_Cnf+0x24>)
 8005fb0:	f000 fb5c 	bl	800666c <siprintf>
	Serial_Print();
 8005fb4:	f7fa fa48 	bl	8000448 <Serial_Print>

	PEF_Evaluate_Initialization();
 8005fb8:	f7ff f87c 	bl	80050b4 <PEF_Evaluate_Initialization>
	PEF_Compose_Parameter_Exchange_Req();
 8005fbc:	f7ff f88c 	bl	80050d8 <PEF_Compose_Parameter_Exchange_Req>
	SPI_QCA7000_Send_Eth_Frame();
 8005fc0:	f7fe fed8 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
}
 8005fc4:	bf00      	nop
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	080079b8 	.word	0x080079b8
 8005fcc:	200001dc 	.word	0x200001dc

08005fd0 <PEF_Handle_Parameter_Exchange_Req>:

void PEF_Handle_Parameter_Exchange_Req(void){
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received PARAMETER_EXCHANGE.REQ ");
 8005fd4:	4906      	ldr	r1, [pc, #24]	@ (8005ff0 <PEF_Handle_Parameter_Exchange_Req+0x20>)
 8005fd6:	4807      	ldr	r0, [pc, #28]	@ (8005ff4 <PEF_Handle_Parameter_Exchange_Req+0x24>)
 8005fd8:	f000 fb48 	bl	800666c <siprintf>
	Serial_Print();
 8005fdc:	f7fa fa34 	bl	8000448 <Serial_Print>

	PEF_Evaluate_Parameter_Exchange_Req();
 8005fe0:	f7ff f9e0 	bl	80053a4 <PEF_Evaluate_Parameter_Exchange_Req>
	PEF_Compose_Parameter_Exchange_Res();
 8005fe4:	f7ff f92c 	bl	8005240 <PEF_Compose_Parameter_Exchange_Res>
	SPI_QCA7000_Send_Eth_Frame();
 8005fe8:	f7fe fec4 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
}
 8005fec:	bf00      	nop
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	080079dc 	.word	0x080079dc
 8005ff4:	200001dc 	.word	0x200001dc

08005ff8 <PEF_Handle_Parameter_Exchange_Res>:

void PEF_Handle_Parameter_Exchange_Res(void){
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received PARAMETER_EXCHANGE.RES ");
 8005ffc:	4906      	ldr	r1, [pc, #24]	@ (8006018 <PEF_Handle_Parameter_Exchange_Res+0x20>)
 8005ffe:	4807      	ldr	r0, [pc, #28]	@ (800601c <PEF_Handle_Parameter_Exchange_Res+0x24>)
 8006000:	f000 fb34 	bl	800666c <siprintf>
	Serial_Print();
 8006004:	f7fa fa20 	bl	8000448 <Serial_Print>

	PEF_Evaluate_Parameter_Exchange_Res();
 8006008:	f7ff fa0e 	bl	8005428 <PEF_Evaluate_Parameter_Exchange_Res>
	PEF_Compose_Parameter_Exchange_Cnf();
 800600c:	f7ff f98a 	bl	8005324 <PEF_Compose_Parameter_Exchange_Cnf>
	SPI_QCA7000_Send_Eth_Frame();
 8006010:	f7fe feb0 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
}
 8006014:	bf00      	nop
 8006016:	bd80      	pop	{r7, pc}
 8006018:	08007a04 	.word	0x08007a04
 800601c:	200001dc 	.word	0x200001dc

08006020 <PEF_Handle_Parameter_Exchange_Cnf>:

void PEF_Handle_Parameter_Exchange_Cnf(void){
 8006020:	b580      	push	{r7, lr}
 8006022:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received PARAMETER_EXCHANGE.CNF ");
 8006024:	4903      	ldr	r1, [pc, #12]	@ (8006034 <PEF_Handle_Parameter_Exchange_Cnf+0x14>)
 8006026:	4804      	ldr	r0, [pc, #16]	@ (8006038 <PEF_Handle_Parameter_Exchange_Cnf+0x18>)
 8006028:	f000 fb20 	bl	800666c <siprintf>
	Serial_Print();
 800602c:	f7fa fa0c 	bl	8000448 <Serial_Print>
}
 8006030:	bf00      	nop
 8006032:	bd80      	pop	{r7, pc}
 8006034:	08007a2c 	.word	0x08007a2c
 8006038:	200001dc 	.word	0x200001dc

0800603c <PEF_Handle_Connector_Lock_Req>:

void PEF_Handle_Connector_Lock_Req(void){
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CONNECTOR_LOCK.REQ ");
 8006040:	4905      	ldr	r1, [pc, #20]	@ (8006058 <PEF_Handle_Connector_Lock_Req+0x1c>)
 8006042:	4806      	ldr	r0, [pc, #24]	@ (800605c <PEF_Handle_Connector_Lock_Req+0x20>)
 8006044:	f000 fb12 	bl	800666c <siprintf>
	Serial_Print();
 8006048:	f7fa f9fe 	bl	8000448 <Serial_Print>

	PEF_Compose_Connector_Lock_Cnf();
 800604c:	f7ff fa56 	bl	80054fc <PEF_Compose_Connector_Lock_Cnf>
	SPI_QCA7000_Send_Eth_Frame();
 8006050:	f7fe fe90 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
}
 8006054:	bf00      	nop
 8006056:	bd80      	pop	{r7, pc}
 8006058:	08007a54 	.word	0x08007a54
 800605c:	200001dc 	.word	0x200001dc

08006060 <PEF_Handle_Connector_Lock_Cnf>:

void PEF_Handle_Connector_Lock_Cnf(void){
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CONNECTOR_LOCK.CNF ");
 8006064:	4903      	ldr	r1, [pc, #12]	@ (8006074 <PEF_Handle_Connector_Lock_Cnf+0x14>)
 8006066:	4804      	ldr	r0, [pc, #16]	@ (8006078 <PEF_Handle_Connector_Lock_Cnf+0x18>)
 8006068:	f000 fb00 	bl	800666c <siprintf>
	Serial_Print();
 800606c:	f7fa f9ec 	bl	8000448 <Serial_Print>
}
 8006070:	bf00      	nop
 8006072:	bd80      	pop	{r7, pc}
 8006074:	08007a78 	.word	0x08007a78
 8006078:	200001dc 	.word	0x200001dc

0800607c <PEF_Handle_Contactor_Close_Req>:

void PEF_Handle_Contactor_Close_Req(void){
 800607c:	b580      	push	{r7, lr}
 800607e:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CONTACTOR_CLOSE.REQ ");
 8006080:	4905      	ldr	r1, [pc, #20]	@ (8006098 <PEF_Handle_Contactor_Close_Req+0x1c>)
 8006082:	4806      	ldr	r0, [pc, #24]	@ (800609c <PEF_Handle_Contactor_Close_Req+0x20>)
 8006084:	f000 faf2 	bl	800666c <siprintf>
	Serial_Print();
 8006088:	f7fa f9de 	bl	8000448 <Serial_Print>

	PEF_Compose_Contactor_Close_Cnf();
 800608c:	f7ff fa76 	bl	800557c <PEF_Compose_Contactor_Close_Cnf>
	SPI_QCA7000_Send_Eth_Frame();
 8006090:	f7fe fe70 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>

	//	PEF_Compose_Charging_Current_Demand_Req(current_request, system_fault, shift_pos, current_battery);
	//	SPI_QCA7000_Send_Eth_Frame();
}
 8006094:	bf00      	nop
 8006096:	bd80      	pop	{r7, pc}
 8006098:	08007a9c 	.word	0x08007a9c
 800609c:	200001dc 	.word	0x200001dc

080060a0 <PEF_Handle_Contactor_Close_Cnf>:

void PEF_Handle_Contactor_Close_Cnf(void){
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CONTACTOR_CLOSE.CNF ");
 80060a4:	4903      	ldr	r1, [pc, #12]	@ (80060b4 <PEF_Handle_Contactor_Close_Cnf+0x14>)
 80060a6:	4804      	ldr	r0, [pc, #16]	@ (80060b8 <PEF_Handle_Contactor_Close_Cnf+0x18>)
 80060a8:	f000 fae0 	bl	800666c <siprintf>
	Serial_Print();
 80060ac:	f7fa f9cc 	bl	8000448 <Serial_Print>
}
 80060b0:	bf00      	nop
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	08007ac0 	.word	0x08007ac0
 80060b8:	200001dc 	.word	0x200001dc

080060bc <PEF_Handle_Charging_Current_Demand_Req>:

void PEF_Handle_Charging_Current_Demand_Req(void){
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af02      	add	r7, sp, #8
	sprintf(serial_output_buffer, "[PLC] received CHARGING_CURRENT_DEMAND.REQ ");
 80060c2:	4910      	ldr	r1, [pc, #64]	@ (8006104 <PEF_Handle_Charging_Current_Demand_Req+0x48>)
 80060c4:	4810      	ldr	r0, [pc, #64]	@ (8006108 <PEF_Handle_Charging_Current_Demand_Req+0x4c>)
 80060c6:	f000 fad1 	bl	800666c <siprintf>
	Serial_Print();
 80060ca:	f7fa f9bd 	bl	8000448 <Serial_Print>

	PEF_Evaluate_Charging_Current_Demand_Req();
 80060ce:	f7ff fb99 	bl	8005804 <PEF_Evaluate_Charging_Current_Demand_Req>
	uint16_t a = 0x0123;
 80060d2:	f240 1323 	movw	r3, #291	@ 0x123
 80060d6:	80fb      	strh	r3, [r7, #6]
	uint16_t b = 0x0050;
 80060d8:	2350      	movs	r3, #80	@ 0x50
 80060da:	80bb      	strh	r3, [r7, #4]
	uint16_t c = 0x0280;
 80060dc:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80060e0:	807b      	strh	r3, [r7, #2]
	PEF_Compose_Charging_Current_Demand_Res( 0xAA, a, b, c, 0xAA, 0xAA);
 80060e2:	887b      	ldrh	r3, [r7, #2]
 80060e4:	88ba      	ldrh	r2, [r7, #4]
 80060e6:	88f9      	ldrh	r1, [r7, #6]
 80060e8:	20aa      	movs	r0, #170	@ 0xaa
 80060ea:	9001      	str	r0, [sp, #4]
 80060ec:	20aa      	movs	r0, #170	@ 0xaa
 80060ee:	9000      	str	r0, [sp, #0]
 80060f0:	20aa      	movs	r0, #170	@ 0xaa
 80060f2:	f7ff faed 	bl	80056d0 <PEF_Compose_Charging_Current_Demand_Res>
	SPI_QCA7000_Send_Eth_Frame();
 80060f6:	f7fe fe3d 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
}
 80060fa:	bf00      	nop
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	08007ae4 	.word	0x08007ae4
 8006108:	200001dc 	.word	0x200001dc

0800610c <PEF_Handle_Charging_Current_Demand_Res>:

void PEF_Handle_Charging_Current_Demand_Res(void){
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CHARGING_CURRENT_DEMAND.RES ");
 8006110:	4904      	ldr	r1, [pc, #16]	@ (8006124 <PEF_Handle_Charging_Current_Demand_Res+0x18>)
 8006112:	4805      	ldr	r0, [pc, #20]	@ (8006128 <PEF_Handle_Charging_Current_Demand_Res+0x1c>)
 8006114:	f000 faaa 	bl	800666c <siprintf>
	Serial_Print();
 8006118:	f7fa f996 	bl	8000448 <Serial_Print>

	PEF_Evaluate_Charging_Current_Demand_Res();
 800611c:	f7ff fb96 	bl	800584c <PEF_Evaluate_Charging_Current_Demand_Res>
}
 8006120:	bf00      	nop
 8006122:	bd80      	pop	{r7, pc}
 8006124:	08007b10 	.word	0x08007b10
 8006128:	200001dc 	.word	0x200001dc

0800612c <PEF_Handle_Current_Suppression_Req>:


void PEF_Handle_Current_Suppression_Req(void){
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CURRENT_SUPPRESSION.REQ ");
 8006132:	490b      	ldr	r1, [pc, #44]	@ (8006160 <PEF_Handle_Current_Suppression_Req+0x34>)
 8006134:	480b      	ldr	r0, [pc, #44]	@ (8006164 <PEF_Handle_Current_Suppression_Req+0x38>)
 8006136:	f000 fa99 	bl	800666c <siprintf>
	Serial_Print();
 800613a:	f7fa f985 	bl	8000448 <Serial_Print>

	uint16_t a = 0x0123;
 800613e:	f240 1323 	movw	r3, #291	@ 0x123
 8006142:	80fb      	strh	r3, [r7, #6]
	uint16_t b = 0x0050;
 8006144:	2350      	movs	r3, #80	@ 0x50
 8006146:	80bb      	strh	r3, [r7, #4]
	PEF_Compose_Current_Suppression_Res(0xAA, 0xAA, a, b);
 8006148:	88bb      	ldrh	r3, [r7, #4]
 800614a:	88fa      	ldrh	r2, [r7, #6]
 800614c:	21aa      	movs	r1, #170	@ 0xaa
 800614e:	20aa      	movs	r0, #170	@ 0xaa
 8006150:	f7ff fc02 	bl	8005958 <PEF_Compose_Current_Suppression_Res>
	SPI_QCA7000_Send_Eth_Frame();
 8006154:	f7fe fe0e 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
}
 8006158:	bf00      	nop
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	08007b3c 	.word	0x08007b3c
 8006164:	200001dc 	.word	0x200001dc

08006168 <PEF_Handle_Current_Suppression_Res>:

void PEF_Handle_Current_Suppression_Res(void){
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CURRENT_SUPPRESSION.RES ");
 800616c:	4906      	ldr	r1, [pc, #24]	@ (8006188 <PEF_Handle_Current_Suppression_Res+0x20>)
 800616e:	4807      	ldr	r0, [pc, #28]	@ (800618c <PEF_Handle_Current_Suppression_Res+0x24>)
 8006170:	f000 fa7c 	bl	800666c <siprintf>
	Serial_Print();
 8006174:	f7fa f968 	bl	8000448 <Serial_Print>

	PEF_Evaluate_Current_Suppression_Res();
 8006178:	f7ff fcae 	bl	8005ad8 <PEF_Evaluate_Current_Suppression_Res>
	PEF_Compose_Current_Suppression_Cnf();
 800617c:	f7ff fc6c 	bl	8005a58 <PEF_Compose_Current_Suppression_Cnf>
	SPI_QCA7000_Send_Eth_Frame();
 8006180:	f7fe fdf8 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
}
 8006184:	bf00      	nop
 8006186:	bd80      	pop	{r7, pc}
 8006188:	08007b64 	.word	0x08007b64
 800618c:	200001dc 	.word	0x200001dc

08006190 <PEF_Handle_Current_Suppression_Cnf>:

void PEF_Handle_Current_Suppression_Cnf(void){
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CURRENT_SUPPRESSION.CNF ");
 8006194:	4905      	ldr	r1, [pc, #20]	@ (80061ac <PEF_Handle_Current_Suppression_Cnf+0x1c>)
 8006196:	4806      	ldr	r0, [pc, #24]	@ (80061b0 <PEF_Handle_Current_Suppression_Cnf+0x20>)
 8006198:	f000 fa68 	bl	800666c <siprintf>
	Serial_Print();
 800619c:	f7fa f954 	bl	8000448 <Serial_Print>

	PEF_Compose_Zero_Current_Confirm_Req();
 80061a0:	f7ff fcc4 	bl	8005b2c <PEF_Compose_Zero_Current_Confirm_Req>
	SPI_QCA7000_Send_Eth_Frame();
 80061a4:	f7fe fde6 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
}
 80061a8:	bf00      	nop
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	08007b8c 	.word	0x08007b8c
 80061b0:	200001dc 	.word	0x200001dc

080061b4 <PEF_Handle_Zero_CURRENT_CONFIRM_Req>:

void PEF_Handle_Zero_CURRENT_CONFIRM_Req(void){
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received ZERO_CURRENT_CONFIRM.REQ ");
 80061b8:	4905      	ldr	r1, [pc, #20]	@ (80061d0 <PEF_Handle_Zero_CURRENT_CONFIRM_Req+0x1c>)
 80061ba:	4806      	ldr	r0, [pc, #24]	@ (80061d4 <PEF_Handle_Zero_CURRENT_CONFIRM_Req+0x20>)
 80061bc:	f000 fa56 	bl	800666c <siprintf>
	Serial_Print();
 80061c0:	f7fa f942 	bl	8000448 <Serial_Print>

	PEF_Compose_Zero_Current_Confirm_Cnf();
 80061c4:	f7ff fcf2 	bl	8005bac <PEF_Compose_Zero_Current_Confirm_Cnf>
	SPI_QCA7000_Send_Eth_Frame();
 80061c8:	f7fe fdd4 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
}
 80061cc:	bf00      	nop
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	08007bb4 	.word	0x08007bb4
 80061d4:	200001dc 	.word	0x200001dc

080061d8 <PEF_Handle_Zero_CURRENT_CONFIRM_Cnf>:

void PEF_Handle_Zero_CURRENT_CONFIRM_Cnf(void){
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received ZERO_CURRENT_CONFIRM.CNF ");
 80061de:	4909      	ldr	r1, [pc, #36]	@ (8006204 <PEF_Handle_Zero_CURRENT_CONFIRM_Cnf+0x2c>)
 80061e0:	4809      	ldr	r0, [pc, #36]	@ (8006208 <PEF_Handle_Zero_CURRENT_CONFIRM_Cnf+0x30>)
 80061e2:	f000 fa43 	bl	800666c <siprintf>
	Serial_Print();
 80061e6:	f7fa f92f 	bl	8000448 <Serial_Print>

	uint16_t vol = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	80fb      	strh	r3, [r7, #6]
	PEF_Compose_Voltage_Verification_Req(vol);
 80061ee:	88fb      	ldrh	r3, [r7, #6]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff fd1b 	bl	8005c2c <PEF_Compose_Voltage_Verification_Req>
	SPI_QCA7000_Send_Eth_Frame();
 80061f6:	f7fe fdbd 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
}
 80061fa:	bf00      	nop
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	08007be0 	.word	0x08007be0
 8006208:	200001dc 	.word	0x200001dc

0800620c <PEF_Handle_Voltage_Verification_Req>:

void PEF_Handle_Voltage_Verification_Req(void){
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received VOLTAGE_VERIFICATION.REQ ");
 8006210:	4905      	ldr	r1, [pc, #20]	@ (8006228 <PEF_Handle_Voltage_Verification_Req+0x1c>)
 8006212:	4806      	ldr	r0, [pc, #24]	@ (800622c <PEF_Handle_Voltage_Verification_Req+0x20>)
 8006214:	f000 fa2a 	bl	800666c <siprintf>
	Serial_Print();
 8006218:	f7fa f916 	bl	8000448 <Serial_Print>

	PEF_Compose_Voltage_Verification_Cnf();
 800621c:	f7ff fd5c 	bl	8005cd8 <PEF_Compose_Voltage_Verification_Cnf>
	SPI_QCA7000_Send_Eth_Frame();
 8006220:	f7fe fda8 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
}
 8006224:	bf00      	nop
 8006226:	bd80      	pop	{r7, pc}
 8006228:	08007c0c 	.word	0x08007c0c
 800622c:	200001dc 	.word	0x200001dc

08006230 <PEF_Handle_Voltage_Verification_Cnf>:

void PEF_Handle_Voltage_Verification_Cnf(void){
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received VOLTAGE_VERIFICATION.CNF ");
 8006234:	4905      	ldr	r1, [pc, #20]	@ (800624c <PEF_Handle_Voltage_Verification_Cnf+0x1c>)
 8006236:	4806      	ldr	r0, [pc, #24]	@ (8006250 <PEF_Handle_Voltage_Verification_Cnf+0x20>)
 8006238:	f000 fa18 	bl	800666c <siprintf>
	Serial_Print();
 800623c:	f7fa f904 	bl	8000448 <Serial_Print>

	PEF_Compose_Connector_Unlock_Req();
 8006240:	f7ff fd8a 	bl	8005d58 <PEF_Compose_Connector_Unlock_Req>
	SPI_QCA7000_Send_Eth_Frame();
 8006244:	f7fe fd96 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
}
 8006248:	bf00      	nop
 800624a:	bd80      	pop	{r7, pc}
 800624c:	08007c38 	.word	0x08007c38
 8006250:	200001dc 	.word	0x200001dc

08006254 <PEF_Handle_Connector_Unlock_Req>:

void PEF_Handle_Connector_Unlock_Req(void){
 8006254:	b580      	push	{r7, lr}
 8006256:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CONNECTOR_UNLOCK.REQ ");
 8006258:	4905      	ldr	r1, [pc, #20]	@ (8006270 <PEF_Handle_Connector_Unlock_Req+0x1c>)
 800625a:	4806      	ldr	r0, [pc, #24]	@ (8006274 <PEF_Handle_Connector_Unlock_Req+0x20>)
 800625c:	f000 fa06 	bl	800666c <siprintf>
	Serial_Print();
 8006260:	f7fa f8f2 	bl	8000448 <Serial_Print>

	PEF_Compose_Connector_Unlock_Cnf();
 8006264:	f7ff fdb8 	bl	8005dd8 <PEF_Compose_Connector_Unlock_Cnf>
	SPI_QCA7000_Send_Eth_Frame();
 8006268:	f7fe fd84 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
}
 800626c:	bf00      	nop
 800626e:	bd80      	pop	{r7, pc}
 8006270:	08007c64 	.word	0x08007c64
 8006274:	200001dc 	.word	0x200001dc

08006278 <PEF_Handle_Connector_Unlock_Cnf>:

void PEF_Handle_Connector_Unlock_Cnf(void){
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received CONNECTOR_UNLOCK.CNF ");
 800627c:	4905      	ldr	r1, [pc, #20]	@ (8006294 <PEF_Handle_Connector_Unlock_Cnf+0x1c>)
 800627e:	4806      	ldr	r0, [pc, #24]	@ (8006298 <PEF_Handle_Connector_Unlock_Cnf+0x20>)
 8006280:	f000 f9f4 	bl	800666c <siprintf>
	Serial_Print();
 8006284:	f7fa f8e0 	bl	8000448 <Serial_Print>

	PEF_Compose_End_of_Charge_Req();
 8006288:	f7ff fde6 	bl	8005e58 <PEF_Compose_End_of_Charge_Req>
	SPI_QCA7000_Send_Eth_Frame();
 800628c:	f7fe fd72 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
}
 8006290:	bf00      	nop
 8006292:	bd80      	pop	{r7, pc}
 8006294:	08007c8c 	.word	0x08007c8c
 8006298:	200001dc 	.word	0x200001dc

0800629c <PEF_Handle_End_of_Charge_Req>:

void PEF_Handle_End_of_Charge_Req(void){
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received END_OF_CHARGE.REQ ");
 80062a0:	4905      	ldr	r1, [pc, #20]	@ (80062b8 <PEF_Handle_End_of_Charge_Req+0x1c>)
 80062a2:	4806      	ldr	r0, [pc, #24]	@ (80062bc <PEF_Handle_End_of_Charge_Req+0x20>)
 80062a4:	f000 f9e2 	bl	800666c <siprintf>
	Serial_Print();
 80062a8:	f7fa f8ce 	bl	8000448 <Serial_Print>

	PEF_Compose_End_of_Charge_Cnf();
 80062ac:	f7ff fe14 	bl	8005ed8 <PEF_Compose_End_of_Charge_Cnf>
	SPI_QCA7000_Send_Eth_Frame();
 80062b0:	f7fe fd60 	bl	8004d74 <SPI_QCA7000_Send_Eth_Frame>
}
 80062b4:	bf00      	nop
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	08007cb4 	.word	0x08007cb4
 80062bc:	200001dc 	.word	0x200001dc

080062c0 <PEF_Handle_End_of_Charge_Cnf>:

void PEF_Handle_End_of_Charge_Cnf(void){
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
	sprintf(serial_output_buffer, "[PLC] received END_OF_CHARGE.CNF ");
 80062c4:	4903      	ldr	r1, [pc, #12]	@ (80062d4 <PEF_Handle_End_of_Charge_Cnf+0x14>)
 80062c6:	4804      	ldr	r0, [pc, #16]	@ (80062d8 <PEF_Handle_End_of_Charge_Cnf+0x18>)
 80062c8:	f000 f9d0 	bl	800666c <siprintf>
	Serial_Print();
 80062cc:	f7fa f8bc 	bl	8000448 <Serial_Print>
}
 80062d0:	bf00      	nop
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	08007cd8 	.word	0x08007cd8
 80062d8:	200001dc 	.word	0x200001dc

080062dc <PEF_Evaluate_Exchange_Data>:

void PEF_Evaluate_Exchange_Data(){
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
	switch(PEF_Get_Sequence_State()){
 80062e0:	f7ff fe3a 	bl	8005f58 <PEF_Get_Sequence_State>
 80062e4:	4603      	mov	r3, r0
 80062e6:	f24c 1217 	movw	r2, #49431	@ 0xc117
 80062ea:	4293      	cmp	r3, r2
 80062ec:	f300 80bb 	bgt.w	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
 80062f0:	f24c 120c 	movw	r2, #49420	@ 0xc10c
 80062f4:	4293      	cmp	r3, r2
 80062f6:	da07      	bge.n	8006308 <PEF_Evaluate_Exchange_Data+0x2c>
 80062f8:	f24b 0209 	movw	r2, #45065	@ 0xb009
 80062fc:	4293      	cmp	r3, r2
 80062fe:	dc67      	bgt.n	80063d0 <PEF_Evaluate_Exchange_Data+0xf4>
 8006300:	f5b3 4f30 	cmp.w	r3, #45056	@ 0xb000
 8006304:	da48      	bge.n	8006398 <PEF_Evaluate_Exchange_Data+0xbc>
		break;
	case SHUT_DOWN + STATE_B + END_OF_CHARGE + CONFIRM:
		PEF_Handle_End_of_Charge_Cnf();
		break;
	}
}
 8006306:	e0ae      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
	switch(PEF_Get_Sequence_State()){
 8006308:	f5a3 4341 	sub.w	r3, r3, #49408	@ 0xc100
 800630c:	3b0c      	subs	r3, #12
 800630e:	2b0b      	cmp	r3, #11
 8006310:	f200 80a9 	bhi.w	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
 8006314:	a201      	add	r2, pc, #4	@ (adr r2, 800631c <PEF_Evaluate_Exchange_Data+0x40>)
 8006316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631a:	bf00      	nop
 800631c:	0800640d 	.word	0x0800640d
 8006320:	08006413 	.word	0x08006413
 8006324:	08006467 	.word	0x08006467
 8006328:	08006467 	.word	0x08006467
 800632c:	08006419 	.word	0x08006419
 8006330:	08006467 	.word	0x08006467
 8006334:	08006467 	.word	0x08006467
 8006338:	0800641f 	.word	0x0800641f
 800633c:	08006425 	.word	0x08006425
 8006340:	08006431 	.word	0x08006431
 8006344:	08006467 	.word	0x08006467
 8006348:	0800642b 	.word	0x0800642b
 800634c:	f5a3 4332 	sub.w	r3, r3, #45568	@ 0xb200
 8006350:	3b18      	subs	r3, #24
 8006352:	2b0d      	cmp	r3, #13
 8006354:	f200 8087 	bhi.w	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
 8006358:	a201      	add	r2, pc, #4	@ (adr r2, 8006360 <PEF_Evaluate_Exchange_Data+0x84>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	08006437 	.word	0x08006437
 8006364:	0800643d 	.word	0x0800643d
 8006368:	08006467 	.word	0x08006467
 800636c:	08006467 	.word	0x08006467
 8006370:	08006443 	.word	0x08006443
 8006374:	08006449 	.word	0x08006449
 8006378:	08006467 	.word	0x08006467
 800637c:	08006467 	.word	0x08006467
 8006380:	0800644f 	.word	0x0800644f
 8006384:	08006455 	.word	0x08006455
 8006388:	08006467 	.word	0x08006467
 800638c:	08006467 	.word	0x08006467
 8006390:	0800645b 	.word	0x0800645b
 8006394:	08006461 	.word	0x08006461
 8006398:	f5a3 4330 	sub.w	r3, r3, #45056	@ 0xb000
 800639c:	2b09      	cmp	r3, #9
 800639e:	d862      	bhi.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
 80063a0:	a201      	add	r2, pc, #4	@ (adr r2, 80063a8 <PEF_Evaluate_Exchange_Data+0xcc>)
 80063a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a6:	bf00      	nop
 80063a8:	080063e3 	.word	0x080063e3
 80063ac:	080063e9 	.word	0x080063e9
 80063b0:	08006467 	.word	0x08006467
 80063b4:	08006467 	.word	0x08006467
 80063b8:	080063ef 	.word	0x080063ef
 80063bc:	080063fb 	.word	0x080063fb
 80063c0:	08006467 	.word	0x08006467
 80063c4:	080063f5 	.word	0x080063f5
 80063c8:	08006401 	.word	0x08006401
 80063cc:	08006407 	.word	0x08006407
 80063d0:	f24b 2225 	movw	r2, #45605	@ 0xb225
 80063d4:	4293      	cmp	r3, r2
 80063d6:	dc46      	bgt.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
 80063d8:	f24b 2218 	movw	r2, #45592	@ 0xb218
 80063dc:	4293      	cmp	r3, r2
 80063de:	dab5      	bge.n	800634c <PEF_Evaluate_Exchange_Data+0x70>
}
 80063e0:	e041      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Initialization_Req();
 80063e2:	f7ff fdcd 	bl	8005f80 <PEF_Handle_Initialization_Req>
		break;
 80063e6:	e03e      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Initialization_Cnf();
 80063e8:	f7ff fdde 	bl	8005fa8 <PEF_Handle_Initialization_Cnf>
		break;
 80063ec:	e03b      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Parameter_Exchange_Req();
 80063ee:	f7ff fdef 	bl	8005fd0 <PEF_Handle_Parameter_Exchange_Req>
		break;
 80063f2:	e038      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Parameter_Exchange_Res();
 80063f4:	f7ff fe00 	bl	8005ff8 <PEF_Handle_Parameter_Exchange_Res>
		break;
 80063f8:	e035      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Parameter_Exchange_Cnf();
 80063fa:	f7ff fe11 	bl	8006020 <PEF_Handle_Parameter_Exchange_Cnf>
		break;
 80063fe:	e032      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Connector_Lock_Req();
 8006400:	f7ff fe1c 	bl	800603c <PEF_Handle_Connector_Lock_Req>
		break;
 8006404:	e02f      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Connector_Lock_Cnf();
 8006406:	f7ff fe2b 	bl	8006060 <PEF_Handle_Connector_Lock_Cnf>
		break;
 800640a:	e02c      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Contactor_Close_Req();
 800640c:	f7ff fe36 	bl	800607c <PEF_Handle_Contactor_Close_Req>
		break;
 8006410:	e029      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Contactor_Close_Cnf();
 8006412:	f7ff fe45 	bl	80060a0 <PEF_Handle_Contactor_Close_Cnf>
		break;
 8006416:	e026      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Charging_Current_Demand_Req();
 8006418:	f7ff fe50 	bl	80060bc <PEF_Handle_Charging_Current_Demand_Req>
		break;
 800641c:	e023      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Charging_Current_Demand_Res();
 800641e:	f7ff fe75 	bl	800610c <PEF_Handle_Charging_Current_Demand_Res>
		break;
 8006422:	e020      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Current_Suppression_Req();
 8006424:	f7ff fe82 	bl	800612c <PEF_Handle_Current_Suppression_Req>
		break;
 8006428:	e01d      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Current_Suppression_Res();
 800642a:	f7ff fe9d 	bl	8006168 <PEF_Handle_Current_Suppression_Res>
		break;
 800642e:	e01a      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Current_Suppression_Cnf();
 8006430:	f7ff feae 	bl	8006190 <PEF_Handle_Current_Suppression_Cnf>
		break;
 8006434:	e017      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Zero_CURRENT_CONFIRM_Req();
 8006436:	f7ff febd 	bl	80061b4 <PEF_Handle_Zero_CURRENT_CONFIRM_Req>
		break;
 800643a:	e014      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Zero_CURRENT_CONFIRM_Cnf();
 800643c:	f7ff fecc 	bl	80061d8 <PEF_Handle_Zero_CURRENT_CONFIRM_Cnf>
		break;
 8006440:	e011      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Voltage_Verification_Req();
 8006442:	f7ff fee3 	bl	800620c <PEF_Handle_Voltage_Verification_Req>
		break;
 8006446:	e00e      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Voltage_Verification_Cnf();
 8006448:	f7ff fef2 	bl	8006230 <PEF_Handle_Voltage_Verification_Cnf>
		break;
 800644c:	e00b      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Connector_Unlock_Req();
 800644e:	f7ff ff01 	bl	8006254 <PEF_Handle_Connector_Unlock_Req>
		break;
 8006452:	e008      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_Connector_Unlock_Cnf();
 8006454:	f7ff ff10 	bl	8006278 <PEF_Handle_Connector_Unlock_Cnf>
		break;
 8006458:	e005      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_End_of_Charge_Req();
 800645a:	f7ff ff1f 	bl	800629c <PEF_Handle_End_of_Charge_Req>
		break;
 800645e:	e002      	b.n	8006466 <PEF_Evaluate_Exchange_Data+0x18a>
		PEF_Handle_End_of_Charge_Cnf();
 8006460:	f7ff ff2e 	bl	80062c0 <PEF_Handle_End_of_Charge_Cnf>
		break;
 8006464:	bf00      	nop
}
 8006466:	bf00      	nop
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop

0800646c <rand>:
 800646c:	4b16      	ldr	r3, [pc, #88]	@ (80064c8 <rand+0x5c>)
 800646e:	b510      	push	{r4, lr}
 8006470:	681c      	ldr	r4, [r3, #0]
 8006472:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006474:	b9b3      	cbnz	r3, 80064a4 <rand+0x38>
 8006476:	2018      	movs	r0, #24
 8006478:	f000 fa4e 	bl	8006918 <malloc>
 800647c:	4602      	mov	r2, r0
 800647e:	6320      	str	r0, [r4, #48]	@ 0x30
 8006480:	b920      	cbnz	r0, 800648c <rand+0x20>
 8006482:	4b12      	ldr	r3, [pc, #72]	@ (80064cc <rand+0x60>)
 8006484:	4812      	ldr	r0, [pc, #72]	@ (80064d0 <rand+0x64>)
 8006486:	2152      	movs	r1, #82	@ 0x52
 8006488:	f000 f9de 	bl	8006848 <__assert_func>
 800648c:	4911      	ldr	r1, [pc, #68]	@ (80064d4 <rand+0x68>)
 800648e:	4b12      	ldr	r3, [pc, #72]	@ (80064d8 <rand+0x6c>)
 8006490:	e9c0 1300 	strd	r1, r3, [r0]
 8006494:	4b11      	ldr	r3, [pc, #68]	@ (80064dc <rand+0x70>)
 8006496:	6083      	str	r3, [r0, #8]
 8006498:	230b      	movs	r3, #11
 800649a:	8183      	strh	r3, [r0, #12]
 800649c:	2100      	movs	r1, #0
 800649e:	2001      	movs	r0, #1
 80064a0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80064a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80064a6:	480e      	ldr	r0, [pc, #56]	@ (80064e0 <rand+0x74>)
 80064a8:	690b      	ldr	r3, [r1, #16]
 80064aa:	694c      	ldr	r4, [r1, #20]
 80064ac:	4a0d      	ldr	r2, [pc, #52]	@ (80064e4 <rand+0x78>)
 80064ae:	4358      	muls	r0, r3
 80064b0:	fb02 0004 	mla	r0, r2, r4, r0
 80064b4:	fba3 3202 	umull	r3, r2, r3, r2
 80064b8:	3301      	adds	r3, #1
 80064ba:	eb40 0002 	adc.w	r0, r0, r2
 80064be:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80064c2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80064c6:	bd10      	pop	{r4, pc}
 80064c8:	20000030 	.word	0x20000030
 80064cc:	08007d34 	.word	0x08007d34
 80064d0:	08007d4b 	.word	0x08007d4b
 80064d4:	abcd330e 	.word	0xabcd330e
 80064d8:	e66d1234 	.word	0xe66d1234
 80064dc:	0005deec 	.word	0x0005deec
 80064e0:	5851f42d 	.word	0x5851f42d
 80064e4:	4c957f2d 	.word	0x4c957f2d

080064e8 <std>:
 80064e8:	2300      	movs	r3, #0
 80064ea:	b510      	push	{r4, lr}
 80064ec:	4604      	mov	r4, r0
 80064ee:	e9c0 3300 	strd	r3, r3, [r0]
 80064f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064f6:	6083      	str	r3, [r0, #8]
 80064f8:	8181      	strh	r1, [r0, #12]
 80064fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80064fc:	81c2      	strh	r2, [r0, #14]
 80064fe:	6183      	str	r3, [r0, #24]
 8006500:	4619      	mov	r1, r3
 8006502:	2208      	movs	r2, #8
 8006504:	305c      	adds	r0, #92	@ 0x5c
 8006506:	f000 f914 	bl	8006732 <memset>
 800650a:	4b0d      	ldr	r3, [pc, #52]	@ (8006540 <std+0x58>)
 800650c:	6263      	str	r3, [r4, #36]	@ 0x24
 800650e:	4b0d      	ldr	r3, [pc, #52]	@ (8006544 <std+0x5c>)
 8006510:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006512:	4b0d      	ldr	r3, [pc, #52]	@ (8006548 <std+0x60>)
 8006514:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006516:	4b0d      	ldr	r3, [pc, #52]	@ (800654c <std+0x64>)
 8006518:	6323      	str	r3, [r4, #48]	@ 0x30
 800651a:	4b0d      	ldr	r3, [pc, #52]	@ (8006550 <std+0x68>)
 800651c:	6224      	str	r4, [r4, #32]
 800651e:	429c      	cmp	r4, r3
 8006520:	d006      	beq.n	8006530 <std+0x48>
 8006522:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006526:	4294      	cmp	r4, r2
 8006528:	d002      	beq.n	8006530 <std+0x48>
 800652a:	33d0      	adds	r3, #208	@ 0xd0
 800652c:	429c      	cmp	r4, r3
 800652e:	d105      	bne.n	800653c <std+0x54>
 8006530:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006538:	f000 b974 	b.w	8006824 <__retarget_lock_init_recursive>
 800653c:	bd10      	pop	{r4, pc}
 800653e:	bf00      	nop
 8006540:	080066ad 	.word	0x080066ad
 8006544:	080066cf 	.word	0x080066cf
 8006548:	08006707 	.word	0x08006707
 800654c:	0800672b 	.word	0x0800672b
 8006550:	20001da8 	.word	0x20001da8

08006554 <stdio_exit_handler>:
 8006554:	4a02      	ldr	r2, [pc, #8]	@ (8006560 <stdio_exit_handler+0xc>)
 8006556:	4903      	ldr	r1, [pc, #12]	@ (8006564 <stdio_exit_handler+0x10>)
 8006558:	4803      	ldr	r0, [pc, #12]	@ (8006568 <stdio_exit_handler+0x14>)
 800655a:	f000 b869 	b.w	8006630 <_fwalk_sglue>
 800655e:	bf00      	nop
 8006560:	20000024 	.word	0x20000024
 8006564:	08007159 	.word	0x08007159
 8006568:	20000034 	.word	0x20000034

0800656c <cleanup_stdio>:
 800656c:	6841      	ldr	r1, [r0, #4]
 800656e:	4b0c      	ldr	r3, [pc, #48]	@ (80065a0 <cleanup_stdio+0x34>)
 8006570:	4299      	cmp	r1, r3
 8006572:	b510      	push	{r4, lr}
 8006574:	4604      	mov	r4, r0
 8006576:	d001      	beq.n	800657c <cleanup_stdio+0x10>
 8006578:	f000 fdee 	bl	8007158 <_fflush_r>
 800657c:	68a1      	ldr	r1, [r4, #8]
 800657e:	4b09      	ldr	r3, [pc, #36]	@ (80065a4 <cleanup_stdio+0x38>)
 8006580:	4299      	cmp	r1, r3
 8006582:	d002      	beq.n	800658a <cleanup_stdio+0x1e>
 8006584:	4620      	mov	r0, r4
 8006586:	f000 fde7 	bl	8007158 <_fflush_r>
 800658a:	68e1      	ldr	r1, [r4, #12]
 800658c:	4b06      	ldr	r3, [pc, #24]	@ (80065a8 <cleanup_stdio+0x3c>)
 800658e:	4299      	cmp	r1, r3
 8006590:	d004      	beq.n	800659c <cleanup_stdio+0x30>
 8006592:	4620      	mov	r0, r4
 8006594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006598:	f000 bdde 	b.w	8007158 <_fflush_r>
 800659c:	bd10      	pop	{r4, pc}
 800659e:	bf00      	nop
 80065a0:	20001da8 	.word	0x20001da8
 80065a4:	20001e10 	.word	0x20001e10
 80065a8:	20001e78 	.word	0x20001e78

080065ac <global_stdio_init.part.0>:
 80065ac:	b510      	push	{r4, lr}
 80065ae:	4b0b      	ldr	r3, [pc, #44]	@ (80065dc <global_stdio_init.part.0+0x30>)
 80065b0:	4c0b      	ldr	r4, [pc, #44]	@ (80065e0 <global_stdio_init.part.0+0x34>)
 80065b2:	4a0c      	ldr	r2, [pc, #48]	@ (80065e4 <global_stdio_init.part.0+0x38>)
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	4620      	mov	r0, r4
 80065b8:	2200      	movs	r2, #0
 80065ba:	2104      	movs	r1, #4
 80065bc:	f7ff ff94 	bl	80064e8 <std>
 80065c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80065c4:	2201      	movs	r2, #1
 80065c6:	2109      	movs	r1, #9
 80065c8:	f7ff ff8e 	bl	80064e8 <std>
 80065cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80065d0:	2202      	movs	r2, #2
 80065d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065d6:	2112      	movs	r1, #18
 80065d8:	f7ff bf86 	b.w	80064e8 <std>
 80065dc:	20001ee0 	.word	0x20001ee0
 80065e0:	20001da8 	.word	0x20001da8
 80065e4:	08006555 	.word	0x08006555

080065e8 <__sfp_lock_acquire>:
 80065e8:	4801      	ldr	r0, [pc, #4]	@ (80065f0 <__sfp_lock_acquire+0x8>)
 80065ea:	f000 b91c 	b.w	8006826 <__retarget_lock_acquire_recursive>
 80065ee:	bf00      	nop
 80065f0:	20001ee9 	.word	0x20001ee9

080065f4 <__sfp_lock_release>:
 80065f4:	4801      	ldr	r0, [pc, #4]	@ (80065fc <__sfp_lock_release+0x8>)
 80065f6:	f000 b917 	b.w	8006828 <__retarget_lock_release_recursive>
 80065fa:	bf00      	nop
 80065fc:	20001ee9 	.word	0x20001ee9

08006600 <__sinit>:
 8006600:	b510      	push	{r4, lr}
 8006602:	4604      	mov	r4, r0
 8006604:	f7ff fff0 	bl	80065e8 <__sfp_lock_acquire>
 8006608:	6a23      	ldr	r3, [r4, #32]
 800660a:	b11b      	cbz	r3, 8006614 <__sinit+0x14>
 800660c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006610:	f7ff bff0 	b.w	80065f4 <__sfp_lock_release>
 8006614:	4b04      	ldr	r3, [pc, #16]	@ (8006628 <__sinit+0x28>)
 8006616:	6223      	str	r3, [r4, #32]
 8006618:	4b04      	ldr	r3, [pc, #16]	@ (800662c <__sinit+0x2c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1f5      	bne.n	800660c <__sinit+0xc>
 8006620:	f7ff ffc4 	bl	80065ac <global_stdio_init.part.0>
 8006624:	e7f2      	b.n	800660c <__sinit+0xc>
 8006626:	bf00      	nop
 8006628:	0800656d 	.word	0x0800656d
 800662c:	20001ee0 	.word	0x20001ee0

08006630 <_fwalk_sglue>:
 8006630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006634:	4607      	mov	r7, r0
 8006636:	4688      	mov	r8, r1
 8006638:	4614      	mov	r4, r2
 800663a:	2600      	movs	r6, #0
 800663c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006640:	f1b9 0901 	subs.w	r9, r9, #1
 8006644:	d505      	bpl.n	8006652 <_fwalk_sglue+0x22>
 8006646:	6824      	ldr	r4, [r4, #0]
 8006648:	2c00      	cmp	r4, #0
 800664a:	d1f7      	bne.n	800663c <_fwalk_sglue+0xc>
 800664c:	4630      	mov	r0, r6
 800664e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006652:	89ab      	ldrh	r3, [r5, #12]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d907      	bls.n	8006668 <_fwalk_sglue+0x38>
 8006658:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800665c:	3301      	adds	r3, #1
 800665e:	d003      	beq.n	8006668 <_fwalk_sglue+0x38>
 8006660:	4629      	mov	r1, r5
 8006662:	4638      	mov	r0, r7
 8006664:	47c0      	blx	r8
 8006666:	4306      	orrs	r6, r0
 8006668:	3568      	adds	r5, #104	@ 0x68
 800666a:	e7e9      	b.n	8006640 <_fwalk_sglue+0x10>

0800666c <siprintf>:
 800666c:	b40e      	push	{r1, r2, r3}
 800666e:	b500      	push	{lr}
 8006670:	b09c      	sub	sp, #112	@ 0x70
 8006672:	ab1d      	add	r3, sp, #116	@ 0x74
 8006674:	9002      	str	r0, [sp, #8]
 8006676:	9006      	str	r0, [sp, #24]
 8006678:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800667c:	4809      	ldr	r0, [pc, #36]	@ (80066a4 <siprintf+0x38>)
 800667e:	9107      	str	r1, [sp, #28]
 8006680:	9104      	str	r1, [sp, #16]
 8006682:	4909      	ldr	r1, [pc, #36]	@ (80066a8 <siprintf+0x3c>)
 8006684:	f853 2b04 	ldr.w	r2, [r3], #4
 8006688:	9105      	str	r1, [sp, #20]
 800668a:	6800      	ldr	r0, [r0, #0]
 800668c:	9301      	str	r3, [sp, #4]
 800668e:	a902      	add	r1, sp, #8
 8006690:	f000 fa54 	bl	8006b3c <_svfiprintf_r>
 8006694:	9b02      	ldr	r3, [sp, #8]
 8006696:	2200      	movs	r2, #0
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	b01c      	add	sp, #112	@ 0x70
 800669c:	f85d eb04 	ldr.w	lr, [sp], #4
 80066a0:	b003      	add	sp, #12
 80066a2:	4770      	bx	lr
 80066a4:	20000030 	.word	0x20000030
 80066a8:	ffff0208 	.word	0xffff0208

080066ac <__sread>:
 80066ac:	b510      	push	{r4, lr}
 80066ae:	460c      	mov	r4, r1
 80066b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b4:	f000 f868 	bl	8006788 <_read_r>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	bfab      	itete	ge
 80066bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80066be:	89a3      	ldrhlt	r3, [r4, #12]
 80066c0:	181b      	addge	r3, r3, r0
 80066c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80066c6:	bfac      	ite	ge
 80066c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80066ca:	81a3      	strhlt	r3, [r4, #12]
 80066cc:	bd10      	pop	{r4, pc}

080066ce <__swrite>:
 80066ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066d2:	461f      	mov	r7, r3
 80066d4:	898b      	ldrh	r3, [r1, #12]
 80066d6:	05db      	lsls	r3, r3, #23
 80066d8:	4605      	mov	r5, r0
 80066da:	460c      	mov	r4, r1
 80066dc:	4616      	mov	r6, r2
 80066de:	d505      	bpl.n	80066ec <__swrite+0x1e>
 80066e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066e4:	2302      	movs	r3, #2
 80066e6:	2200      	movs	r2, #0
 80066e8:	f000 f83c 	bl	8006764 <_lseek_r>
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066f6:	81a3      	strh	r3, [r4, #12]
 80066f8:	4632      	mov	r2, r6
 80066fa:	463b      	mov	r3, r7
 80066fc:	4628      	mov	r0, r5
 80066fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006702:	f000 b853 	b.w	80067ac <_write_r>

08006706 <__sseek>:
 8006706:	b510      	push	{r4, lr}
 8006708:	460c      	mov	r4, r1
 800670a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800670e:	f000 f829 	bl	8006764 <_lseek_r>
 8006712:	1c43      	adds	r3, r0, #1
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	bf15      	itete	ne
 8006718:	6560      	strne	r0, [r4, #84]	@ 0x54
 800671a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800671e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006722:	81a3      	strheq	r3, [r4, #12]
 8006724:	bf18      	it	ne
 8006726:	81a3      	strhne	r3, [r4, #12]
 8006728:	bd10      	pop	{r4, pc}

0800672a <__sclose>:
 800672a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800672e:	f000 b809 	b.w	8006744 <_close_r>

08006732 <memset>:
 8006732:	4402      	add	r2, r0
 8006734:	4603      	mov	r3, r0
 8006736:	4293      	cmp	r3, r2
 8006738:	d100      	bne.n	800673c <memset+0xa>
 800673a:	4770      	bx	lr
 800673c:	f803 1b01 	strb.w	r1, [r3], #1
 8006740:	e7f9      	b.n	8006736 <memset+0x4>
	...

08006744 <_close_r>:
 8006744:	b538      	push	{r3, r4, r5, lr}
 8006746:	4d06      	ldr	r5, [pc, #24]	@ (8006760 <_close_r+0x1c>)
 8006748:	2300      	movs	r3, #0
 800674a:	4604      	mov	r4, r0
 800674c:	4608      	mov	r0, r1
 800674e:	602b      	str	r3, [r5, #0]
 8006750:	f7fa fa04 	bl	8000b5c <_close>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d102      	bne.n	800675e <_close_r+0x1a>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	b103      	cbz	r3, 800675e <_close_r+0x1a>
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	bd38      	pop	{r3, r4, r5, pc}
 8006760:	20001ee4 	.word	0x20001ee4

08006764 <_lseek_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	4d07      	ldr	r5, [pc, #28]	@ (8006784 <_lseek_r+0x20>)
 8006768:	4604      	mov	r4, r0
 800676a:	4608      	mov	r0, r1
 800676c:	4611      	mov	r1, r2
 800676e:	2200      	movs	r2, #0
 8006770:	602a      	str	r2, [r5, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	f7fa fa19 	bl	8000baa <_lseek>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_lseek_r+0x1e>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_lseek_r+0x1e>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	20001ee4 	.word	0x20001ee4

08006788 <_read_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4d07      	ldr	r5, [pc, #28]	@ (80067a8 <_read_r+0x20>)
 800678c:	4604      	mov	r4, r0
 800678e:	4608      	mov	r0, r1
 8006790:	4611      	mov	r1, r2
 8006792:	2200      	movs	r2, #0
 8006794:	602a      	str	r2, [r5, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	f7fa f9a7 	bl	8000aea <_read>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d102      	bne.n	80067a6 <_read_r+0x1e>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	b103      	cbz	r3, 80067a6 <_read_r+0x1e>
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	20001ee4 	.word	0x20001ee4

080067ac <_write_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4d07      	ldr	r5, [pc, #28]	@ (80067cc <_write_r+0x20>)
 80067b0:	4604      	mov	r4, r0
 80067b2:	4608      	mov	r0, r1
 80067b4:	4611      	mov	r1, r2
 80067b6:	2200      	movs	r2, #0
 80067b8:	602a      	str	r2, [r5, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f7fa f9b2 	bl	8000b24 <_write>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d102      	bne.n	80067ca <_write_r+0x1e>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	b103      	cbz	r3, 80067ca <_write_r+0x1e>
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	20001ee4 	.word	0x20001ee4

080067d0 <__errno>:
 80067d0:	4b01      	ldr	r3, [pc, #4]	@ (80067d8 <__errno+0x8>)
 80067d2:	6818      	ldr	r0, [r3, #0]
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	20000030 	.word	0x20000030

080067dc <__libc_init_array>:
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	4d0d      	ldr	r5, [pc, #52]	@ (8006814 <__libc_init_array+0x38>)
 80067e0:	4c0d      	ldr	r4, [pc, #52]	@ (8006818 <__libc_init_array+0x3c>)
 80067e2:	1b64      	subs	r4, r4, r5
 80067e4:	10a4      	asrs	r4, r4, #2
 80067e6:	2600      	movs	r6, #0
 80067e8:	42a6      	cmp	r6, r4
 80067ea:	d109      	bne.n	8006800 <__libc_init_array+0x24>
 80067ec:	4d0b      	ldr	r5, [pc, #44]	@ (800681c <__libc_init_array+0x40>)
 80067ee:	4c0c      	ldr	r4, [pc, #48]	@ (8006820 <__libc_init_array+0x44>)
 80067f0:	f000 fff0 	bl	80077d4 <_init>
 80067f4:	1b64      	subs	r4, r4, r5
 80067f6:	10a4      	asrs	r4, r4, #2
 80067f8:	2600      	movs	r6, #0
 80067fa:	42a6      	cmp	r6, r4
 80067fc:	d105      	bne.n	800680a <__libc_init_array+0x2e>
 80067fe:	bd70      	pop	{r4, r5, r6, pc}
 8006800:	f855 3b04 	ldr.w	r3, [r5], #4
 8006804:	4798      	blx	r3
 8006806:	3601      	adds	r6, #1
 8006808:	e7ee      	b.n	80067e8 <__libc_init_array+0xc>
 800680a:	f855 3b04 	ldr.w	r3, [r5], #4
 800680e:	4798      	blx	r3
 8006810:	3601      	adds	r6, #1
 8006812:	e7f2      	b.n	80067fa <__libc_init_array+0x1e>
 8006814:	08007e1c 	.word	0x08007e1c
 8006818:	08007e1c 	.word	0x08007e1c
 800681c:	08007e1c 	.word	0x08007e1c
 8006820:	08007e20 	.word	0x08007e20

08006824 <__retarget_lock_init_recursive>:
 8006824:	4770      	bx	lr

08006826 <__retarget_lock_acquire_recursive>:
 8006826:	4770      	bx	lr

08006828 <__retarget_lock_release_recursive>:
 8006828:	4770      	bx	lr

0800682a <memcpy>:
 800682a:	440a      	add	r2, r1
 800682c:	4291      	cmp	r1, r2
 800682e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006832:	d100      	bne.n	8006836 <memcpy+0xc>
 8006834:	4770      	bx	lr
 8006836:	b510      	push	{r4, lr}
 8006838:	f811 4b01 	ldrb.w	r4, [r1], #1
 800683c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006840:	4291      	cmp	r1, r2
 8006842:	d1f9      	bne.n	8006838 <memcpy+0xe>
 8006844:	bd10      	pop	{r4, pc}
	...

08006848 <__assert_func>:
 8006848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800684a:	4614      	mov	r4, r2
 800684c:	461a      	mov	r2, r3
 800684e:	4b09      	ldr	r3, [pc, #36]	@ (8006874 <__assert_func+0x2c>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4605      	mov	r5, r0
 8006854:	68d8      	ldr	r0, [r3, #12]
 8006856:	b954      	cbnz	r4, 800686e <__assert_func+0x26>
 8006858:	4b07      	ldr	r3, [pc, #28]	@ (8006878 <__assert_func+0x30>)
 800685a:	461c      	mov	r4, r3
 800685c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006860:	9100      	str	r1, [sp, #0]
 8006862:	462b      	mov	r3, r5
 8006864:	4905      	ldr	r1, [pc, #20]	@ (800687c <__assert_func+0x34>)
 8006866:	f000 fc9f 	bl	80071a8 <fiprintf>
 800686a:	f000 fcd9 	bl	8007220 <abort>
 800686e:	4b04      	ldr	r3, [pc, #16]	@ (8006880 <__assert_func+0x38>)
 8006870:	e7f4      	b.n	800685c <__assert_func+0x14>
 8006872:	bf00      	nop
 8006874:	20000030 	.word	0x20000030
 8006878:	08007dde 	.word	0x08007dde
 800687c:	08007db0 	.word	0x08007db0
 8006880:	08007da3 	.word	0x08007da3

08006884 <_free_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	4605      	mov	r5, r0
 8006888:	2900      	cmp	r1, #0
 800688a:	d041      	beq.n	8006910 <_free_r+0x8c>
 800688c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006890:	1f0c      	subs	r4, r1, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	bfb8      	it	lt
 8006896:	18e4      	addlt	r4, r4, r3
 8006898:	f000 f8e8 	bl	8006a6c <__malloc_lock>
 800689c:	4a1d      	ldr	r2, [pc, #116]	@ (8006914 <_free_r+0x90>)
 800689e:	6813      	ldr	r3, [r2, #0]
 80068a0:	b933      	cbnz	r3, 80068b0 <_free_r+0x2c>
 80068a2:	6063      	str	r3, [r4, #4]
 80068a4:	6014      	str	r4, [r2, #0]
 80068a6:	4628      	mov	r0, r5
 80068a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ac:	f000 b8e4 	b.w	8006a78 <__malloc_unlock>
 80068b0:	42a3      	cmp	r3, r4
 80068b2:	d908      	bls.n	80068c6 <_free_r+0x42>
 80068b4:	6820      	ldr	r0, [r4, #0]
 80068b6:	1821      	adds	r1, r4, r0
 80068b8:	428b      	cmp	r3, r1
 80068ba:	bf01      	itttt	eq
 80068bc:	6819      	ldreq	r1, [r3, #0]
 80068be:	685b      	ldreq	r3, [r3, #4]
 80068c0:	1809      	addeq	r1, r1, r0
 80068c2:	6021      	streq	r1, [r4, #0]
 80068c4:	e7ed      	b.n	80068a2 <_free_r+0x1e>
 80068c6:	461a      	mov	r2, r3
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	b10b      	cbz	r3, 80068d0 <_free_r+0x4c>
 80068cc:	42a3      	cmp	r3, r4
 80068ce:	d9fa      	bls.n	80068c6 <_free_r+0x42>
 80068d0:	6811      	ldr	r1, [r2, #0]
 80068d2:	1850      	adds	r0, r2, r1
 80068d4:	42a0      	cmp	r0, r4
 80068d6:	d10b      	bne.n	80068f0 <_free_r+0x6c>
 80068d8:	6820      	ldr	r0, [r4, #0]
 80068da:	4401      	add	r1, r0
 80068dc:	1850      	adds	r0, r2, r1
 80068de:	4283      	cmp	r3, r0
 80068e0:	6011      	str	r1, [r2, #0]
 80068e2:	d1e0      	bne.n	80068a6 <_free_r+0x22>
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	6053      	str	r3, [r2, #4]
 80068ea:	4408      	add	r0, r1
 80068ec:	6010      	str	r0, [r2, #0]
 80068ee:	e7da      	b.n	80068a6 <_free_r+0x22>
 80068f0:	d902      	bls.n	80068f8 <_free_r+0x74>
 80068f2:	230c      	movs	r3, #12
 80068f4:	602b      	str	r3, [r5, #0]
 80068f6:	e7d6      	b.n	80068a6 <_free_r+0x22>
 80068f8:	6820      	ldr	r0, [r4, #0]
 80068fa:	1821      	adds	r1, r4, r0
 80068fc:	428b      	cmp	r3, r1
 80068fe:	bf04      	itt	eq
 8006900:	6819      	ldreq	r1, [r3, #0]
 8006902:	685b      	ldreq	r3, [r3, #4]
 8006904:	6063      	str	r3, [r4, #4]
 8006906:	bf04      	itt	eq
 8006908:	1809      	addeq	r1, r1, r0
 800690a:	6021      	streq	r1, [r4, #0]
 800690c:	6054      	str	r4, [r2, #4]
 800690e:	e7ca      	b.n	80068a6 <_free_r+0x22>
 8006910:	bd38      	pop	{r3, r4, r5, pc}
 8006912:	bf00      	nop
 8006914:	20001ef0 	.word	0x20001ef0

08006918 <malloc>:
 8006918:	4b02      	ldr	r3, [pc, #8]	@ (8006924 <malloc+0xc>)
 800691a:	4601      	mov	r1, r0
 800691c:	6818      	ldr	r0, [r3, #0]
 800691e:	f000 b825 	b.w	800696c <_malloc_r>
 8006922:	bf00      	nop
 8006924:	20000030 	.word	0x20000030

08006928 <sbrk_aligned>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	4e0f      	ldr	r6, [pc, #60]	@ (8006968 <sbrk_aligned+0x40>)
 800692c:	460c      	mov	r4, r1
 800692e:	6831      	ldr	r1, [r6, #0]
 8006930:	4605      	mov	r5, r0
 8006932:	b911      	cbnz	r1, 800693a <sbrk_aligned+0x12>
 8006934:	f000 fc64 	bl	8007200 <_sbrk_r>
 8006938:	6030      	str	r0, [r6, #0]
 800693a:	4621      	mov	r1, r4
 800693c:	4628      	mov	r0, r5
 800693e:	f000 fc5f 	bl	8007200 <_sbrk_r>
 8006942:	1c43      	adds	r3, r0, #1
 8006944:	d103      	bne.n	800694e <sbrk_aligned+0x26>
 8006946:	f04f 34ff 	mov.w	r4, #4294967295
 800694a:	4620      	mov	r0, r4
 800694c:	bd70      	pop	{r4, r5, r6, pc}
 800694e:	1cc4      	adds	r4, r0, #3
 8006950:	f024 0403 	bic.w	r4, r4, #3
 8006954:	42a0      	cmp	r0, r4
 8006956:	d0f8      	beq.n	800694a <sbrk_aligned+0x22>
 8006958:	1a21      	subs	r1, r4, r0
 800695a:	4628      	mov	r0, r5
 800695c:	f000 fc50 	bl	8007200 <_sbrk_r>
 8006960:	3001      	adds	r0, #1
 8006962:	d1f2      	bne.n	800694a <sbrk_aligned+0x22>
 8006964:	e7ef      	b.n	8006946 <sbrk_aligned+0x1e>
 8006966:	bf00      	nop
 8006968:	20001eec 	.word	0x20001eec

0800696c <_malloc_r>:
 800696c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006970:	1ccd      	adds	r5, r1, #3
 8006972:	f025 0503 	bic.w	r5, r5, #3
 8006976:	3508      	adds	r5, #8
 8006978:	2d0c      	cmp	r5, #12
 800697a:	bf38      	it	cc
 800697c:	250c      	movcc	r5, #12
 800697e:	2d00      	cmp	r5, #0
 8006980:	4606      	mov	r6, r0
 8006982:	db01      	blt.n	8006988 <_malloc_r+0x1c>
 8006984:	42a9      	cmp	r1, r5
 8006986:	d904      	bls.n	8006992 <_malloc_r+0x26>
 8006988:	230c      	movs	r3, #12
 800698a:	6033      	str	r3, [r6, #0]
 800698c:	2000      	movs	r0, #0
 800698e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006992:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a68 <_malloc_r+0xfc>
 8006996:	f000 f869 	bl	8006a6c <__malloc_lock>
 800699a:	f8d8 3000 	ldr.w	r3, [r8]
 800699e:	461c      	mov	r4, r3
 80069a0:	bb44      	cbnz	r4, 80069f4 <_malloc_r+0x88>
 80069a2:	4629      	mov	r1, r5
 80069a4:	4630      	mov	r0, r6
 80069a6:	f7ff ffbf 	bl	8006928 <sbrk_aligned>
 80069aa:	1c43      	adds	r3, r0, #1
 80069ac:	4604      	mov	r4, r0
 80069ae:	d158      	bne.n	8006a62 <_malloc_r+0xf6>
 80069b0:	f8d8 4000 	ldr.w	r4, [r8]
 80069b4:	4627      	mov	r7, r4
 80069b6:	2f00      	cmp	r7, #0
 80069b8:	d143      	bne.n	8006a42 <_malloc_r+0xd6>
 80069ba:	2c00      	cmp	r4, #0
 80069bc:	d04b      	beq.n	8006a56 <_malloc_r+0xea>
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	4639      	mov	r1, r7
 80069c2:	4630      	mov	r0, r6
 80069c4:	eb04 0903 	add.w	r9, r4, r3
 80069c8:	f000 fc1a 	bl	8007200 <_sbrk_r>
 80069cc:	4581      	cmp	r9, r0
 80069ce:	d142      	bne.n	8006a56 <_malloc_r+0xea>
 80069d0:	6821      	ldr	r1, [r4, #0]
 80069d2:	1a6d      	subs	r5, r5, r1
 80069d4:	4629      	mov	r1, r5
 80069d6:	4630      	mov	r0, r6
 80069d8:	f7ff ffa6 	bl	8006928 <sbrk_aligned>
 80069dc:	3001      	adds	r0, #1
 80069de:	d03a      	beq.n	8006a56 <_malloc_r+0xea>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	442b      	add	r3, r5
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	f8d8 3000 	ldr.w	r3, [r8]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	bb62      	cbnz	r2, 8006a48 <_malloc_r+0xdc>
 80069ee:	f8c8 7000 	str.w	r7, [r8]
 80069f2:	e00f      	b.n	8006a14 <_malloc_r+0xa8>
 80069f4:	6822      	ldr	r2, [r4, #0]
 80069f6:	1b52      	subs	r2, r2, r5
 80069f8:	d420      	bmi.n	8006a3c <_malloc_r+0xd0>
 80069fa:	2a0b      	cmp	r2, #11
 80069fc:	d917      	bls.n	8006a2e <_malloc_r+0xc2>
 80069fe:	1961      	adds	r1, r4, r5
 8006a00:	42a3      	cmp	r3, r4
 8006a02:	6025      	str	r5, [r4, #0]
 8006a04:	bf18      	it	ne
 8006a06:	6059      	strne	r1, [r3, #4]
 8006a08:	6863      	ldr	r3, [r4, #4]
 8006a0a:	bf08      	it	eq
 8006a0c:	f8c8 1000 	streq.w	r1, [r8]
 8006a10:	5162      	str	r2, [r4, r5]
 8006a12:	604b      	str	r3, [r1, #4]
 8006a14:	4630      	mov	r0, r6
 8006a16:	f000 f82f 	bl	8006a78 <__malloc_unlock>
 8006a1a:	f104 000b 	add.w	r0, r4, #11
 8006a1e:	1d23      	adds	r3, r4, #4
 8006a20:	f020 0007 	bic.w	r0, r0, #7
 8006a24:	1ac2      	subs	r2, r0, r3
 8006a26:	bf1c      	itt	ne
 8006a28:	1a1b      	subne	r3, r3, r0
 8006a2a:	50a3      	strne	r3, [r4, r2]
 8006a2c:	e7af      	b.n	800698e <_malloc_r+0x22>
 8006a2e:	6862      	ldr	r2, [r4, #4]
 8006a30:	42a3      	cmp	r3, r4
 8006a32:	bf0c      	ite	eq
 8006a34:	f8c8 2000 	streq.w	r2, [r8]
 8006a38:	605a      	strne	r2, [r3, #4]
 8006a3a:	e7eb      	b.n	8006a14 <_malloc_r+0xa8>
 8006a3c:	4623      	mov	r3, r4
 8006a3e:	6864      	ldr	r4, [r4, #4]
 8006a40:	e7ae      	b.n	80069a0 <_malloc_r+0x34>
 8006a42:	463c      	mov	r4, r7
 8006a44:	687f      	ldr	r7, [r7, #4]
 8006a46:	e7b6      	b.n	80069b6 <_malloc_r+0x4a>
 8006a48:	461a      	mov	r2, r3
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	42a3      	cmp	r3, r4
 8006a4e:	d1fb      	bne.n	8006a48 <_malloc_r+0xdc>
 8006a50:	2300      	movs	r3, #0
 8006a52:	6053      	str	r3, [r2, #4]
 8006a54:	e7de      	b.n	8006a14 <_malloc_r+0xa8>
 8006a56:	230c      	movs	r3, #12
 8006a58:	6033      	str	r3, [r6, #0]
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	f000 f80c 	bl	8006a78 <__malloc_unlock>
 8006a60:	e794      	b.n	800698c <_malloc_r+0x20>
 8006a62:	6005      	str	r5, [r0, #0]
 8006a64:	e7d6      	b.n	8006a14 <_malloc_r+0xa8>
 8006a66:	bf00      	nop
 8006a68:	20001ef0 	.word	0x20001ef0

08006a6c <__malloc_lock>:
 8006a6c:	4801      	ldr	r0, [pc, #4]	@ (8006a74 <__malloc_lock+0x8>)
 8006a6e:	f7ff beda 	b.w	8006826 <__retarget_lock_acquire_recursive>
 8006a72:	bf00      	nop
 8006a74:	20001ee8 	.word	0x20001ee8

08006a78 <__malloc_unlock>:
 8006a78:	4801      	ldr	r0, [pc, #4]	@ (8006a80 <__malloc_unlock+0x8>)
 8006a7a:	f7ff bed5 	b.w	8006828 <__retarget_lock_release_recursive>
 8006a7e:	bf00      	nop
 8006a80:	20001ee8 	.word	0x20001ee8

08006a84 <__ssputs_r>:
 8006a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a88:	688e      	ldr	r6, [r1, #8]
 8006a8a:	461f      	mov	r7, r3
 8006a8c:	42be      	cmp	r6, r7
 8006a8e:	680b      	ldr	r3, [r1, #0]
 8006a90:	4682      	mov	sl, r0
 8006a92:	460c      	mov	r4, r1
 8006a94:	4690      	mov	r8, r2
 8006a96:	d82d      	bhi.n	8006af4 <__ssputs_r+0x70>
 8006a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006aa0:	d026      	beq.n	8006af0 <__ssputs_r+0x6c>
 8006aa2:	6965      	ldr	r5, [r4, #20]
 8006aa4:	6909      	ldr	r1, [r1, #16]
 8006aa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006aaa:	eba3 0901 	sub.w	r9, r3, r1
 8006aae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ab2:	1c7b      	adds	r3, r7, #1
 8006ab4:	444b      	add	r3, r9
 8006ab6:	106d      	asrs	r5, r5, #1
 8006ab8:	429d      	cmp	r5, r3
 8006aba:	bf38      	it	cc
 8006abc:	461d      	movcc	r5, r3
 8006abe:	0553      	lsls	r3, r2, #21
 8006ac0:	d527      	bpl.n	8006b12 <__ssputs_r+0x8e>
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	f7ff ff52 	bl	800696c <_malloc_r>
 8006ac8:	4606      	mov	r6, r0
 8006aca:	b360      	cbz	r0, 8006b26 <__ssputs_r+0xa2>
 8006acc:	6921      	ldr	r1, [r4, #16]
 8006ace:	464a      	mov	r2, r9
 8006ad0:	f7ff feab 	bl	800682a <memcpy>
 8006ad4:	89a3      	ldrh	r3, [r4, #12]
 8006ad6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ade:	81a3      	strh	r3, [r4, #12]
 8006ae0:	6126      	str	r6, [r4, #16]
 8006ae2:	6165      	str	r5, [r4, #20]
 8006ae4:	444e      	add	r6, r9
 8006ae6:	eba5 0509 	sub.w	r5, r5, r9
 8006aea:	6026      	str	r6, [r4, #0]
 8006aec:	60a5      	str	r5, [r4, #8]
 8006aee:	463e      	mov	r6, r7
 8006af0:	42be      	cmp	r6, r7
 8006af2:	d900      	bls.n	8006af6 <__ssputs_r+0x72>
 8006af4:	463e      	mov	r6, r7
 8006af6:	6820      	ldr	r0, [r4, #0]
 8006af8:	4632      	mov	r2, r6
 8006afa:	4641      	mov	r1, r8
 8006afc:	f000 fb66 	bl	80071cc <memmove>
 8006b00:	68a3      	ldr	r3, [r4, #8]
 8006b02:	1b9b      	subs	r3, r3, r6
 8006b04:	60a3      	str	r3, [r4, #8]
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	4433      	add	r3, r6
 8006b0a:	6023      	str	r3, [r4, #0]
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b12:	462a      	mov	r2, r5
 8006b14:	f000 fb8b 	bl	800722e <_realloc_r>
 8006b18:	4606      	mov	r6, r0
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d1e0      	bne.n	8006ae0 <__ssputs_r+0x5c>
 8006b1e:	6921      	ldr	r1, [r4, #16]
 8006b20:	4650      	mov	r0, sl
 8006b22:	f7ff feaf 	bl	8006884 <_free_r>
 8006b26:	230c      	movs	r3, #12
 8006b28:	f8ca 3000 	str.w	r3, [sl]
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b32:	81a3      	strh	r3, [r4, #12]
 8006b34:	f04f 30ff 	mov.w	r0, #4294967295
 8006b38:	e7e9      	b.n	8006b0e <__ssputs_r+0x8a>
	...

08006b3c <_svfiprintf_r>:
 8006b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b40:	4698      	mov	r8, r3
 8006b42:	898b      	ldrh	r3, [r1, #12]
 8006b44:	061b      	lsls	r3, r3, #24
 8006b46:	b09d      	sub	sp, #116	@ 0x74
 8006b48:	4607      	mov	r7, r0
 8006b4a:	460d      	mov	r5, r1
 8006b4c:	4614      	mov	r4, r2
 8006b4e:	d510      	bpl.n	8006b72 <_svfiprintf_r+0x36>
 8006b50:	690b      	ldr	r3, [r1, #16]
 8006b52:	b973      	cbnz	r3, 8006b72 <_svfiprintf_r+0x36>
 8006b54:	2140      	movs	r1, #64	@ 0x40
 8006b56:	f7ff ff09 	bl	800696c <_malloc_r>
 8006b5a:	6028      	str	r0, [r5, #0]
 8006b5c:	6128      	str	r0, [r5, #16]
 8006b5e:	b930      	cbnz	r0, 8006b6e <_svfiprintf_r+0x32>
 8006b60:	230c      	movs	r3, #12
 8006b62:	603b      	str	r3, [r7, #0]
 8006b64:	f04f 30ff 	mov.w	r0, #4294967295
 8006b68:	b01d      	add	sp, #116	@ 0x74
 8006b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b6e:	2340      	movs	r3, #64	@ 0x40
 8006b70:	616b      	str	r3, [r5, #20]
 8006b72:	2300      	movs	r3, #0
 8006b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b76:	2320      	movs	r3, #32
 8006b78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b80:	2330      	movs	r3, #48	@ 0x30
 8006b82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006d20 <_svfiprintf_r+0x1e4>
 8006b86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b8a:	f04f 0901 	mov.w	r9, #1
 8006b8e:	4623      	mov	r3, r4
 8006b90:	469a      	mov	sl, r3
 8006b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b96:	b10a      	cbz	r2, 8006b9c <_svfiprintf_r+0x60>
 8006b98:	2a25      	cmp	r2, #37	@ 0x25
 8006b9a:	d1f9      	bne.n	8006b90 <_svfiprintf_r+0x54>
 8006b9c:	ebba 0b04 	subs.w	fp, sl, r4
 8006ba0:	d00b      	beq.n	8006bba <_svfiprintf_r+0x7e>
 8006ba2:	465b      	mov	r3, fp
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	4638      	mov	r0, r7
 8006baa:	f7ff ff6b 	bl	8006a84 <__ssputs_r>
 8006bae:	3001      	adds	r0, #1
 8006bb0:	f000 80a7 	beq.w	8006d02 <_svfiprintf_r+0x1c6>
 8006bb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bb6:	445a      	add	r2, fp
 8006bb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bba:	f89a 3000 	ldrb.w	r3, [sl]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 809f 	beq.w	8006d02 <_svfiprintf_r+0x1c6>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bce:	f10a 0a01 	add.w	sl, sl, #1
 8006bd2:	9304      	str	r3, [sp, #16]
 8006bd4:	9307      	str	r3, [sp, #28]
 8006bd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006bda:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bdc:	4654      	mov	r4, sl
 8006bde:	2205      	movs	r2, #5
 8006be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006be4:	484e      	ldr	r0, [pc, #312]	@ (8006d20 <_svfiprintf_r+0x1e4>)
 8006be6:	f7f9 fb03 	bl	80001f0 <memchr>
 8006bea:	9a04      	ldr	r2, [sp, #16]
 8006bec:	b9d8      	cbnz	r0, 8006c26 <_svfiprintf_r+0xea>
 8006bee:	06d0      	lsls	r0, r2, #27
 8006bf0:	bf44      	itt	mi
 8006bf2:	2320      	movmi	r3, #32
 8006bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bf8:	0711      	lsls	r1, r2, #28
 8006bfa:	bf44      	itt	mi
 8006bfc:	232b      	movmi	r3, #43	@ 0x2b
 8006bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c02:	f89a 3000 	ldrb.w	r3, [sl]
 8006c06:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c08:	d015      	beq.n	8006c36 <_svfiprintf_r+0xfa>
 8006c0a:	9a07      	ldr	r2, [sp, #28]
 8006c0c:	4654      	mov	r4, sl
 8006c0e:	2000      	movs	r0, #0
 8006c10:	f04f 0c0a 	mov.w	ip, #10
 8006c14:	4621      	mov	r1, r4
 8006c16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c1a:	3b30      	subs	r3, #48	@ 0x30
 8006c1c:	2b09      	cmp	r3, #9
 8006c1e:	d94b      	bls.n	8006cb8 <_svfiprintf_r+0x17c>
 8006c20:	b1b0      	cbz	r0, 8006c50 <_svfiprintf_r+0x114>
 8006c22:	9207      	str	r2, [sp, #28]
 8006c24:	e014      	b.n	8006c50 <_svfiprintf_r+0x114>
 8006c26:	eba0 0308 	sub.w	r3, r0, r8
 8006c2a:	fa09 f303 	lsl.w	r3, r9, r3
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	9304      	str	r3, [sp, #16]
 8006c32:	46a2      	mov	sl, r4
 8006c34:	e7d2      	b.n	8006bdc <_svfiprintf_r+0xa0>
 8006c36:	9b03      	ldr	r3, [sp, #12]
 8006c38:	1d19      	adds	r1, r3, #4
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	9103      	str	r1, [sp, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	bfbb      	ittet	lt
 8006c42:	425b      	neglt	r3, r3
 8006c44:	f042 0202 	orrlt.w	r2, r2, #2
 8006c48:	9307      	strge	r3, [sp, #28]
 8006c4a:	9307      	strlt	r3, [sp, #28]
 8006c4c:	bfb8      	it	lt
 8006c4e:	9204      	strlt	r2, [sp, #16]
 8006c50:	7823      	ldrb	r3, [r4, #0]
 8006c52:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c54:	d10a      	bne.n	8006c6c <_svfiprintf_r+0x130>
 8006c56:	7863      	ldrb	r3, [r4, #1]
 8006c58:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c5a:	d132      	bne.n	8006cc2 <_svfiprintf_r+0x186>
 8006c5c:	9b03      	ldr	r3, [sp, #12]
 8006c5e:	1d1a      	adds	r2, r3, #4
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	9203      	str	r2, [sp, #12]
 8006c64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c68:	3402      	adds	r4, #2
 8006c6a:	9305      	str	r3, [sp, #20]
 8006c6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006d30 <_svfiprintf_r+0x1f4>
 8006c70:	7821      	ldrb	r1, [r4, #0]
 8006c72:	2203      	movs	r2, #3
 8006c74:	4650      	mov	r0, sl
 8006c76:	f7f9 fabb 	bl	80001f0 <memchr>
 8006c7a:	b138      	cbz	r0, 8006c8c <_svfiprintf_r+0x150>
 8006c7c:	9b04      	ldr	r3, [sp, #16]
 8006c7e:	eba0 000a 	sub.w	r0, r0, sl
 8006c82:	2240      	movs	r2, #64	@ 0x40
 8006c84:	4082      	lsls	r2, r0
 8006c86:	4313      	orrs	r3, r2
 8006c88:	3401      	adds	r4, #1
 8006c8a:	9304      	str	r3, [sp, #16]
 8006c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c90:	4824      	ldr	r0, [pc, #144]	@ (8006d24 <_svfiprintf_r+0x1e8>)
 8006c92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c96:	2206      	movs	r2, #6
 8006c98:	f7f9 faaa 	bl	80001f0 <memchr>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d036      	beq.n	8006d0e <_svfiprintf_r+0x1d2>
 8006ca0:	4b21      	ldr	r3, [pc, #132]	@ (8006d28 <_svfiprintf_r+0x1ec>)
 8006ca2:	bb1b      	cbnz	r3, 8006cec <_svfiprintf_r+0x1b0>
 8006ca4:	9b03      	ldr	r3, [sp, #12]
 8006ca6:	3307      	adds	r3, #7
 8006ca8:	f023 0307 	bic.w	r3, r3, #7
 8006cac:	3308      	adds	r3, #8
 8006cae:	9303      	str	r3, [sp, #12]
 8006cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cb2:	4433      	add	r3, r6
 8006cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cb6:	e76a      	b.n	8006b8e <_svfiprintf_r+0x52>
 8006cb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	2001      	movs	r0, #1
 8006cc0:	e7a8      	b.n	8006c14 <_svfiprintf_r+0xd8>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	3401      	adds	r4, #1
 8006cc6:	9305      	str	r3, [sp, #20]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	f04f 0c0a 	mov.w	ip, #10
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cd4:	3a30      	subs	r2, #48	@ 0x30
 8006cd6:	2a09      	cmp	r2, #9
 8006cd8:	d903      	bls.n	8006ce2 <_svfiprintf_r+0x1a6>
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0c6      	beq.n	8006c6c <_svfiprintf_r+0x130>
 8006cde:	9105      	str	r1, [sp, #20]
 8006ce0:	e7c4      	b.n	8006c6c <_svfiprintf_r+0x130>
 8006ce2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e7f0      	b.n	8006cce <_svfiprintf_r+0x192>
 8006cec:	ab03      	add	r3, sp, #12
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	462a      	mov	r2, r5
 8006cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8006d2c <_svfiprintf_r+0x1f0>)
 8006cf4:	a904      	add	r1, sp, #16
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	f3af 8000 	nop.w
 8006cfc:	1c42      	adds	r2, r0, #1
 8006cfe:	4606      	mov	r6, r0
 8006d00:	d1d6      	bne.n	8006cb0 <_svfiprintf_r+0x174>
 8006d02:	89ab      	ldrh	r3, [r5, #12]
 8006d04:	065b      	lsls	r3, r3, #25
 8006d06:	f53f af2d 	bmi.w	8006b64 <_svfiprintf_r+0x28>
 8006d0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d0c:	e72c      	b.n	8006b68 <_svfiprintf_r+0x2c>
 8006d0e:	ab03      	add	r3, sp, #12
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	462a      	mov	r2, r5
 8006d14:	4b05      	ldr	r3, [pc, #20]	@ (8006d2c <_svfiprintf_r+0x1f0>)
 8006d16:	a904      	add	r1, sp, #16
 8006d18:	4638      	mov	r0, r7
 8006d1a:	f000 f879 	bl	8006e10 <_printf_i>
 8006d1e:	e7ed      	b.n	8006cfc <_svfiprintf_r+0x1c0>
 8006d20:	08007ddf 	.word	0x08007ddf
 8006d24:	08007de9 	.word	0x08007de9
 8006d28:	00000000 	.word	0x00000000
 8006d2c:	08006a85 	.word	0x08006a85
 8006d30:	08007de5 	.word	0x08007de5

08006d34 <_printf_common>:
 8006d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d38:	4616      	mov	r6, r2
 8006d3a:	4698      	mov	r8, r3
 8006d3c:	688a      	ldr	r2, [r1, #8]
 8006d3e:	690b      	ldr	r3, [r1, #16]
 8006d40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d44:	4293      	cmp	r3, r2
 8006d46:	bfb8      	it	lt
 8006d48:	4613      	movlt	r3, r2
 8006d4a:	6033      	str	r3, [r6, #0]
 8006d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d50:	4607      	mov	r7, r0
 8006d52:	460c      	mov	r4, r1
 8006d54:	b10a      	cbz	r2, 8006d5a <_printf_common+0x26>
 8006d56:	3301      	adds	r3, #1
 8006d58:	6033      	str	r3, [r6, #0]
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	0699      	lsls	r1, r3, #26
 8006d5e:	bf42      	ittt	mi
 8006d60:	6833      	ldrmi	r3, [r6, #0]
 8006d62:	3302      	addmi	r3, #2
 8006d64:	6033      	strmi	r3, [r6, #0]
 8006d66:	6825      	ldr	r5, [r4, #0]
 8006d68:	f015 0506 	ands.w	r5, r5, #6
 8006d6c:	d106      	bne.n	8006d7c <_printf_common+0x48>
 8006d6e:	f104 0a19 	add.w	sl, r4, #25
 8006d72:	68e3      	ldr	r3, [r4, #12]
 8006d74:	6832      	ldr	r2, [r6, #0]
 8006d76:	1a9b      	subs	r3, r3, r2
 8006d78:	42ab      	cmp	r3, r5
 8006d7a:	dc26      	bgt.n	8006dca <_printf_common+0x96>
 8006d7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d80:	6822      	ldr	r2, [r4, #0]
 8006d82:	3b00      	subs	r3, #0
 8006d84:	bf18      	it	ne
 8006d86:	2301      	movne	r3, #1
 8006d88:	0692      	lsls	r2, r2, #26
 8006d8a:	d42b      	bmi.n	8006de4 <_printf_common+0xb0>
 8006d8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d90:	4641      	mov	r1, r8
 8006d92:	4638      	mov	r0, r7
 8006d94:	47c8      	blx	r9
 8006d96:	3001      	adds	r0, #1
 8006d98:	d01e      	beq.n	8006dd8 <_printf_common+0xa4>
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	6922      	ldr	r2, [r4, #16]
 8006d9e:	f003 0306 	and.w	r3, r3, #6
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	bf02      	ittt	eq
 8006da6:	68e5      	ldreq	r5, [r4, #12]
 8006da8:	6833      	ldreq	r3, [r6, #0]
 8006daa:	1aed      	subeq	r5, r5, r3
 8006dac:	68a3      	ldr	r3, [r4, #8]
 8006dae:	bf0c      	ite	eq
 8006db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006db4:	2500      	movne	r5, #0
 8006db6:	4293      	cmp	r3, r2
 8006db8:	bfc4      	itt	gt
 8006dba:	1a9b      	subgt	r3, r3, r2
 8006dbc:	18ed      	addgt	r5, r5, r3
 8006dbe:	2600      	movs	r6, #0
 8006dc0:	341a      	adds	r4, #26
 8006dc2:	42b5      	cmp	r5, r6
 8006dc4:	d11a      	bne.n	8006dfc <_printf_common+0xc8>
 8006dc6:	2000      	movs	r0, #0
 8006dc8:	e008      	b.n	8006ddc <_printf_common+0xa8>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	4652      	mov	r2, sl
 8006dce:	4641      	mov	r1, r8
 8006dd0:	4638      	mov	r0, r7
 8006dd2:	47c8      	blx	r9
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	d103      	bne.n	8006de0 <_printf_common+0xac>
 8006dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de0:	3501      	adds	r5, #1
 8006de2:	e7c6      	b.n	8006d72 <_printf_common+0x3e>
 8006de4:	18e1      	adds	r1, r4, r3
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	2030      	movs	r0, #48	@ 0x30
 8006dea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006dee:	4422      	add	r2, r4
 8006df0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006df4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006df8:	3302      	adds	r3, #2
 8006dfa:	e7c7      	b.n	8006d8c <_printf_common+0x58>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	4622      	mov	r2, r4
 8006e00:	4641      	mov	r1, r8
 8006e02:	4638      	mov	r0, r7
 8006e04:	47c8      	blx	r9
 8006e06:	3001      	adds	r0, #1
 8006e08:	d0e6      	beq.n	8006dd8 <_printf_common+0xa4>
 8006e0a:	3601      	adds	r6, #1
 8006e0c:	e7d9      	b.n	8006dc2 <_printf_common+0x8e>
	...

08006e10 <_printf_i>:
 8006e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e14:	7e0f      	ldrb	r7, [r1, #24]
 8006e16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e18:	2f78      	cmp	r7, #120	@ 0x78
 8006e1a:	4691      	mov	r9, r2
 8006e1c:	4680      	mov	r8, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	469a      	mov	sl, r3
 8006e22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e26:	d807      	bhi.n	8006e38 <_printf_i+0x28>
 8006e28:	2f62      	cmp	r7, #98	@ 0x62
 8006e2a:	d80a      	bhi.n	8006e42 <_printf_i+0x32>
 8006e2c:	2f00      	cmp	r7, #0
 8006e2e:	f000 80d2 	beq.w	8006fd6 <_printf_i+0x1c6>
 8006e32:	2f58      	cmp	r7, #88	@ 0x58
 8006e34:	f000 80b9 	beq.w	8006faa <_printf_i+0x19a>
 8006e38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e40:	e03a      	b.n	8006eb8 <_printf_i+0xa8>
 8006e42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e46:	2b15      	cmp	r3, #21
 8006e48:	d8f6      	bhi.n	8006e38 <_printf_i+0x28>
 8006e4a:	a101      	add	r1, pc, #4	@ (adr r1, 8006e50 <_printf_i+0x40>)
 8006e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e50:	08006ea9 	.word	0x08006ea9
 8006e54:	08006ebd 	.word	0x08006ebd
 8006e58:	08006e39 	.word	0x08006e39
 8006e5c:	08006e39 	.word	0x08006e39
 8006e60:	08006e39 	.word	0x08006e39
 8006e64:	08006e39 	.word	0x08006e39
 8006e68:	08006ebd 	.word	0x08006ebd
 8006e6c:	08006e39 	.word	0x08006e39
 8006e70:	08006e39 	.word	0x08006e39
 8006e74:	08006e39 	.word	0x08006e39
 8006e78:	08006e39 	.word	0x08006e39
 8006e7c:	08006fbd 	.word	0x08006fbd
 8006e80:	08006ee7 	.word	0x08006ee7
 8006e84:	08006f77 	.word	0x08006f77
 8006e88:	08006e39 	.word	0x08006e39
 8006e8c:	08006e39 	.word	0x08006e39
 8006e90:	08006fdf 	.word	0x08006fdf
 8006e94:	08006e39 	.word	0x08006e39
 8006e98:	08006ee7 	.word	0x08006ee7
 8006e9c:	08006e39 	.word	0x08006e39
 8006ea0:	08006e39 	.word	0x08006e39
 8006ea4:	08006f7f 	.word	0x08006f7f
 8006ea8:	6833      	ldr	r3, [r6, #0]
 8006eaa:	1d1a      	adds	r2, r3, #4
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6032      	str	r2, [r6, #0]
 8006eb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006eb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e09d      	b.n	8006ff8 <_printf_i+0x1e8>
 8006ebc:	6833      	ldr	r3, [r6, #0]
 8006ebe:	6820      	ldr	r0, [r4, #0]
 8006ec0:	1d19      	adds	r1, r3, #4
 8006ec2:	6031      	str	r1, [r6, #0]
 8006ec4:	0606      	lsls	r6, r0, #24
 8006ec6:	d501      	bpl.n	8006ecc <_printf_i+0xbc>
 8006ec8:	681d      	ldr	r5, [r3, #0]
 8006eca:	e003      	b.n	8006ed4 <_printf_i+0xc4>
 8006ecc:	0645      	lsls	r5, r0, #25
 8006ece:	d5fb      	bpl.n	8006ec8 <_printf_i+0xb8>
 8006ed0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ed4:	2d00      	cmp	r5, #0
 8006ed6:	da03      	bge.n	8006ee0 <_printf_i+0xd0>
 8006ed8:	232d      	movs	r3, #45	@ 0x2d
 8006eda:	426d      	negs	r5, r5
 8006edc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ee0:	4859      	ldr	r0, [pc, #356]	@ (8007048 <_printf_i+0x238>)
 8006ee2:	230a      	movs	r3, #10
 8006ee4:	e011      	b.n	8006f0a <_printf_i+0xfa>
 8006ee6:	6821      	ldr	r1, [r4, #0]
 8006ee8:	6833      	ldr	r3, [r6, #0]
 8006eea:	0608      	lsls	r0, r1, #24
 8006eec:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ef0:	d402      	bmi.n	8006ef8 <_printf_i+0xe8>
 8006ef2:	0649      	lsls	r1, r1, #25
 8006ef4:	bf48      	it	mi
 8006ef6:	b2ad      	uxthmi	r5, r5
 8006ef8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006efa:	4853      	ldr	r0, [pc, #332]	@ (8007048 <_printf_i+0x238>)
 8006efc:	6033      	str	r3, [r6, #0]
 8006efe:	bf14      	ite	ne
 8006f00:	230a      	movne	r3, #10
 8006f02:	2308      	moveq	r3, #8
 8006f04:	2100      	movs	r1, #0
 8006f06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f0a:	6866      	ldr	r6, [r4, #4]
 8006f0c:	60a6      	str	r6, [r4, #8]
 8006f0e:	2e00      	cmp	r6, #0
 8006f10:	bfa2      	ittt	ge
 8006f12:	6821      	ldrge	r1, [r4, #0]
 8006f14:	f021 0104 	bicge.w	r1, r1, #4
 8006f18:	6021      	strge	r1, [r4, #0]
 8006f1a:	b90d      	cbnz	r5, 8006f20 <_printf_i+0x110>
 8006f1c:	2e00      	cmp	r6, #0
 8006f1e:	d04b      	beq.n	8006fb8 <_printf_i+0x1a8>
 8006f20:	4616      	mov	r6, r2
 8006f22:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f26:	fb03 5711 	mls	r7, r3, r1, r5
 8006f2a:	5dc7      	ldrb	r7, [r0, r7]
 8006f2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f30:	462f      	mov	r7, r5
 8006f32:	42bb      	cmp	r3, r7
 8006f34:	460d      	mov	r5, r1
 8006f36:	d9f4      	bls.n	8006f22 <_printf_i+0x112>
 8006f38:	2b08      	cmp	r3, #8
 8006f3a:	d10b      	bne.n	8006f54 <_printf_i+0x144>
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	07df      	lsls	r7, r3, #31
 8006f40:	d508      	bpl.n	8006f54 <_printf_i+0x144>
 8006f42:	6923      	ldr	r3, [r4, #16]
 8006f44:	6861      	ldr	r1, [r4, #4]
 8006f46:	4299      	cmp	r1, r3
 8006f48:	bfde      	ittt	le
 8006f4a:	2330      	movle	r3, #48	@ 0x30
 8006f4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f54:	1b92      	subs	r2, r2, r6
 8006f56:	6122      	str	r2, [r4, #16]
 8006f58:	f8cd a000 	str.w	sl, [sp]
 8006f5c:	464b      	mov	r3, r9
 8006f5e:	aa03      	add	r2, sp, #12
 8006f60:	4621      	mov	r1, r4
 8006f62:	4640      	mov	r0, r8
 8006f64:	f7ff fee6 	bl	8006d34 <_printf_common>
 8006f68:	3001      	adds	r0, #1
 8006f6a:	d14a      	bne.n	8007002 <_printf_i+0x1f2>
 8006f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f70:	b004      	add	sp, #16
 8006f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	f043 0320 	orr.w	r3, r3, #32
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	4833      	ldr	r0, [pc, #204]	@ (800704c <_printf_i+0x23c>)
 8006f80:	2778      	movs	r7, #120	@ 0x78
 8006f82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	6831      	ldr	r1, [r6, #0]
 8006f8a:	061f      	lsls	r7, r3, #24
 8006f8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f90:	d402      	bmi.n	8006f98 <_printf_i+0x188>
 8006f92:	065f      	lsls	r7, r3, #25
 8006f94:	bf48      	it	mi
 8006f96:	b2ad      	uxthmi	r5, r5
 8006f98:	6031      	str	r1, [r6, #0]
 8006f9a:	07d9      	lsls	r1, r3, #31
 8006f9c:	bf44      	itt	mi
 8006f9e:	f043 0320 	orrmi.w	r3, r3, #32
 8006fa2:	6023      	strmi	r3, [r4, #0]
 8006fa4:	b11d      	cbz	r5, 8006fae <_printf_i+0x19e>
 8006fa6:	2310      	movs	r3, #16
 8006fa8:	e7ac      	b.n	8006f04 <_printf_i+0xf4>
 8006faa:	4827      	ldr	r0, [pc, #156]	@ (8007048 <_printf_i+0x238>)
 8006fac:	e7e9      	b.n	8006f82 <_printf_i+0x172>
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	f023 0320 	bic.w	r3, r3, #32
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	e7f6      	b.n	8006fa6 <_printf_i+0x196>
 8006fb8:	4616      	mov	r6, r2
 8006fba:	e7bd      	b.n	8006f38 <_printf_i+0x128>
 8006fbc:	6833      	ldr	r3, [r6, #0]
 8006fbe:	6825      	ldr	r5, [r4, #0]
 8006fc0:	6961      	ldr	r1, [r4, #20]
 8006fc2:	1d18      	adds	r0, r3, #4
 8006fc4:	6030      	str	r0, [r6, #0]
 8006fc6:	062e      	lsls	r6, r5, #24
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	d501      	bpl.n	8006fd0 <_printf_i+0x1c0>
 8006fcc:	6019      	str	r1, [r3, #0]
 8006fce:	e002      	b.n	8006fd6 <_printf_i+0x1c6>
 8006fd0:	0668      	lsls	r0, r5, #25
 8006fd2:	d5fb      	bpl.n	8006fcc <_printf_i+0x1bc>
 8006fd4:	8019      	strh	r1, [r3, #0]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	6123      	str	r3, [r4, #16]
 8006fda:	4616      	mov	r6, r2
 8006fdc:	e7bc      	b.n	8006f58 <_printf_i+0x148>
 8006fde:	6833      	ldr	r3, [r6, #0]
 8006fe0:	1d1a      	adds	r2, r3, #4
 8006fe2:	6032      	str	r2, [r6, #0]
 8006fe4:	681e      	ldr	r6, [r3, #0]
 8006fe6:	6862      	ldr	r2, [r4, #4]
 8006fe8:	2100      	movs	r1, #0
 8006fea:	4630      	mov	r0, r6
 8006fec:	f7f9 f900 	bl	80001f0 <memchr>
 8006ff0:	b108      	cbz	r0, 8006ff6 <_printf_i+0x1e6>
 8006ff2:	1b80      	subs	r0, r0, r6
 8006ff4:	6060      	str	r0, [r4, #4]
 8006ff6:	6863      	ldr	r3, [r4, #4]
 8006ff8:	6123      	str	r3, [r4, #16]
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007000:	e7aa      	b.n	8006f58 <_printf_i+0x148>
 8007002:	6923      	ldr	r3, [r4, #16]
 8007004:	4632      	mov	r2, r6
 8007006:	4649      	mov	r1, r9
 8007008:	4640      	mov	r0, r8
 800700a:	47d0      	blx	sl
 800700c:	3001      	adds	r0, #1
 800700e:	d0ad      	beq.n	8006f6c <_printf_i+0x15c>
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	079b      	lsls	r3, r3, #30
 8007014:	d413      	bmi.n	800703e <_printf_i+0x22e>
 8007016:	68e0      	ldr	r0, [r4, #12]
 8007018:	9b03      	ldr	r3, [sp, #12]
 800701a:	4298      	cmp	r0, r3
 800701c:	bfb8      	it	lt
 800701e:	4618      	movlt	r0, r3
 8007020:	e7a6      	b.n	8006f70 <_printf_i+0x160>
 8007022:	2301      	movs	r3, #1
 8007024:	4632      	mov	r2, r6
 8007026:	4649      	mov	r1, r9
 8007028:	4640      	mov	r0, r8
 800702a:	47d0      	blx	sl
 800702c:	3001      	adds	r0, #1
 800702e:	d09d      	beq.n	8006f6c <_printf_i+0x15c>
 8007030:	3501      	adds	r5, #1
 8007032:	68e3      	ldr	r3, [r4, #12]
 8007034:	9903      	ldr	r1, [sp, #12]
 8007036:	1a5b      	subs	r3, r3, r1
 8007038:	42ab      	cmp	r3, r5
 800703a:	dcf2      	bgt.n	8007022 <_printf_i+0x212>
 800703c:	e7eb      	b.n	8007016 <_printf_i+0x206>
 800703e:	2500      	movs	r5, #0
 8007040:	f104 0619 	add.w	r6, r4, #25
 8007044:	e7f5      	b.n	8007032 <_printf_i+0x222>
 8007046:	bf00      	nop
 8007048:	08007df0 	.word	0x08007df0
 800704c:	08007e01 	.word	0x08007e01

08007050 <__sflush_r>:
 8007050:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007058:	0716      	lsls	r6, r2, #28
 800705a:	4605      	mov	r5, r0
 800705c:	460c      	mov	r4, r1
 800705e:	d454      	bmi.n	800710a <__sflush_r+0xba>
 8007060:	684b      	ldr	r3, [r1, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	dc02      	bgt.n	800706c <__sflush_r+0x1c>
 8007066:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007068:	2b00      	cmp	r3, #0
 800706a:	dd48      	ble.n	80070fe <__sflush_r+0xae>
 800706c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800706e:	2e00      	cmp	r6, #0
 8007070:	d045      	beq.n	80070fe <__sflush_r+0xae>
 8007072:	2300      	movs	r3, #0
 8007074:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007078:	682f      	ldr	r7, [r5, #0]
 800707a:	6a21      	ldr	r1, [r4, #32]
 800707c:	602b      	str	r3, [r5, #0]
 800707e:	d030      	beq.n	80070e2 <__sflush_r+0x92>
 8007080:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007082:	89a3      	ldrh	r3, [r4, #12]
 8007084:	0759      	lsls	r1, r3, #29
 8007086:	d505      	bpl.n	8007094 <__sflush_r+0x44>
 8007088:	6863      	ldr	r3, [r4, #4]
 800708a:	1ad2      	subs	r2, r2, r3
 800708c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800708e:	b10b      	cbz	r3, 8007094 <__sflush_r+0x44>
 8007090:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007092:	1ad2      	subs	r2, r2, r3
 8007094:	2300      	movs	r3, #0
 8007096:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007098:	6a21      	ldr	r1, [r4, #32]
 800709a:	4628      	mov	r0, r5
 800709c:	47b0      	blx	r6
 800709e:	1c43      	adds	r3, r0, #1
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	d106      	bne.n	80070b2 <__sflush_r+0x62>
 80070a4:	6829      	ldr	r1, [r5, #0]
 80070a6:	291d      	cmp	r1, #29
 80070a8:	d82b      	bhi.n	8007102 <__sflush_r+0xb2>
 80070aa:	4a2a      	ldr	r2, [pc, #168]	@ (8007154 <__sflush_r+0x104>)
 80070ac:	410a      	asrs	r2, r1
 80070ae:	07d6      	lsls	r6, r2, #31
 80070b0:	d427      	bmi.n	8007102 <__sflush_r+0xb2>
 80070b2:	2200      	movs	r2, #0
 80070b4:	6062      	str	r2, [r4, #4]
 80070b6:	04d9      	lsls	r1, r3, #19
 80070b8:	6922      	ldr	r2, [r4, #16]
 80070ba:	6022      	str	r2, [r4, #0]
 80070bc:	d504      	bpl.n	80070c8 <__sflush_r+0x78>
 80070be:	1c42      	adds	r2, r0, #1
 80070c0:	d101      	bne.n	80070c6 <__sflush_r+0x76>
 80070c2:	682b      	ldr	r3, [r5, #0]
 80070c4:	b903      	cbnz	r3, 80070c8 <__sflush_r+0x78>
 80070c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80070c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070ca:	602f      	str	r7, [r5, #0]
 80070cc:	b1b9      	cbz	r1, 80070fe <__sflush_r+0xae>
 80070ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070d2:	4299      	cmp	r1, r3
 80070d4:	d002      	beq.n	80070dc <__sflush_r+0x8c>
 80070d6:	4628      	mov	r0, r5
 80070d8:	f7ff fbd4 	bl	8006884 <_free_r>
 80070dc:	2300      	movs	r3, #0
 80070de:	6363      	str	r3, [r4, #52]	@ 0x34
 80070e0:	e00d      	b.n	80070fe <__sflush_r+0xae>
 80070e2:	2301      	movs	r3, #1
 80070e4:	4628      	mov	r0, r5
 80070e6:	47b0      	blx	r6
 80070e8:	4602      	mov	r2, r0
 80070ea:	1c50      	adds	r0, r2, #1
 80070ec:	d1c9      	bne.n	8007082 <__sflush_r+0x32>
 80070ee:	682b      	ldr	r3, [r5, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0c6      	beq.n	8007082 <__sflush_r+0x32>
 80070f4:	2b1d      	cmp	r3, #29
 80070f6:	d001      	beq.n	80070fc <__sflush_r+0xac>
 80070f8:	2b16      	cmp	r3, #22
 80070fa:	d11e      	bne.n	800713a <__sflush_r+0xea>
 80070fc:	602f      	str	r7, [r5, #0]
 80070fe:	2000      	movs	r0, #0
 8007100:	e022      	b.n	8007148 <__sflush_r+0xf8>
 8007102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007106:	b21b      	sxth	r3, r3
 8007108:	e01b      	b.n	8007142 <__sflush_r+0xf2>
 800710a:	690f      	ldr	r7, [r1, #16]
 800710c:	2f00      	cmp	r7, #0
 800710e:	d0f6      	beq.n	80070fe <__sflush_r+0xae>
 8007110:	0793      	lsls	r3, r2, #30
 8007112:	680e      	ldr	r6, [r1, #0]
 8007114:	bf08      	it	eq
 8007116:	694b      	ldreq	r3, [r1, #20]
 8007118:	600f      	str	r7, [r1, #0]
 800711a:	bf18      	it	ne
 800711c:	2300      	movne	r3, #0
 800711e:	eba6 0807 	sub.w	r8, r6, r7
 8007122:	608b      	str	r3, [r1, #8]
 8007124:	f1b8 0f00 	cmp.w	r8, #0
 8007128:	dde9      	ble.n	80070fe <__sflush_r+0xae>
 800712a:	6a21      	ldr	r1, [r4, #32]
 800712c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800712e:	4643      	mov	r3, r8
 8007130:	463a      	mov	r2, r7
 8007132:	4628      	mov	r0, r5
 8007134:	47b0      	blx	r6
 8007136:	2800      	cmp	r0, #0
 8007138:	dc08      	bgt.n	800714c <__sflush_r+0xfc>
 800713a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800713e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007142:	81a3      	strh	r3, [r4, #12]
 8007144:	f04f 30ff 	mov.w	r0, #4294967295
 8007148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800714c:	4407      	add	r7, r0
 800714e:	eba8 0800 	sub.w	r8, r8, r0
 8007152:	e7e7      	b.n	8007124 <__sflush_r+0xd4>
 8007154:	dfbffffe 	.word	0xdfbffffe

08007158 <_fflush_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	690b      	ldr	r3, [r1, #16]
 800715c:	4605      	mov	r5, r0
 800715e:	460c      	mov	r4, r1
 8007160:	b913      	cbnz	r3, 8007168 <_fflush_r+0x10>
 8007162:	2500      	movs	r5, #0
 8007164:	4628      	mov	r0, r5
 8007166:	bd38      	pop	{r3, r4, r5, pc}
 8007168:	b118      	cbz	r0, 8007172 <_fflush_r+0x1a>
 800716a:	6a03      	ldr	r3, [r0, #32]
 800716c:	b90b      	cbnz	r3, 8007172 <_fflush_r+0x1a>
 800716e:	f7ff fa47 	bl	8006600 <__sinit>
 8007172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0f3      	beq.n	8007162 <_fflush_r+0xa>
 800717a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800717c:	07d0      	lsls	r0, r2, #31
 800717e:	d404      	bmi.n	800718a <_fflush_r+0x32>
 8007180:	0599      	lsls	r1, r3, #22
 8007182:	d402      	bmi.n	800718a <_fflush_r+0x32>
 8007184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007186:	f7ff fb4e 	bl	8006826 <__retarget_lock_acquire_recursive>
 800718a:	4628      	mov	r0, r5
 800718c:	4621      	mov	r1, r4
 800718e:	f7ff ff5f 	bl	8007050 <__sflush_r>
 8007192:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007194:	07da      	lsls	r2, r3, #31
 8007196:	4605      	mov	r5, r0
 8007198:	d4e4      	bmi.n	8007164 <_fflush_r+0xc>
 800719a:	89a3      	ldrh	r3, [r4, #12]
 800719c:	059b      	lsls	r3, r3, #22
 800719e:	d4e1      	bmi.n	8007164 <_fflush_r+0xc>
 80071a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071a2:	f7ff fb41 	bl	8006828 <__retarget_lock_release_recursive>
 80071a6:	e7dd      	b.n	8007164 <_fflush_r+0xc>

080071a8 <fiprintf>:
 80071a8:	b40e      	push	{r1, r2, r3}
 80071aa:	b503      	push	{r0, r1, lr}
 80071ac:	4601      	mov	r1, r0
 80071ae:	ab03      	add	r3, sp, #12
 80071b0:	4805      	ldr	r0, [pc, #20]	@ (80071c8 <fiprintf+0x20>)
 80071b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b6:	6800      	ldr	r0, [r0, #0]
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	f000 f88f 	bl	80072dc <_vfiprintf_r>
 80071be:	b002      	add	sp, #8
 80071c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071c4:	b003      	add	sp, #12
 80071c6:	4770      	bx	lr
 80071c8:	20000030 	.word	0x20000030

080071cc <memmove>:
 80071cc:	4288      	cmp	r0, r1
 80071ce:	b510      	push	{r4, lr}
 80071d0:	eb01 0402 	add.w	r4, r1, r2
 80071d4:	d902      	bls.n	80071dc <memmove+0x10>
 80071d6:	4284      	cmp	r4, r0
 80071d8:	4623      	mov	r3, r4
 80071da:	d807      	bhi.n	80071ec <memmove+0x20>
 80071dc:	1e43      	subs	r3, r0, #1
 80071de:	42a1      	cmp	r1, r4
 80071e0:	d008      	beq.n	80071f4 <memmove+0x28>
 80071e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071ea:	e7f8      	b.n	80071de <memmove+0x12>
 80071ec:	4402      	add	r2, r0
 80071ee:	4601      	mov	r1, r0
 80071f0:	428a      	cmp	r2, r1
 80071f2:	d100      	bne.n	80071f6 <memmove+0x2a>
 80071f4:	bd10      	pop	{r4, pc}
 80071f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071fe:	e7f7      	b.n	80071f0 <memmove+0x24>

08007200 <_sbrk_r>:
 8007200:	b538      	push	{r3, r4, r5, lr}
 8007202:	4d06      	ldr	r5, [pc, #24]	@ (800721c <_sbrk_r+0x1c>)
 8007204:	2300      	movs	r3, #0
 8007206:	4604      	mov	r4, r0
 8007208:	4608      	mov	r0, r1
 800720a:	602b      	str	r3, [r5, #0]
 800720c:	f7f9 fcda 	bl	8000bc4 <_sbrk>
 8007210:	1c43      	adds	r3, r0, #1
 8007212:	d102      	bne.n	800721a <_sbrk_r+0x1a>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	b103      	cbz	r3, 800721a <_sbrk_r+0x1a>
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	bd38      	pop	{r3, r4, r5, pc}
 800721c:	20001ee4 	.word	0x20001ee4

08007220 <abort>:
 8007220:	b508      	push	{r3, lr}
 8007222:	2006      	movs	r0, #6
 8007224:	f000 fa2e 	bl	8007684 <raise>
 8007228:	2001      	movs	r0, #1
 800722a:	f7f9 fc53 	bl	8000ad4 <_exit>

0800722e <_realloc_r>:
 800722e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007232:	4680      	mov	r8, r0
 8007234:	4615      	mov	r5, r2
 8007236:	460c      	mov	r4, r1
 8007238:	b921      	cbnz	r1, 8007244 <_realloc_r+0x16>
 800723a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800723e:	4611      	mov	r1, r2
 8007240:	f7ff bb94 	b.w	800696c <_malloc_r>
 8007244:	b92a      	cbnz	r2, 8007252 <_realloc_r+0x24>
 8007246:	f7ff fb1d 	bl	8006884 <_free_r>
 800724a:	2400      	movs	r4, #0
 800724c:	4620      	mov	r0, r4
 800724e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007252:	f000 fa33 	bl	80076bc <_malloc_usable_size_r>
 8007256:	4285      	cmp	r5, r0
 8007258:	4606      	mov	r6, r0
 800725a:	d802      	bhi.n	8007262 <_realloc_r+0x34>
 800725c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007260:	d8f4      	bhi.n	800724c <_realloc_r+0x1e>
 8007262:	4629      	mov	r1, r5
 8007264:	4640      	mov	r0, r8
 8007266:	f7ff fb81 	bl	800696c <_malloc_r>
 800726a:	4607      	mov	r7, r0
 800726c:	2800      	cmp	r0, #0
 800726e:	d0ec      	beq.n	800724a <_realloc_r+0x1c>
 8007270:	42b5      	cmp	r5, r6
 8007272:	462a      	mov	r2, r5
 8007274:	4621      	mov	r1, r4
 8007276:	bf28      	it	cs
 8007278:	4632      	movcs	r2, r6
 800727a:	f7ff fad6 	bl	800682a <memcpy>
 800727e:	4621      	mov	r1, r4
 8007280:	4640      	mov	r0, r8
 8007282:	f7ff faff 	bl	8006884 <_free_r>
 8007286:	463c      	mov	r4, r7
 8007288:	e7e0      	b.n	800724c <_realloc_r+0x1e>

0800728a <__sfputc_r>:
 800728a:	6893      	ldr	r3, [r2, #8]
 800728c:	3b01      	subs	r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	b410      	push	{r4}
 8007292:	6093      	str	r3, [r2, #8]
 8007294:	da08      	bge.n	80072a8 <__sfputc_r+0x1e>
 8007296:	6994      	ldr	r4, [r2, #24]
 8007298:	42a3      	cmp	r3, r4
 800729a:	db01      	blt.n	80072a0 <__sfputc_r+0x16>
 800729c:	290a      	cmp	r1, #10
 800729e:	d103      	bne.n	80072a8 <__sfputc_r+0x1e>
 80072a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072a4:	f000 b932 	b.w	800750c <__swbuf_r>
 80072a8:	6813      	ldr	r3, [r2, #0]
 80072aa:	1c58      	adds	r0, r3, #1
 80072ac:	6010      	str	r0, [r2, #0]
 80072ae:	7019      	strb	r1, [r3, #0]
 80072b0:	4608      	mov	r0, r1
 80072b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <__sfputs_r>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	4606      	mov	r6, r0
 80072bc:	460f      	mov	r7, r1
 80072be:	4614      	mov	r4, r2
 80072c0:	18d5      	adds	r5, r2, r3
 80072c2:	42ac      	cmp	r4, r5
 80072c4:	d101      	bne.n	80072ca <__sfputs_r+0x12>
 80072c6:	2000      	movs	r0, #0
 80072c8:	e007      	b.n	80072da <__sfputs_r+0x22>
 80072ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ce:	463a      	mov	r2, r7
 80072d0:	4630      	mov	r0, r6
 80072d2:	f7ff ffda 	bl	800728a <__sfputc_r>
 80072d6:	1c43      	adds	r3, r0, #1
 80072d8:	d1f3      	bne.n	80072c2 <__sfputs_r+0xa>
 80072da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072dc <_vfiprintf_r>:
 80072dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	460d      	mov	r5, r1
 80072e2:	b09d      	sub	sp, #116	@ 0x74
 80072e4:	4614      	mov	r4, r2
 80072e6:	4698      	mov	r8, r3
 80072e8:	4606      	mov	r6, r0
 80072ea:	b118      	cbz	r0, 80072f4 <_vfiprintf_r+0x18>
 80072ec:	6a03      	ldr	r3, [r0, #32]
 80072ee:	b90b      	cbnz	r3, 80072f4 <_vfiprintf_r+0x18>
 80072f0:	f7ff f986 	bl	8006600 <__sinit>
 80072f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072f6:	07d9      	lsls	r1, r3, #31
 80072f8:	d405      	bmi.n	8007306 <_vfiprintf_r+0x2a>
 80072fa:	89ab      	ldrh	r3, [r5, #12]
 80072fc:	059a      	lsls	r2, r3, #22
 80072fe:	d402      	bmi.n	8007306 <_vfiprintf_r+0x2a>
 8007300:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007302:	f7ff fa90 	bl	8006826 <__retarget_lock_acquire_recursive>
 8007306:	89ab      	ldrh	r3, [r5, #12]
 8007308:	071b      	lsls	r3, r3, #28
 800730a:	d501      	bpl.n	8007310 <_vfiprintf_r+0x34>
 800730c:	692b      	ldr	r3, [r5, #16]
 800730e:	b99b      	cbnz	r3, 8007338 <_vfiprintf_r+0x5c>
 8007310:	4629      	mov	r1, r5
 8007312:	4630      	mov	r0, r6
 8007314:	f000 f938 	bl	8007588 <__swsetup_r>
 8007318:	b170      	cbz	r0, 8007338 <_vfiprintf_r+0x5c>
 800731a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800731c:	07dc      	lsls	r4, r3, #31
 800731e:	d504      	bpl.n	800732a <_vfiprintf_r+0x4e>
 8007320:	f04f 30ff 	mov.w	r0, #4294967295
 8007324:	b01d      	add	sp, #116	@ 0x74
 8007326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800732a:	89ab      	ldrh	r3, [r5, #12]
 800732c:	0598      	lsls	r0, r3, #22
 800732e:	d4f7      	bmi.n	8007320 <_vfiprintf_r+0x44>
 8007330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007332:	f7ff fa79 	bl	8006828 <__retarget_lock_release_recursive>
 8007336:	e7f3      	b.n	8007320 <_vfiprintf_r+0x44>
 8007338:	2300      	movs	r3, #0
 800733a:	9309      	str	r3, [sp, #36]	@ 0x24
 800733c:	2320      	movs	r3, #32
 800733e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007342:	f8cd 800c 	str.w	r8, [sp, #12]
 8007346:	2330      	movs	r3, #48	@ 0x30
 8007348:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80074f8 <_vfiprintf_r+0x21c>
 800734c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007350:	f04f 0901 	mov.w	r9, #1
 8007354:	4623      	mov	r3, r4
 8007356:	469a      	mov	sl, r3
 8007358:	f813 2b01 	ldrb.w	r2, [r3], #1
 800735c:	b10a      	cbz	r2, 8007362 <_vfiprintf_r+0x86>
 800735e:	2a25      	cmp	r2, #37	@ 0x25
 8007360:	d1f9      	bne.n	8007356 <_vfiprintf_r+0x7a>
 8007362:	ebba 0b04 	subs.w	fp, sl, r4
 8007366:	d00b      	beq.n	8007380 <_vfiprintf_r+0xa4>
 8007368:	465b      	mov	r3, fp
 800736a:	4622      	mov	r2, r4
 800736c:	4629      	mov	r1, r5
 800736e:	4630      	mov	r0, r6
 8007370:	f7ff ffa2 	bl	80072b8 <__sfputs_r>
 8007374:	3001      	adds	r0, #1
 8007376:	f000 80a7 	beq.w	80074c8 <_vfiprintf_r+0x1ec>
 800737a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800737c:	445a      	add	r2, fp
 800737e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007380:	f89a 3000 	ldrb.w	r3, [sl]
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 809f 	beq.w	80074c8 <_vfiprintf_r+0x1ec>
 800738a:	2300      	movs	r3, #0
 800738c:	f04f 32ff 	mov.w	r2, #4294967295
 8007390:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007394:	f10a 0a01 	add.w	sl, sl, #1
 8007398:	9304      	str	r3, [sp, #16]
 800739a:	9307      	str	r3, [sp, #28]
 800739c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80073a2:	4654      	mov	r4, sl
 80073a4:	2205      	movs	r2, #5
 80073a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073aa:	4853      	ldr	r0, [pc, #332]	@ (80074f8 <_vfiprintf_r+0x21c>)
 80073ac:	f7f8 ff20 	bl	80001f0 <memchr>
 80073b0:	9a04      	ldr	r2, [sp, #16]
 80073b2:	b9d8      	cbnz	r0, 80073ec <_vfiprintf_r+0x110>
 80073b4:	06d1      	lsls	r1, r2, #27
 80073b6:	bf44      	itt	mi
 80073b8:	2320      	movmi	r3, #32
 80073ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073be:	0713      	lsls	r3, r2, #28
 80073c0:	bf44      	itt	mi
 80073c2:	232b      	movmi	r3, #43	@ 0x2b
 80073c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073c8:	f89a 3000 	ldrb.w	r3, [sl]
 80073cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80073ce:	d015      	beq.n	80073fc <_vfiprintf_r+0x120>
 80073d0:	9a07      	ldr	r2, [sp, #28]
 80073d2:	4654      	mov	r4, sl
 80073d4:	2000      	movs	r0, #0
 80073d6:	f04f 0c0a 	mov.w	ip, #10
 80073da:	4621      	mov	r1, r4
 80073dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073e0:	3b30      	subs	r3, #48	@ 0x30
 80073e2:	2b09      	cmp	r3, #9
 80073e4:	d94b      	bls.n	800747e <_vfiprintf_r+0x1a2>
 80073e6:	b1b0      	cbz	r0, 8007416 <_vfiprintf_r+0x13a>
 80073e8:	9207      	str	r2, [sp, #28]
 80073ea:	e014      	b.n	8007416 <_vfiprintf_r+0x13a>
 80073ec:	eba0 0308 	sub.w	r3, r0, r8
 80073f0:	fa09 f303 	lsl.w	r3, r9, r3
 80073f4:	4313      	orrs	r3, r2
 80073f6:	9304      	str	r3, [sp, #16]
 80073f8:	46a2      	mov	sl, r4
 80073fa:	e7d2      	b.n	80073a2 <_vfiprintf_r+0xc6>
 80073fc:	9b03      	ldr	r3, [sp, #12]
 80073fe:	1d19      	adds	r1, r3, #4
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	9103      	str	r1, [sp, #12]
 8007404:	2b00      	cmp	r3, #0
 8007406:	bfbb      	ittet	lt
 8007408:	425b      	neglt	r3, r3
 800740a:	f042 0202 	orrlt.w	r2, r2, #2
 800740e:	9307      	strge	r3, [sp, #28]
 8007410:	9307      	strlt	r3, [sp, #28]
 8007412:	bfb8      	it	lt
 8007414:	9204      	strlt	r2, [sp, #16]
 8007416:	7823      	ldrb	r3, [r4, #0]
 8007418:	2b2e      	cmp	r3, #46	@ 0x2e
 800741a:	d10a      	bne.n	8007432 <_vfiprintf_r+0x156>
 800741c:	7863      	ldrb	r3, [r4, #1]
 800741e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007420:	d132      	bne.n	8007488 <_vfiprintf_r+0x1ac>
 8007422:	9b03      	ldr	r3, [sp, #12]
 8007424:	1d1a      	adds	r2, r3, #4
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	9203      	str	r2, [sp, #12]
 800742a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800742e:	3402      	adds	r4, #2
 8007430:	9305      	str	r3, [sp, #20]
 8007432:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007508 <_vfiprintf_r+0x22c>
 8007436:	7821      	ldrb	r1, [r4, #0]
 8007438:	2203      	movs	r2, #3
 800743a:	4650      	mov	r0, sl
 800743c:	f7f8 fed8 	bl	80001f0 <memchr>
 8007440:	b138      	cbz	r0, 8007452 <_vfiprintf_r+0x176>
 8007442:	9b04      	ldr	r3, [sp, #16]
 8007444:	eba0 000a 	sub.w	r0, r0, sl
 8007448:	2240      	movs	r2, #64	@ 0x40
 800744a:	4082      	lsls	r2, r0
 800744c:	4313      	orrs	r3, r2
 800744e:	3401      	adds	r4, #1
 8007450:	9304      	str	r3, [sp, #16]
 8007452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007456:	4829      	ldr	r0, [pc, #164]	@ (80074fc <_vfiprintf_r+0x220>)
 8007458:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800745c:	2206      	movs	r2, #6
 800745e:	f7f8 fec7 	bl	80001f0 <memchr>
 8007462:	2800      	cmp	r0, #0
 8007464:	d03f      	beq.n	80074e6 <_vfiprintf_r+0x20a>
 8007466:	4b26      	ldr	r3, [pc, #152]	@ (8007500 <_vfiprintf_r+0x224>)
 8007468:	bb1b      	cbnz	r3, 80074b2 <_vfiprintf_r+0x1d6>
 800746a:	9b03      	ldr	r3, [sp, #12]
 800746c:	3307      	adds	r3, #7
 800746e:	f023 0307 	bic.w	r3, r3, #7
 8007472:	3308      	adds	r3, #8
 8007474:	9303      	str	r3, [sp, #12]
 8007476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007478:	443b      	add	r3, r7
 800747a:	9309      	str	r3, [sp, #36]	@ 0x24
 800747c:	e76a      	b.n	8007354 <_vfiprintf_r+0x78>
 800747e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007482:	460c      	mov	r4, r1
 8007484:	2001      	movs	r0, #1
 8007486:	e7a8      	b.n	80073da <_vfiprintf_r+0xfe>
 8007488:	2300      	movs	r3, #0
 800748a:	3401      	adds	r4, #1
 800748c:	9305      	str	r3, [sp, #20]
 800748e:	4619      	mov	r1, r3
 8007490:	f04f 0c0a 	mov.w	ip, #10
 8007494:	4620      	mov	r0, r4
 8007496:	f810 2b01 	ldrb.w	r2, [r0], #1
 800749a:	3a30      	subs	r2, #48	@ 0x30
 800749c:	2a09      	cmp	r2, #9
 800749e:	d903      	bls.n	80074a8 <_vfiprintf_r+0x1cc>
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d0c6      	beq.n	8007432 <_vfiprintf_r+0x156>
 80074a4:	9105      	str	r1, [sp, #20]
 80074a6:	e7c4      	b.n	8007432 <_vfiprintf_r+0x156>
 80074a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80074ac:	4604      	mov	r4, r0
 80074ae:	2301      	movs	r3, #1
 80074b0:	e7f0      	b.n	8007494 <_vfiprintf_r+0x1b8>
 80074b2:	ab03      	add	r3, sp, #12
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	462a      	mov	r2, r5
 80074b8:	4b12      	ldr	r3, [pc, #72]	@ (8007504 <_vfiprintf_r+0x228>)
 80074ba:	a904      	add	r1, sp, #16
 80074bc:	4630      	mov	r0, r6
 80074be:	f3af 8000 	nop.w
 80074c2:	4607      	mov	r7, r0
 80074c4:	1c78      	adds	r0, r7, #1
 80074c6:	d1d6      	bne.n	8007476 <_vfiprintf_r+0x19a>
 80074c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074ca:	07d9      	lsls	r1, r3, #31
 80074cc:	d405      	bmi.n	80074da <_vfiprintf_r+0x1fe>
 80074ce:	89ab      	ldrh	r3, [r5, #12]
 80074d0:	059a      	lsls	r2, r3, #22
 80074d2:	d402      	bmi.n	80074da <_vfiprintf_r+0x1fe>
 80074d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074d6:	f7ff f9a7 	bl	8006828 <__retarget_lock_release_recursive>
 80074da:	89ab      	ldrh	r3, [r5, #12]
 80074dc:	065b      	lsls	r3, r3, #25
 80074de:	f53f af1f 	bmi.w	8007320 <_vfiprintf_r+0x44>
 80074e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074e4:	e71e      	b.n	8007324 <_vfiprintf_r+0x48>
 80074e6:	ab03      	add	r3, sp, #12
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	462a      	mov	r2, r5
 80074ec:	4b05      	ldr	r3, [pc, #20]	@ (8007504 <_vfiprintf_r+0x228>)
 80074ee:	a904      	add	r1, sp, #16
 80074f0:	4630      	mov	r0, r6
 80074f2:	f7ff fc8d 	bl	8006e10 <_printf_i>
 80074f6:	e7e4      	b.n	80074c2 <_vfiprintf_r+0x1e6>
 80074f8:	08007ddf 	.word	0x08007ddf
 80074fc:	08007de9 	.word	0x08007de9
 8007500:	00000000 	.word	0x00000000
 8007504:	080072b9 	.word	0x080072b9
 8007508:	08007de5 	.word	0x08007de5

0800750c <__swbuf_r>:
 800750c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750e:	460e      	mov	r6, r1
 8007510:	4614      	mov	r4, r2
 8007512:	4605      	mov	r5, r0
 8007514:	b118      	cbz	r0, 800751e <__swbuf_r+0x12>
 8007516:	6a03      	ldr	r3, [r0, #32]
 8007518:	b90b      	cbnz	r3, 800751e <__swbuf_r+0x12>
 800751a:	f7ff f871 	bl	8006600 <__sinit>
 800751e:	69a3      	ldr	r3, [r4, #24]
 8007520:	60a3      	str	r3, [r4, #8]
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	071a      	lsls	r2, r3, #28
 8007526:	d501      	bpl.n	800752c <__swbuf_r+0x20>
 8007528:	6923      	ldr	r3, [r4, #16]
 800752a:	b943      	cbnz	r3, 800753e <__swbuf_r+0x32>
 800752c:	4621      	mov	r1, r4
 800752e:	4628      	mov	r0, r5
 8007530:	f000 f82a 	bl	8007588 <__swsetup_r>
 8007534:	b118      	cbz	r0, 800753e <__swbuf_r+0x32>
 8007536:	f04f 37ff 	mov.w	r7, #4294967295
 800753a:	4638      	mov	r0, r7
 800753c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	6922      	ldr	r2, [r4, #16]
 8007542:	1a98      	subs	r0, r3, r2
 8007544:	6963      	ldr	r3, [r4, #20]
 8007546:	b2f6      	uxtb	r6, r6
 8007548:	4283      	cmp	r3, r0
 800754a:	4637      	mov	r7, r6
 800754c:	dc05      	bgt.n	800755a <__swbuf_r+0x4e>
 800754e:	4621      	mov	r1, r4
 8007550:	4628      	mov	r0, r5
 8007552:	f7ff fe01 	bl	8007158 <_fflush_r>
 8007556:	2800      	cmp	r0, #0
 8007558:	d1ed      	bne.n	8007536 <__swbuf_r+0x2a>
 800755a:	68a3      	ldr	r3, [r4, #8]
 800755c:	3b01      	subs	r3, #1
 800755e:	60a3      	str	r3, [r4, #8]
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	6022      	str	r2, [r4, #0]
 8007566:	701e      	strb	r6, [r3, #0]
 8007568:	6962      	ldr	r2, [r4, #20]
 800756a:	1c43      	adds	r3, r0, #1
 800756c:	429a      	cmp	r2, r3
 800756e:	d004      	beq.n	800757a <__swbuf_r+0x6e>
 8007570:	89a3      	ldrh	r3, [r4, #12]
 8007572:	07db      	lsls	r3, r3, #31
 8007574:	d5e1      	bpl.n	800753a <__swbuf_r+0x2e>
 8007576:	2e0a      	cmp	r6, #10
 8007578:	d1df      	bne.n	800753a <__swbuf_r+0x2e>
 800757a:	4621      	mov	r1, r4
 800757c:	4628      	mov	r0, r5
 800757e:	f7ff fdeb 	bl	8007158 <_fflush_r>
 8007582:	2800      	cmp	r0, #0
 8007584:	d0d9      	beq.n	800753a <__swbuf_r+0x2e>
 8007586:	e7d6      	b.n	8007536 <__swbuf_r+0x2a>

08007588 <__swsetup_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4b29      	ldr	r3, [pc, #164]	@ (8007630 <__swsetup_r+0xa8>)
 800758c:	4605      	mov	r5, r0
 800758e:	6818      	ldr	r0, [r3, #0]
 8007590:	460c      	mov	r4, r1
 8007592:	b118      	cbz	r0, 800759c <__swsetup_r+0x14>
 8007594:	6a03      	ldr	r3, [r0, #32]
 8007596:	b90b      	cbnz	r3, 800759c <__swsetup_r+0x14>
 8007598:	f7ff f832 	bl	8006600 <__sinit>
 800759c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a0:	0719      	lsls	r1, r3, #28
 80075a2:	d422      	bmi.n	80075ea <__swsetup_r+0x62>
 80075a4:	06da      	lsls	r2, r3, #27
 80075a6:	d407      	bmi.n	80075b8 <__swsetup_r+0x30>
 80075a8:	2209      	movs	r2, #9
 80075aa:	602a      	str	r2, [r5, #0]
 80075ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075b0:	81a3      	strh	r3, [r4, #12]
 80075b2:	f04f 30ff 	mov.w	r0, #4294967295
 80075b6:	e033      	b.n	8007620 <__swsetup_r+0x98>
 80075b8:	0758      	lsls	r0, r3, #29
 80075ba:	d512      	bpl.n	80075e2 <__swsetup_r+0x5a>
 80075bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075be:	b141      	cbz	r1, 80075d2 <__swsetup_r+0x4a>
 80075c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075c4:	4299      	cmp	r1, r3
 80075c6:	d002      	beq.n	80075ce <__swsetup_r+0x46>
 80075c8:	4628      	mov	r0, r5
 80075ca:	f7ff f95b 	bl	8006884 <_free_r>
 80075ce:	2300      	movs	r3, #0
 80075d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80075d2:	89a3      	ldrh	r3, [r4, #12]
 80075d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80075d8:	81a3      	strh	r3, [r4, #12]
 80075da:	2300      	movs	r3, #0
 80075dc:	6063      	str	r3, [r4, #4]
 80075de:	6923      	ldr	r3, [r4, #16]
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	f043 0308 	orr.w	r3, r3, #8
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	6923      	ldr	r3, [r4, #16]
 80075ec:	b94b      	cbnz	r3, 8007602 <__swsetup_r+0x7a>
 80075ee:	89a3      	ldrh	r3, [r4, #12]
 80075f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80075f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075f8:	d003      	beq.n	8007602 <__swsetup_r+0x7a>
 80075fa:	4621      	mov	r1, r4
 80075fc:	4628      	mov	r0, r5
 80075fe:	f000 f88b 	bl	8007718 <__smakebuf_r>
 8007602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007606:	f013 0201 	ands.w	r2, r3, #1
 800760a:	d00a      	beq.n	8007622 <__swsetup_r+0x9a>
 800760c:	2200      	movs	r2, #0
 800760e:	60a2      	str	r2, [r4, #8]
 8007610:	6962      	ldr	r2, [r4, #20]
 8007612:	4252      	negs	r2, r2
 8007614:	61a2      	str	r2, [r4, #24]
 8007616:	6922      	ldr	r2, [r4, #16]
 8007618:	b942      	cbnz	r2, 800762c <__swsetup_r+0xa4>
 800761a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800761e:	d1c5      	bne.n	80075ac <__swsetup_r+0x24>
 8007620:	bd38      	pop	{r3, r4, r5, pc}
 8007622:	0799      	lsls	r1, r3, #30
 8007624:	bf58      	it	pl
 8007626:	6962      	ldrpl	r2, [r4, #20]
 8007628:	60a2      	str	r2, [r4, #8]
 800762a:	e7f4      	b.n	8007616 <__swsetup_r+0x8e>
 800762c:	2000      	movs	r0, #0
 800762e:	e7f7      	b.n	8007620 <__swsetup_r+0x98>
 8007630:	20000030 	.word	0x20000030

08007634 <_raise_r>:
 8007634:	291f      	cmp	r1, #31
 8007636:	b538      	push	{r3, r4, r5, lr}
 8007638:	4605      	mov	r5, r0
 800763a:	460c      	mov	r4, r1
 800763c:	d904      	bls.n	8007648 <_raise_r+0x14>
 800763e:	2316      	movs	r3, #22
 8007640:	6003      	str	r3, [r0, #0]
 8007642:	f04f 30ff 	mov.w	r0, #4294967295
 8007646:	bd38      	pop	{r3, r4, r5, pc}
 8007648:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800764a:	b112      	cbz	r2, 8007652 <_raise_r+0x1e>
 800764c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007650:	b94b      	cbnz	r3, 8007666 <_raise_r+0x32>
 8007652:	4628      	mov	r0, r5
 8007654:	f000 f830 	bl	80076b8 <_getpid_r>
 8007658:	4622      	mov	r2, r4
 800765a:	4601      	mov	r1, r0
 800765c:	4628      	mov	r0, r5
 800765e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007662:	f000 b817 	b.w	8007694 <_kill_r>
 8007666:	2b01      	cmp	r3, #1
 8007668:	d00a      	beq.n	8007680 <_raise_r+0x4c>
 800766a:	1c59      	adds	r1, r3, #1
 800766c:	d103      	bne.n	8007676 <_raise_r+0x42>
 800766e:	2316      	movs	r3, #22
 8007670:	6003      	str	r3, [r0, #0]
 8007672:	2001      	movs	r0, #1
 8007674:	e7e7      	b.n	8007646 <_raise_r+0x12>
 8007676:	2100      	movs	r1, #0
 8007678:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800767c:	4620      	mov	r0, r4
 800767e:	4798      	blx	r3
 8007680:	2000      	movs	r0, #0
 8007682:	e7e0      	b.n	8007646 <_raise_r+0x12>

08007684 <raise>:
 8007684:	4b02      	ldr	r3, [pc, #8]	@ (8007690 <raise+0xc>)
 8007686:	4601      	mov	r1, r0
 8007688:	6818      	ldr	r0, [r3, #0]
 800768a:	f7ff bfd3 	b.w	8007634 <_raise_r>
 800768e:	bf00      	nop
 8007690:	20000030 	.word	0x20000030

08007694 <_kill_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4d07      	ldr	r5, [pc, #28]	@ (80076b4 <_kill_r+0x20>)
 8007698:	2300      	movs	r3, #0
 800769a:	4604      	mov	r4, r0
 800769c:	4608      	mov	r0, r1
 800769e:	4611      	mov	r1, r2
 80076a0:	602b      	str	r3, [r5, #0]
 80076a2:	f7f9 fa07 	bl	8000ab4 <_kill>
 80076a6:	1c43      	adds	r3, r0, #1
 80076a8:	d102      	bne.n	80076b0 <_kill_r+0x1c>
 80076aa:	682b      	ldr	r3, [r5, #0]
 80076ac:	b103      	cbz	r3, 80076b0 <_kill_r+0x1c>
 80076ae:	6023      	str	r3, [r4, #0]
 80076b0:	bd38      	pop	{r3, r4, r5, pc}
 80076b2:	bf00      	nop
 80076b4:	20001ee4 	.word	0x20001ee4

080076b8 <_getpid_r>:
 80076b8:	f7f9 b9f4 	b.w	8000aa4 <_getpid>

080076bc <_malloc_usable_size_r>:
 80076bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076c0:	1f18      	subs	r0, r3, #4
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	bfbc      	itt	lt
 80076c6:	580b      	ldrlt	r3, [r1, r0]
 80076c8:	18c0      	addlt	r0, r0, r3
 80076ca:	4770      	bx	lr

080076cc <__swhatbuf_r>:
 80076cc:	b570      	push	{r4, r5, r6, lr}
 80076ce:	460c      	mov	r4, r1
 80076d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d4:	2900      	cmp	r1, #0
 80076d6:	b096      	sub	sp, #88	@ 0x58
 80076d8:	4615      	mov	r5, r2
 80076da:	461e      	mov	r6, r3
 80076dc:	da0d      	bge.n	80076fa <__swhatbuf_r+0x2e>
 80076de:	89a3      	ldrh	r3, [r4, #12]
 80076e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80076e4:	f04f 0100 	mov.w	r1, #0
 80076e8:	bf14      	ite	ne
 80076ea:	2340      	movne	r3, #64	@ 0x40
 80076ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80076f0:	2000      	movs	r0, #0
 80076f2:	6031      	str	r1, [r6, #0]
 80076f4:	602b      	str	r3, [r5, #0]
 80076f6:	b016      	add	sp, #88	@ 0x58
 80076f8:	bd70      	pop	{r4, r5, r6, pc}
 80076fa:	466a      	mov	r2, sp
 80076fc:	f000 f848 	bl	8007790 <_fstat_r>
 8007700:	2800      	cmp	r0, #0
 8007702:	dbec      	blt.n	80076de <__swhatbuf_r+0x12>
 8007704:	9901      	ldr	r1, [sp, #4]
 8007706:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800770a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800770e:	4259      	negs	r1, r3
 8007710:	4159      	adcs	r1, r3
 8007712:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007716:	e7eb      	b.n	80076f0 <__swhatbuf_r+0x24>

08007718 <__smakebuf_r>:
 8007718:	898b      	ldrh	r3, [r1, #12]
 800771a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800771c:	079d      	lsls	r5, r3, #30
 800771e:	4606      	mov	r6, r0
 8007720:	460c      	mov	r4, r1
 8007722:	d507      	bpl.n	8007734 <__smakebuf_r+0x1c>
 8007724:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	6123      	str	r3, [r4, #16]
 800772c:	2301      	movs	r3, #1
 800772e:	6163      	str	r3, [r4, #20]
 8007730:	b003      	add	sp, #12
 8007732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007734:	ab01      	add	r3, sp, #4
 8007736:	466a      	mov	r2, sp
 8007738:	f7ff ffc8 	bl	80076cc <__swhatbuf_r>
 800773c:	9f00      	ldr	r7, [sp, #0]
 800773e:	4605      	mov	r5, r0
 8007740:	4639      	mov	r1, r7
 8007742:	4630      	mov	r0, r6
 8007744:	f7ff f912 	bl	800696c <_malloc_r>
 8007748:	b948      	cbnz	r0, 800775e <__smakebuf_r+0x46>
 800774a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800774e:	059a      	lsls	r2, r3, #22
 8007750:	d4ee      	bmi.n	8007730 <__smakebuf_r+0x18>
 8007752:	f023 0303 	bic.w	r3, r3, #3
 8007756:	f043 0302 	orr.w	r3, r3, #2
 800775a:	81a3      	strh	r3, [r4, #12]
 800775c:	e7e2      	b.n	8007724 <__smakebuf_r+0xc>
 800775e:	89a3      	ldrh	r3, [r4, #12]
 8007760:	6020      	str	r0, [r4, #0]
 8007762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007766:	81a3      	strh	r3, [r4, #12]
 8007768:	9b01      	ldr	r3, [sp, #4]
 800776a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800776e:	b15b      	cbz	r3, 8007788 <__smakebuf_r+0x70>
 8007770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007774:	4630      	mov	r0, r6
 8007776:	f000 f81d 	bl	80077b4 <_isatty_r>
 800777a:	b128      	cbz	r0, 8007788 <__smakebuf_r+0x70>
 800777c:	89a3      	ldrh	r3, [r4, #12]
 800777e:	f023 0303 	bic.w	r3, r3, #3
 8007782:	f043 0301 	orr.w	r3, r3, #1
 8007786:	81a3      	strh	r3, [r4, #12]
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	431d      	orrs	r5, r3
 800778c:	81a5      	strh	r5, [r4, #12]
 800778e:	e7cf      	b.n	8007730 <__smakebuf_r+0x18>

08007790 <_fstat_r>:
 8007790:	b538      	push	{r3, r4, r5, lr}
 8007792:	4d07      	ldr	r5, [pc, #28]	@ (80077b0 <_fstat_r+0x20>)
 8007794:	2300      	movs	r3, #0
 8007796:	4604      	mov	r4, r0
 8007798:	4608      	mov	r0, r1
 800779a:	4611      	mov	r1, r2
 800779c:	602b      	str	r3, [r5, #0]
 800779e:	f7f9 f9e9 	bl	8000b74 <_fstat>
 80077a2:	1c43      	adds	r3, r0, #1
 80077a4:	d102      	bne.n	80077ac <_fstat_r+0x1c>
 80077a6:	682b      	ldr	r3, [r5, #0]
 80077a8:	b103      	cbz	r3, 80077ac <_fstat_r+0x1c>
 80077aa:	6023      	str	r3, [r4, #0]
 80077ac:	bd38      	pop	{r3, r4, r5, pc}
 80077ae:	bf00      	nop
 80077b0:	20001ee4 	.word	0x20001ee4

080077b4 <_isatty_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	4d06      	ldr	r5, [pc, #24]	@ (80077d0 <_isatty_r+0x1c>)
 80077b8:	2300      	movs	r3, #0
 80077ba:	4604      	mov	r4, r0
 80077bc:	4608      	mov	r0, r1
 80077be:	602b      	str	r3, [r5, #0]
 80077c0:	f7f9 f9e8 	bl	8000b94 <_isatty>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_isatty_r+0x1a>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_isatty_r+0x1a>
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	20001ee4 	.word	0x20001ee4

080077d4 <_init>:
 80077d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d6:	bf00      	nop
 80077d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077da:	bc08      	pop	{r3}
 80077dc:	469e      	mov	lr, r3
 80077de:	4770      	bx	lr

080077e0 <_fini>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	bf00      	nop
 80077e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e6:	bc08      	pop	{r3}
 80077e8:	469e      	mov	lr, r3
 80077ea:	4770      	bx	lr
